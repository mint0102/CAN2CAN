
CAN2CAN.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003bac  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08003d34  08003d34  00013d34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003d4c  08003d4c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08003d4c  08003d4c  00013d4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003d54  08003d54  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003d54  08003d54  00013d54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003d58  08003d58  00013d58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003d5c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          00000190  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000019c  2000019c  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000a6ff  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00001a80  00000000  00000000  0002a77e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000848  00000000  00000000  0002c200  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000658  00000000  00000000  0002ca48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00001832  00000000  00000000  0002d0a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000ad05  00000000  00000000  0002e8d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000ba1df  00000000  00000000  000395d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00002178  00000000  00000000  000f37b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000003d  00000000  00000000  000f5930  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003d1c 	.word	0x08003d1c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08003d1c 	.word	0x08003d1c

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b970 	b.w	80004c0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	460d      	mov	r5, r1
 8000200:	4604      	mov	r4, r0
 8000202:	460f      	mov	r7, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4694      	mov	ip, r2
 800020c:	d965      	bls.n	80002da <__udivmoddi4+0xe2>
 800020e:	fab2 f382 	clz	r3, r2
 8000212:	b143      	cbz	r3, 8000226 <__udivmoddi4+0x2e>
 8000214:	fa02 fc03 	lsl.w	ip, r2, r3
 8000218:	f1c3 0220 	rsb	r2, r3, #32
 800021c:	409f      	lsls	r7, r3
 800021e:	fa20 f202 	lsr.w	r2, r0, r2
 8000222:	4317      	orrs	r7, r2
 8000224:	409c      	lsls	r4, r3
 8000226:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800022a:	fa1f f58c 	uxth.w	r5, ip
 800022e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000232:	0c22      	lsrs	r2, r4, #16
 8000234:	fb0e 7711 	mls	r7, lr, r1, r7
 8000238:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800023c:	fb01 f005 	mul.w	r0, r1, r5
 8000240:	4290      	cmp	r0, r2
 8000242:	d90a      	bls.n	800025a <__udivmoddi4+0x62>
 8000244:	eb1c 0202 	adds.w	r2, ip, r2
 8000248:	f101 37ff 	add.w	r7, r1, #4294967295
 800024c:	f080 811c 	bcs.w	8000488 <__udivmoddi4+0x290>
 8000250:	4290      	cmp	r0, r2
 8000252:	f240 8119 	bls.w	8000488 <__udivmoddi4+0x290>
 8000256:	3902      	subs	r1, #2
 8000258:	4462      	add	r2, ip
 800025a:	1a12      	subs	r2, r2, r0
 800025c:	b2a4      	uxth	r4, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800026a:	fb00 f505 	mul.w	r5, r0, r5
 800026e:	42a5      	cmp	r5, r4
 8000270:	d90a      	bls.n	8000288 <__udivmoddi4+0x90>
 8000272:	eb1c 0404 	adds.w	r4, ip, r4
 8000276:	f100 32ff 	add.w	r2, r0, #4294967295
 800027a:	f080 8107 	bcs.w	800048c <__udivmoddi4+0x294>
 800027e:	42a5      	cmp	r5, r4
 8000280:	f240 8104 	bls.w	800048c <__udivmoddi4+0x294>
 8000284:	4464      	add	r4, ip
 8000286:	3802      	subs	r0, #2
 8000288:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028c:	1b64      	subs	r4, r4, r5
 800028e:	2100      	movs	r1, #0
 8000290:	b11e      	cbz	r6, 800029a <__udivmoddi4+0xa2>
 8000292:	40dc      	lsrs	r4, r3
 8000294:	2300      	movs	r3, #0
 8000296:	e9c6 4300 	strd	r4, r3, [r6]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d908      	bls.n	80002b4 <__udivmoddi4+0xbc>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80ed 	beq.w	8000482 <__udivmoddi4+0x28a>
 80002a8:	2100      	movs	r1, #0
 80002aa:	e9c6 0500 	strd	r0, r5, [r6]
 80002ae:	4608      	mov	r0, r1
 80002b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b4:	fab3 f183 	clz	r1, r3
 80002b8:	2900      	cmp	r1, #0
 80002ba:	d149      	bne.n	8000350 <__udivmoddi4+0x158>
 80002bc:	42ab      	cmp	r3, r5
 80002be:	d302      	bcc.n	80002c6 <__udivmoddi4+0xce>
 80002c0:	4282      	cmp	r2, r0
 80002c2:	f200 80f8 	bhi.w	80004b6 <__udivmoddi4+0x2be>
 80002c6:	1a84      	subs	r4, r0, r2
 80002c8:	eb65 0203 	sbc.w	r2, r5, r3
 80002cc:	2001      	movs	r0, #1
 80002ce:	4617      	mov	r7, r2
 80002d0:	2e00      	cmp	r6, #0
 80002d2:	d0e2      	beq.n	800029a <__udivmoddi4+0xa2>
 80002d4:	e9c6 4700 	strd	r4, r7, [r6]
 80002d8:	e7df      	b.n	800029a <__udivmoddi4+0xa2>
 80002da:	b902      	cbnz	r2, 80002de <__udivmoddi4+0xe6>
 80002dc:	deff      	udf	#255	; 0xff
 80002de:	fab2 f382 	clz	r3, r2
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	f040 8090 	bne.w	8000408 <__udivmoddi4+0x210>
 80002e8:	1a8a      	subs	r2, r1, r2
 80002ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002ee:	fa1f fe8c 	uxth.w	lr, ip
 80002f2:	2101      	movs	r1, #1
 80002f4:	fbb2 f5f7 	udiv	r5, r2, r7
 80002f8:	fb07 2015 	mls	r0, r7, r5, r2
 80002fc:	0c22      	lsrs	r2, r4, #16
 80002fe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000302:	fb0e f005 	mul.w	r0, lr, r5
 8000306:	4290      	cmp	r0, r2
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x124>
 800030a:	eb1c 0202 	adds.w	r2, ip, r2
 800030e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4290      	cmp	r0, r2
 8000316:	f200 80cb 	bhi.w	80004b0 <__udivmoddi4+0x2b8>
 800031a:	4645      	mov	r5, r8
 800031c:	1a12      	subs	r2, r2, r0
 800031e:	b2a4      	uxth	r4, r4
 8000320:	fbb2 f0f7 	udiv	r0, r2, r7
 8000324:	fb07 2210 	mls	r2, r7, r0, r2
 8000328:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800032c:	fb0e fe00 	mul.w	lr, lr, r0
 8000330:	45a6      	cmp	lr, r4
 8000332:	d908      	bls.n	8000346 <__udivmoddi4+0x14e>
 8000334:	eb1c 0404 	adds.w	r4, ip, r4
 8000338:	f100 32ff 	add.w	r2, r0, #4294967295
 800033c:	d202      	bcs.n	8000344 <__udivmoddi4+0x14c>
 800033e:	45a6      	cmp	lr, r4
 8000340:	f200 80bb 	bhi.w	80004ba <__udivmoddi4+0x2c2>
 8000344:	4610      	mov	r0, r2
 8000346:	eba4 040e 	sub.w	r4, r4, lr
 800034a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800034e:	e79f      	b.n	8000290 <__udivmoddi4+0x98>
 8000350:	f1c1 0720 	rsb	r7, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 fc07 	lsr.w	ip, r2, r7
 800035a:	ea4c 0c03 	orr.w	ip, ip, r3
 800035e:	fa05 f401 	lsl.w	r4, r5, r1
 8000362:	fa20 f307 	lsr.w	r3, r0, r7
 8000366:	40fd      	lsrs	r5, r7
 8000368:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800036c:	4323      	orrs	r3, r4
 800036e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000372:	fa1f fe8c 	uxth.w	lr, ip
 8000376:	fb09 5518 	mls	r5, r9, r8, r5
 800037a:	0c1c      	lsrs	r4, r3, #16
 800037c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000380:	fb08 f50e 	mul.w	r5, r8, lr
 8000384:	42a5      	cmp	r5, r4
 8000386:	fa02 f201 	lsl.w	r2, r2, r1
 800038a:	fa00 f001 	lsl.w	r0, r0, r1
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1c 0404 	adds.w	r4, ip, r4
 8000394:	f108 3aff 	add.w	sl, r8, #4294967295
 8000398:	f080 8088 	bcs.w	80004ac <__udivmoddi4+0x2b4>
 800039c:	42a5      	cmp	r5, r4
 800039e:	f240 8085 	bls.w	80004ac <__udivmoddi4+0x2b4>
 80003a2:	f1a8 0802 	sub.w	r8, r8, #2
 80003a6:	4464      	add	r4, ip
 80003a8:	1b64      	subs	r4, r4, r5
 80003aa:	b29d      	uxth	r5, r3
 80003ac:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b0:	fb09 4413 	mls	r4, r9, r3, r4
 80003b4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003b8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003bc:	45a6      	cmp	lr, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1c 0404 	adds.w	r4, ip, r4
 80003c4:	f103 35ff 	add.w	r5, r3, #4294967295
 80003c8:	d26c      	bcs.n	80004a4 <__udivmoddi4+0x2ac>
 80003ca:	45a6      	cmp	lr, r4
 80003cc:	d96a      	bls.n	80004a4 <__udivmoddi4+0x2ac>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	4464      	add	r4, ip
 80003d2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003d6:	fba3 9502 	umull	r9, r5, r3, r2
 80003da:	eba4 040e 	sub.w	r4, r4, lr
 80003de:	42ac      	cmp	r4, r5
 80003e0:	46c8      	mov	r8, r9
 80003e2:	46ae      	mov	lr, r5
 80003e4:	d356      	bcc.n	8000494 <__udivmoddi4+0x29c>
 80003e6:	d053      	beq.n	8000490 <__udivmoddi4+0x298>
 80003e8:	b156      	cbz	r6, 8000400 <__udivmoddi4+0x208>
 80003ea:	ebb0 0208 	subs.w	r2, r0, r8
 80003ee:	eb64 040e 	sbc.w	r4, r4, lr
 80003f2:	fa04 f707 	lsl.w	r7, r4, r7
 80003f6:	40ca      	lsrs	r2, r1
 80003f8:	40cc      	lsrs	r4, r1
 80003fa:	4317      	orrs	r7, r2
 80003fc:	e9c6 7400 	strd	r7, r4, [r6]
 8000400:	4618      	mov	r0, r3
 8000402:	2100      	movs	r1, #0
 8000404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000408:	f1c3 0120 	rsb	r1, r3, #32
 800040c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000410:	fa20 f201 	lsr.w	r2, r0, r1
 8000414:	fa25 f101 	lsr.w	r1, r5, r1
 8000418:	409d      	lsls	r5, r3
 800041a:	432a      	orrs	r2, r5
 800041c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000420:	fa1f fe8c 	uxth.w	lr, ip
 8000424:	fbb1 f0f7 	udiv	r0, r1, r7
 8000428:	fb07 1510 	mls	r5, r7, r0, r1
 800042c:	0c11      	lsrs	r1, r2, #16
 800042e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000432:	fb00 f50e 	mul.w	r5, r0, lr
 8000436:	428d      	cmp	r5, r1
 8000438:	fa04 f403 	lsl.w	r4, r4, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x258>
 800043e:	eb1c 0101 	adds.w	r1, ip, r1
 8000442:	f100 38ff 	add.w	r8, r0, #4294967295
 8000446:	d22f      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 8000448:	428d      	cmp	r5, r1
 800044a:	d92d      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800044c:	3802      	subs	r0, #2
 800044e:	4461      	add	r1, ip
 8000450:	1b49      	subs	r1, r1, r5
 8000452:	b292      	uxth	r2, r2
 8000454:	fbb1 f5f7 	udiv	r5, r1, r7
 8000458:	fb07 1115 	mls	r1, r7, r5, r1
 800045c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000460:	fb05 f10e 	mul.w	r1, r5, lr
 8000464:	4291      	cmp	r1, r2
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x282>
 8000468:	eb1c 0202 	adds.w	r2, ip, r2
 800046c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000470:	d216      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 8000472:	4291      	cmp	r1, r2
 8000474:	d914      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000476:	3d02      	subs	r5, #2
 8000478:	4462      	add	r2, ip
 800047a:	1a52      	subs	r2, r2, r1
 800047c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000480:	e738      	b.n	80002f4 <__udivmoddi4+0xfc>
 8000482:	4631      	mov	r1, r6
 8000484:	4630      	mov	r0, r6
 8000486:	e708      	b.n	800029a <__udivmoddi4+0xa2>
 8000488:	4639      	mov	r1, r7
 800048a:	e6e6      	b.n	800025a <__udivmoddi4+0x62>
 800048c:	4610      	mov	r0, r2
 800048e:	e6fb      	b.n	8000288 <__udivmoddi4+0x90>
 8000490:	4548      	cmp	r0, r9
 8000492:	d2a9      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000494:	ebb9 0802 	subs.w	r8, r9, r2
 8000498:	eb65 0e0c 	sbc.w	lr, r5, ip
 800049c:	3b01      	subs	r3, #1
 800049e:	e7a3      	b.n	80003e8 <__udivmoddi4+0x1f0>
 80004a0:	4645      	mov	r5, r8
 80004a2:	e7ea      	b.n	800047a <__udivmoddi4+0x282>
 80004a4:	462b      	mov	r3, r5
 80004a6:	e794      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a8:	4640      	mov	r0, r8
 80004aa:	e7d1      	b.n	8000450 <__udivmoddi4+0x258>
 80004ac:	46d0      	mov	r8, sl
 80004ae:	e77b      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004b0:	3d02      	subs	r5, #2
 80004b2:	4462      	add	r2, ip
 80004b4:	e732      	b.n	800031c <__udivmoddi4+0x124>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e70a      	b.n	80002d0 <__udivmoddi4+0xd8>
 80004ba:	4464      	add	r4, ip
 80004bc:	3802      	subs	r0, #2
 80004be:	e742      	b.n	8000346 <__udivmoddi4+0x14e>

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b082      	sub	sp, #8
 80004c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	uint16_t i,j = 0;
 80004ca:	2300      	movs	r3, #0
 80004cc:	80fb      	strh	r3, [r7, #6]
	uint16_t Consecutive_Cntr = 0;
 80004ce:	2300      	movs	r3, #0
 80004d0:	80bb      	strh	r3, [r7, #4]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d2:	f000 fc7b 	bl	8000dcc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d6:	f000 f885 	bl	80005e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004da:	f000 f987 	bl	80007ec <MX_GPIO_Init>
  MX_CAN1_Init();
 80004de:	f000 f8eb 	bl	80006b8 <MX_CAN1_Init>
  MX_CAN2_Init();
 80004e2:	f000 f921 	bl	8000728 <MX_CAN2_Init>
  MX_USART3_UART_Init();
 80004e6:	f000 f957 	bl	8000798 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  __HAL_UART_ENABLE_IT(&huart3, UART_IT_RXNE);
 80004ea:	4b33      	ldr	r3, [pc, #204]	; (80005b8 <main+0xf4>)
 80004ec:	681b      	ldr	r3, [r3, #0]
 80004ee:	68da      	ldr	r2, [r3, #12]
 80004f0:	4b31      	ldr	r3, [pc, #196]	; (80005b8 <main+0xf4>)
 80004f2:	681b      	ldr	r3, [r3, #0]
 80004f4:	f042 0220 	orr.w	r2, r2, #32
 80004f8:	60da      	str	r2, [r3, #12]

  //can1
	CAN1_pHeader.StdId = 0x012; //12 gửi
 80004fa:	4b30      	ldr	r3, [pc, #192]	; (80005bc <main+0xf8>)
 80004fc:	2212      	movs	r2, #18
 80004fe:	601a      	str	r2, [r3, #0]
	CAN1_pHeaderRx.StdId = 0x0A2;
 8000500:	4b2f      	ldr	r3, [pc, #188]	; (80005c0 <main+0xfc>)
 8000502:	22a2      	movs	r2, #162	; 0xa2
 8000504:	601a      	str	r2, [r3, #0]
	CAN1_pHeader.DLC = 8;
 8000506:	4b2d      	ldr	r3, [pc, #180]	; (80005bc <main+0xf8>)
 8000508:	2208      	movs	r2, #8
 800050a:	611a      	str	r2, [r3, #16]
	CAN1_pHeader.ExtId = 0;
 800050c:	4b2b      	ldr	r3, [pc, #172]	; (80005bc <main+0xf8>)
 800050e:	2200      	movs	r2, #0
 8000510:	605a      	str	r2, [r3, #4]
	CAN1_pHeader.IDE = CAN_ID_STD;
 8000512:	4b2a      	ldr	r3, [pc, #168]	; (80005bc <main+0xf8>)
 8000514:	2200      	movs	r2, #0
 8000516:	609a      	str	r2, [r3, #8]
	CAN1_pHeader.RTR = CAN_RTR_DATA;
 8000518:	4b28      	ldr	r3, [pc, #160]	; (80005bc <main+0xf8>)
 800051a:	2200      	movs	r2, #0
 800051c:	60da      	str	r2, [r3, #12]
	CAN1_pHeader.TransmitGlobalTime = DISABLE;
 800051e:	4b27      	ldr	r3, [pc, #156]	; (80005bc <main+0xf8>)
 8000520:	2200      	movs	r2, #0
 8000522:	751a      	strb	r2, [r3, #20]
	HAL_CAN_AddTxMessage(&hcan1, &CAN1_pHeader, CAN1_DATA_TX, &CAN1_pTxMailbox);
 8000524:	4b27      	ldr	r3, [pc, #156]	; (80005c4 <main+0x100>)
 8000526:	4a28      	ldr	r2, [pc, #160]	; (80005c8 <main+0x104>)
 8000528:	4924      	ldr	r1, [pc, #144]	; (80005bc <main+0xf8>)
 800052a:	4828      	ldr	r0, [pc, #160]	; (80005cc <main+0x108>)
 800052c:	f000 fee0 	bl	80012f0 <HAL_CAN_AddTxMessage>

	//can2
	CAN2_pHeader.StdId = 0x0A2;
 8000530:	4b27      	ldr	r3, [pc, #156]	; (80005d0 <main+0x10c>)
 8000532:	22a2      	movs	r2, #162	; 0xa2
 8000534:	601a      	str	r2, [r3, #0]
	CAN2_pHeaderRx.StdId = 0x012;
 8000536:	4b27      	ldr	r3, [pc, #156]	; (80005d4 <main+0x110>)
 8000538:	2212      	movs	r2, #18
 800053a:	601a      	str	r2, [r3, #0]
	CAN2_pHeader.DLC = 8;
 800053c:	4b24      	ldr	r3, [pc, #144]	; (80005d0 <main+0x10c>)
 800053e:	2208      	movs	r2, #8
 8000540:	611a      	str	r2, [r3, #16]
	CAN2_pHeader.ExtId = 0;
 8000542:	4b23      	ldr	r3, [pc, #140]	; (80005d0 <main+0x10c>)
 8000544:	2200      	movs	r2, #0
 8000546:	605a      	str	r2, [r3, #4]
	CAN2_pHeader.IDE = CAN_ID_STD;
 8000548:	4b21      	ldr	r3, [pc, #132]	; (80005d0 <main+0x10c>)
 800054a:	2200      	movs	r2, #0
 800054c:	609a      	str	r2, [r3, #8]
	CAN2_pHeader.RTR = CAN_RTR_DATA;
 800054e:	4b20      	ldr	r3, [pc, #128]	; (80005d0 <main+0x10c>)
 8000550:	2200      	movs	r2, #0
 8000552:	60da      	str	r2, [r3, #12]
	CAN2_pHeader.TransmitGlobalTime = DISABLE;
 8000554:	4b1e      	ldr	r3, [pc, #120]	; (80005d0 <main+0x10c>)
 8000556:	2200      	movs	r2, #0
 8000558:	751a      	strb	r2, [r3, #20]

	CAN2_sFilterConfig.FilterBank = 14;
 800055a:	4b1f      	ldr	r3, [pc, #124]	; (80005d8 <main+0x114>)
 800055c:	220e      	movs	r2, #14
 800055e:	615a      	str	r2, [r3, #20]
	CAN2_sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000560:	4b1d      	ldr	r3, [pc, #116]	; (80005d8 <main+0x114>)
 8000562:	2200      	movs	r2, #0
 8000564:	619a      	str	r2, [r3, #24]
	CAN2_sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8000566:	4b1c      	ldr	r3, [pc, #112]	; (80005d8 <main+0x114>)
 8000568:	2200      	movs	r2, #0
 800056a:	611a      	str	r2, [r3, #16]
	CAN2_sFilterConfig.FilterIdHigh = 0;
 800056c:	4b1a      	ldr	r3, [pc, #104]	; (80005d8 <main+0x114>)
 800056e:	2200      	movs	r2, #0
 8000570:	601a      	str	r2, [r3, #0]
	CAN2_sFilterConfig.FilterIdLow = 0x012;
 8000572:	4b19      	ldr	r3, [pc, #100]	; (80005d8 <main+0x114>)
 8000574:	2212      	movs	r2, #18
 8000576:	605a      	str	r2, [r3, #4]
	CAN2_sFilterConfig.FilterMaskIdHigh = 0;
 8000578:	4b17      	ldr	r3, [pc, #92]	; (80005d8 <main+0x114>)
 800057a:	2200      	movs	r2, #0
 800057c:	609a      	str	r2, [r3, #8]
	CAN2_sFilterConfig.FilterMaskIdLow = 0x7FF;
 800057e:	4b16      	ldr	r3, [pc, #88]	; (80005d8 <main+0x114>)
 8000580:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8000584:	60da      	str	r2, [r3, #12]
	CAN2_sFilterConfig.FilterScale = CAN_FILTERSCALE_16BIT;
 8000586:	4b14      	ldr	r3, [pc, #80]	; (80005d8 <main+0x114>)
 8000588:	2200      	movs	r2, #0
 800058a:	61da      	str	r2, [r3, #28]
	CAN2_sFilterConfig.FilterActivation = ENABLE;
 800058c:	4b12      	ldr	r3, [pc, #72]	; (80005d8 <main+0x114>)
 800058e:	2201      	movs	r2, #1
 8000590:	621a      	str	r2, [r3, #32]
	CAN2_sFilterConfig.SlaveStartFilterBank = 14;
 8000592:	4b11      	ldr	r3, [pc, #68]	; (80005d8 <main+0x114>)
 8000594:	220e      	movs	r2, #14
 8000596:	625a      	str	r2, [r3, #36]	; 0x24
	//

	MX_CAN1_Setup();
 8000598:	f000 f9b8 	bl	800090c <MX_CAN1_Setup>
	MX_CAN2_Setup();
 800059c:	f000 f9ca 	bl	8000934 <MX_CAN2_Setup>
//	uint8_t temp_start = 0;
	HAL_UART_Receive_IT(&huart3, data, 2);
 80005a0:	2202      	movs	r2, #2
 80005a2:	490e      	ldr	r1, [pc, #56]	; (80005dc <main+0x118>)
 80005a4:	4804      	ldr	r0, [pc, #16]	; (80005b8 <main+0xf4>)
 80005a6:	f002 fbf4 	bl	8002d92 <HAL_UART_Receive_IT>
	HAL_GPIO_WritePin(LED_RX_GPIO_Port, LED_RX_Pin, 0);
 80005aa:	2200      	movs	r2, #0
 80005ac:	2102      	movs	r1, #2
 80005ae:	480c      	ldr	r0, [pc, #48]	; (80005e0 <main+0x11c>)
 80005b0:	f001 fe20 	bl	80021f4 <HAL_GPIO_WritePin>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  // Example Function to print can message via uart
//  PrintCANLog(CAN1_pHeader.StdId, &CAN1_DATA_TX[0]);
  while (1)
 80005b4:	e7fe      	b.n	80005b4 <main+0xf0>
 80005b6:	bf00      	nop
 80005b8:	20000078 	.word	0x20000078
 80005bc:	200000bc 	.word	0x200000bc
 80005c0:	200000d4 	.word	0x200000d4
 80005c4:	20000174 	.word	0x20000174
 80005c8:	2000017c 	.word	0x2000017c
 80005cc:	20000028 	.word	0x20000028
 80005d0:	20000118 	.word	0x20000118
 80005d4:	20000130 	.word	0x20000130
 80005d8:	2000014c 	.word	0x2000014c
 80005dc:	2000018c 	.word	0x2000018c
 80005e0:	40020400 	.word	0x40020400

080005e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b094      	sub	sp, #80	; 0x50
 80005e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ea:	f107 0320 	add.w	r3, r7, #32
 80005ee:	2230      	movs	r2, #48	; 0x30
 80005f0:	2100      	movs	r1, #0
 80005f2:	4618      	mov	r0, r3
 80005f4:	f003 fb66 	bl	8003cc4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005f8:	f107 030c 	add.w	r3, r7, #12
 80005fc:	2200      	movs	r2, #0
 80005fe:	601a      	str	r2, [r3, #0]
 8000600:	605a      	str	r2, [r3, #4]
 8000602:	609a      	str	r2, [r3, #8]
 8000604:	60da      	str	r2, [r3, #12]
 8000606:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000608:	2300      	movs	r3, #0
 800060a:	60bb      	str	r3, [r7, #8]
 800060c:	4b28      	ldr	r3, [pc, #160]	; (80006b0 <SystemClock_Config+0xcc>)
 800060e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000610:	4a27      	ldr	r2, [pc, #156]	; (80006b0 <SystemClock_Config+0xcc>)
 8000612:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000616:	6413      	str	r3, [r2, #64]	; 0x40
 8000618:	4b25      	ldr	r3, [pc, #148]	; (80006b0 <SystemClock_Config+0xcc>)
 800061a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800061c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000620:	60bb      	str	r3, [r7, #8]
 8000622:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000624:	2300      	movs	r3, #0
 8000626:	607b      	str	r3, [r7, #4]
 8000628:	4b22      	ldr	r3, [pc, #136]	; (80006b4 <SystemClock_Config+0xd0>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	4a21      	ldr	r2, [pc, #132]	; (80006b4 <SystemClock_Config+0xd0>)
 800062e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000632:	6013      	str	r3, [r2, #0]
 8000634:	4b1f      	ldr	r3, [pc, #124]	; (80006b4 <SystemClock_Config+0xd0>)
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800063c:	607b      	str	r3, [r7, #4]
 800063e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000640:	2302      	movs	r3, #2
 8000642:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000644:	2301      	movs	r3, #1
 8000646:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000648:	2310      	movs	r3, #16
 800064a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800064c:	2302      	movs	r3, #2
 800064e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000650:	2300      	movs	r3, #0
 8000652:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000654:	2308      	movs	r3, #8
 8000656:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 80;
 8000658:	2350      	movs	r3, #80	; 0x50
 800065a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800065c:	2302      	movs	r3, #2
 800065e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000660:	2304      	movs	r3, #4
 8000662:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000664:	f107 0320 	add.w	r3, r7, #32
 8000668:	4618      	mov	r0, r3
 800066a:	f001 fe1b 	bl	80022a4 <HAL_RCC_OscConfig>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d001      	beq.n	8000678 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000674:	f000 f9d8 	bl	8000a28 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000678:	230f      	movs	r3, #15
 800067a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800067c:	2302      	movs	r3, #2
 800067e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000680:	2300      	movs	r3, #0
 8000682:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000684:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000688:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800068a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800068e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000690:	f107 030c 	add.w	r3, r7, #12
 8000694:	2102      	movs	r1, #2
 8000696:	4618      	mov	r0, r3
 8000698:	f002 f87c 	bl	8002794 <HAL_RCC_ClockConfig>
 800069c:	4603      	mov	r3, r0
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d001      	beq.n	80006a6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80006a2:	f000 f9c1 	bl	8000a28 <Error_Handler>
  }
}
 80006a6:	bf00      	nop
 80006a8:	3750      	adds	r7, #80	; 0x50
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bd80      	pop	{r7, pc}
 80006ae:	bf00      	nop
 80006b0:	40023800 	.word	0x40023800
 80006b4:	40007000 	.word	0x40007000

080006b8 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80006bc:	4b18      	ldr	r3, [pc, #96]	; (8000720 <MX_CAN1_Init+0x68>)
 80006be:	4a19      	ldr	r2, [pc, #100]	; (8000724 <MX_CAN1_Init+0x6c>)
 80006c0:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 10;
 80006c2:	4b17      	ldr	r3, [pc, #92]	; (8000720 <MX_CAN1_Init+0x68>)
 80006c4:	220a      	movs	r2, #10
 80006c6:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80006c8:	4b15      	ldr	r3, [pc, #84]	; (8000720 <MX_CAN1_Init+0x68>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_2TQ;
 80006ce:	4b14      	ldr	r3, [pc, #80]	; (8000720 <MX_CAN1_Init+0x68>)
 80006d0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80006d4:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_5TQ;
 80006d6:	4b12      	ldr	r3, [pc, #72]	; (8000720 <MX_CAN1_Init+0x68>)
 80006d8:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80006dc:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 80006de:	4b10      	ldr	r3, [pc, #64]	; (8000720 <MX_CAN1_Init+0x68>)
 80006e0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80006e4:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80006e6:	4b0e      	ldr	r3, [pc, #56]	; (8000720 <MX_CAN1_Init+0x68>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80006ec:	4b0c      	ldr	r3, [pc, #48]	; (8000720 <MX_CAN1_Init+0x68>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80006f2:	4b0b      	ldr	r3, [pc, #44]	; (8000720 <MX_CAN1_Init+0x68>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80006f8:	4b09      	ldr	r3, [pc, #36]	; (8000720 <MX_CAN1_Init+0x68>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80006fe:	4b08      	ldr	r3, [pc, #32]	; (8000720 <MX_CAN1_Init+0x68>)
 8000700:	2200      	movs	r2, #0
 8000702:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000704:	4b06      	ldr	r3, [pc, #24]	; (8000720 <MX_CAN1_Init+0x68>)
 8000706:	2200      	movs	r2, #0
 8000708:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800070a:	4805      	ldr	r0, [pc, #20]	; (8000720 <MX_CAN1_Init+0x68>)
 800070c:	f000 fbd0 	bl	8000eb0 <HAL_CAN_Init>
 8000710:	4603      	mov	r3, r0
 8000712:	2b00      	cmp	r3, #0
 8000714:	d001      	beq.n	800071a <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 8000716:	f000 f987 	bl	8000a28 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 800071a:	bf00      	nop
 800071c:	bd80      	pop	{r7, pc}
 800071e:	bf00      	nop
 8000720:	20000028 	.word	0x20000028
 8000724:	40006400 	.word	0x40006400

08000728 <MX_CAN2_Init>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 800072c:	4b18      	ldr	r3, [pc, #96]	; (8000790 <MX_CAN2_Init+0x68>)
 800072e:	4a19      	ldr	r2, [pc, #100]	; (8000794 <MX_CAN2_Init+0x6c>)
 8000730:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 10;
 8000732:	4b17      	ldr	r3, [pc, #92]	; (8000790 <MX_CAN2_Init+0x68>)
 8000734:	220a      	movs	r2, #10
 8000736:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8000738:	4b15      	ldr	r3, [pc, #84]	; (8000790 <MX_CAN2_Init+0x68>)
 800073a:	2200      	movs	r2, #0
 800073c:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_2TQ;
 800073e:	4b14      	ldr	r3, [pc, #80]	; (8000790 <MX_CAN2_Init+0x68>)
 8000740:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000744:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_5TQ;
 8000746:	4b12      	ldr	r3, [pc, #72]	; (8000790 <MX_CAN2_Init+0x68>)
 8000748:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800074c:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_2TQ;
 800074e:	4b10      	ldr	r3, [pc, #64]	; (8000790 <MX_CAN2_Init+0x68>)
 8000750:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000754:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8000756:	4b0e      	ldr	r3, [pc, #56]	; (8000790 <MX_CAN2_Init+0x68>)
 8000758:	2200      	movs	r2, #0
 800075a:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 800075c:	4b0c      	ldr	r3, [pc, #48]	; (8000790 <MX_CAN2_Init+0x68>)
 800075e:	2200      	movs	r2, #0
 8000760:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8000762:	4b0b      	ldr	r3, [pc, #44]	; (8000790 <MX_CAN2_Init+0x68>)
 8000764:	2200      	movs	r2, #0
 8000766:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 8000768:	4b09      	ldr	r3, [pc, #36]	; (8000790 <MX_CAN2_Init+0x68>)
 800076a:	2200      	movs	r2, #0
 800076c:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 800076e:	4b08      	ldr	r3, [pc, #32]	; (8000790 <MX_CAN2_Init+0x68>)
 8000770:	2200      	movs	r2, #0
 8000772:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 8000774:	4b06      	ldr	r3, [pc, #24]	; (8000790 <MX_CAN2_Init+0x68>)
 8000776:	2200      	movs	r2, #0
 8000778:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 800077a:	4805      	ldr	r0, [pc, #20]	; (8000790 <MX_CAN2_Init+0x68>)
 800077c:	f000 fb98 	bl	8000eb0 <HAL_CAN_Init>
 8000780:	4603      	mov	r3, r0
 8000782:	2b00      	cmp	r3, #0
 8000784:	d001      	beq.n	800078a <MX_CAN2_Init+0x62>
  {
    Error_Handler();
 8000786:	f000 f94f 	bl	8000a28 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 800078a:	bf00      	nop
 800078c:	bd80      	pop	{r7, pc}
 800078e:	bf00      	nop
 8000790:	20000050 	.word	0x20000050
 8000794:	40006800 	.word	0x40006800

08000798 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800079c:	4b11      	ldr	r3, [pc, #68]	; (80007e4 <MX_USART3_UART_Init+0x4c>)
 800079e:	4a12      	ldr	r2, [pc, #72]	; (80007e8 <MX_USART3_UART_Init+0x50>)
 80007a0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80007a2:	4b10      	ldr	r3, [pc, #64]	; (80007e4 <MX_USART3_UART_Init+0x4c>)
 80007a4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007a8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80007aa:	4b0e      	ldr	r3, [pc, #56]	; (80007e4 <MX_USART3_UART_Init+0x4c>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80007b0:	4b0c      	ldr	r3, [pc, #48]	; (80007e4 <MX_USART3_UART_Init+0x4c>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80007b6:	4b0b      	ldr	r3, [pc, #44]	; (80007e4 <MX_USART3_UART_Init+0x4c>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80007bc:	4b09      	ldr	r3, [pc, #36]	; (80007e4 <MX_USART3_UART_Init+0x4c>)
 80007be:	220c      	movs	r2, #12
 80007c0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007c2:	4b08      	ldr	r3, [pc, #32]	; (80007e4 <MX_USART3_UART_Init+0x4c>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80007c8:	4b06      	ldr	r3, [pc, #24]	; (80007e4 <MX_USART3_UART_Init+0x4c>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80007ce:	4805      	ldr	r0, [pc, #20]	; (80007e4 <MX_USART3_UART_Init+0x4c>)
 80007d0:	f002 fa00 	bl	8002bd4 <HAL_UART_Init>
 80007d4:	4603      	mov	r3, r0
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d001      	beq.n	80007de <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80007da:	f000 f925 	bl	8000a28 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80007de:	bf00      	nop
 80007e0:	bd80      	pop	{r7, pc}
 80007e2:	bf00      	nop
 80007e4:	20000078 	.word	0x20000078
 80007e8:	40004800 	.word	0x40004800

080007ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b08a      	sub	sp, #40	; 0x28
 80007f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007f2:	f107 0314 	add.w	r3, r7, #20
 80007f6:	2200      	movs	r2, #0
 80007f8:	601a      	str	r2, [r3, #0]
 80007fa:	605a      	str	r2, [r3, #4]
 80007fc:	609a      	str	r2, [r3, #8]
 80007fe:	60da      	str	r2, [r3, #12]
 8000800:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000802:	2300      	movs	r3, #0
 8000804:	613b      	str	r3, [r7, #16]
 8000806:	4b3d      	ldr	r3, [pc, #244]	; (80008fc <MX_GPIO_Init+0x110>)
 8000808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080a:	4a3c      	ldr	r2, [pc, #240]	; (80008fc <MX_GPIO_Init+0x110>)
 800080c:	f043 0304 	orr.w	r3, r3, #4
 8000810:	6313      	str	r3, [r2, #48]	; 0x30
 8000812:	4b3a      	ldr	r3, [pc, #232]	; (80008fc <MX_GPIO_Init+0x110>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000816:	f003 0304 	and.w	r3, r3, #4
 800081a:	613b      	str	r3, [r7, #16]
 800081c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800081e:	2300      	movs	r3, #0
 8000820:	60fb      	str	r3, [r7, #12]
 8000822:	4b36      	ldr	r3, [pc, #216]	; (80008fc <MX_GPIO_Init+0x110>)
 8000824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000826:	4a35      	ldr	r2, [pc, #212]	; (80008fc <MX_GPIO_Init+0x110>)
 8000828:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800082c:	6313      	str	r3, [r2, #48]	; 0x30
 800082e:	4b33      	ldr	r3, [pc, #204]	; (80008fc <MX_GPIO_Init+0x110>)
 8000830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000832:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000836:	60fb      	str	r3, [r7, #12]
 8000838:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800083a:	2300      	movs	r3, #0
 800083c:	60bb      	str	r3, [r7, #8]
 800083e:	4b2f      	ldr	r3, [pc, #188]	; (80008fc <MX_GPIO_Init+0x110>)
 8000840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000842:	4a2e      	ldr	r2, [pc, #184]	; (80008fc <MX_GPIO_Init+0x110>)
 8000844:	f043 0301 	orr.w	r3, r3, #1
 8000848:	6313      	str	r3, [r2, #48]	; 0x30
 800084a:	4b2c      	ldr	r3, [pc, #176]	; (80008fc <MX_GPIO_Init+0x110>)
 800084c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084e:	f003 0301 	and.w	r3, r3, #1
 8000852:	60bb      	str	r3, [r7, #8]
 8000854:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000856:	2300      	movs	r3, #0
 8000858:	607b      	str	r3, [r7, #4]
 800085a:	4b28      	ldr	r3, [pc, #160]	; (80008fc <MX_GPIO_Init+0x110>)
 800085c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085e:	4a27      	ldr	r2, [pc, #156]	; (80008fc <MX_GPIO_Init+0x110>)
 8000860:	f043 0302 	orr.w	r3, r3, #2
 8000864:	6313      	str	r3, [r2, #48]	; 0x30
 8000866:	4b25      	ldr	r3, [pc, #148]	; (80008fc <MX_GPIO_Init+0x110>)
 8000868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086a:	f003 0302 	and.w	r3, r3, #2
 800086e:	607b      	str	r3, [r7, #4]
 8000870:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_TX_Pin|LED_RX_Pin|LED_DEBUG_Pin, GPIO_PIN_RESET);
 8000872:	2200      	movs	r2, #0
 8000874:	210b      	movs	r1, #11
 8000876:	4822      	ldr	r0, [pc, #136]	; (8000900 <MX_GPIO_Init+0x114>)
 8000878:	f001 fcbc 	bl	80021f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC4 PC5 PC6
                           PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 800087c:	f242 03f0 	movw	r3, #8432	; 0x20f0
 8000880:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000882:	2300      	movs	r3, #0
 8000884:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000886:	2301      	movs	r3, #1
 8000888:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800088a:	f107 0314 	add.w	r3, r7, #20
 800088e:	4619      	mov	r1, r3
 8000890:	481c      	ldr	r0, [pc, #112]	; (8000904 <MX_GPIO_Init+0x118>)
 8000892:	f001 fb13 	bl	8001ebc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000896:	2301      	movs	r3, #1
 8000898:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800089a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800089e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80008a0:	2301      	movs	r3, #1
 80008a2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008a4:	f107 0314 	add.w	r3, r7, #20
 80008a8:	4619      	mov	r1, r3
 80008aa:	4817      	ldr	r0, [pc, #92]	; (8000908 <MX_GPIO_Init+0x11c>)
 80008ac:	f001 fb06 	bl	8001ebc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80008b0:	2302      	movs	r3, #2
 80008b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008b4:	2300      	movs	r3, #0
 80008b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80008b8:	2301      	movs	r3, #1
 80008ba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008bc:	f107 0314 	add.w	r3, r7, #20
 80008c0:	4619      	mov	r1, r3
 80008c2:	4811      	ldr	r0, [pc, #68]	; (8000908 <MX_GPIO_Init+0x11c>)
 80008c4:	f001 fafa 	bl	8001ebc <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_TX_Pin LED_RX_Pin LED_DEBUG_Pin */
  GPIO_InitStruct.Pin = LED_TX_Pin|LED_RX_Pin|LED_DEBUG_Pin;
 80008c8:	230b      	movs	r3, #11
 80008ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008cc:	2301      	movs	r3, #1
 80008ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d0:	2300      	movs	r3, #0
 80008d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d4:	2300      	movs	r3, #0
 80008d6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008d8:	f107 0314 	add.w	r3, r7, #20
 80008dc:	4619      	mov	r1, r3
 80008de:	4808      	ldr	r0, [pc, #32]	; (8000900 <MX_GPIO_Init+0x114>)
 80008e0:	f001 faec 	bl	8001ebc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 1, 0);
 80008e4:	2200      	movs	r2, #0
 80008e6:	2101      	movs	r1, #1
 80008e8:	2006      	movs	r0, #6
 80008ea:	f001 fa1e 	bl	8001d2a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80008ee:	2006      	movs	r0, #6
 80008f0:	f001 fa37 	bl	8001d62 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008f4:	bf00      	nop
 80008f6:	3728      	adds	r7, #40	; 0x28
 80008f8:	46bd      	mov	sp, r7
 80008fa:	bd80      	pop	{r7, pc}
 80008fc:	40023800 	.word	0x40023800
 8000900:	40020400 	.word	0x40020400
 8000904:	40020800 	.word	0x40020800
 8000908:	40020000 	.word	0x40020000

0800090c <MX_CAN1_Setup>:

/* USER CODE BEGIN 4 */

void MX_CAN1_Setup()
{
 800090c:	b580      	push	{r7, lr}
 800090e:	af00      	add	r7, sp, #0
	HAL_CAN_ConfigFilter(&hcan1, &CAN1_sFilterConfig);
 8000910:	4906      	ldr	r1, [pc, #24]	; (800092c <MX_CAN1_Setup+0x20>)
 8000912:	4807      	ldr	r0, [pc, #28]	; (8000930 <MX_CAN1_Setup+0x24>)
 8000914:	f000 fbc8 	bl	80010a8 <HAL_CAN_ConfigFilter>
	HAL_CAN_Start(&hcan1);
 8000918:	4805      	ldr	r0, [pc, #20]	; (8000930 <MX_CAN1_Setup+0x24>)
 800091a:	f000 fca5 	bl	8001268 <HAL_CAN_Start>
	HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 800091e:	2102      	movs	r1, #2
 8000920:	4803      	ldr	r0, [pc, #12]	; (8000930 <MX_CAN1_Setup+0x24>)
 8000922:	f000 fed2 	bl	80016ca <HAL_CAN_ActivateNotification>
}
 8000926:	bf00      	nop
 8000928:	bd80      	pop	{r7, pc}
 800092a:	bf00      	nop
 800092c:	200000f0 	.word	0x200000f0
 8000930:	20000028 	.word	0x20000028

08000934 <MX_CAN2_Setup>:
void MX_CAN2_Setup() //RX
{
 8000934:	b580      	push	{r7, lr}
 8000936:	af00      	add	r7, sp, #0
	HAL_CAN_ConfigFilter(&hcan2, &CAN2_sFilterConfig);
 8000938:	4906      	ldr	r1, [pc, #24]	; (8000954 <MX_CAN2_Setup+0x20>)
 800093a:	4807      	ldr	r0, [pc, #28]	; (8000958 <MX_CAN2_Setup+0x24>)
 800093c:	f000 fbb4 	bl	80010a8 <HAL_CAN_ConfigFilter>
	HAL_CAN_Start(&hcan2);
 8000940:	4805      	ldr	r0, [pc, #20]	; (8000958 <MX_CAN2_Setup+0x24>)
 8000942:	f000 fc91 	bl	8001268 <HAL_CAN_Start>
	HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO0_MSG_PENDING);
 8000946:	2102      	movs	r1, #2
 8000948:	4803      	ldr	r0, [pc, #12]	; (8000958 <MX_CAN2_Setup+0x24>)
 800094a:	f000 febe 	bl	80016ca <HAL_CAN_ActivateNotification>
}
 800094e:	bf00      	nop
 8000950:	bd80      	pop	{r7, pc}
 8000952:	bf00      	nop
 8000954:	2000014c 	.word	0x2000014c
 8000958:	20000050 	.word	0x20000050

0800095c <HAL_UART_RxCpltCallback>:
	}
	bufsend[29] = '\n';
	USART3_SendString((unsigned char*)bufsend);
}
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b082      	sub	sp, #8
 8000960:	af00      	add	r7, sp, #0
 8000962:	6078      	str	r0, [r7, #4]
//	REQ_BUFFER[NumBytesReq] = REQ_1BYTE_DATA;
//	NumBytesReq++;
	HAL_UART_Receive_IT(&huart3, data, 2);
 8000964:	2202      	movs	r2, #2
 8000966:	490d      	ldr	r1, [pc, #52]	; (800099c <HAL_UART_RxCpltCallback+0x40>)
 8000968:	480d      	ldr	r0, [pc, #52]	; (80009a0 <HAL_UART_RxCpltCallback+0x44>)
 800096a:	f002 fa12 	bl	8002d92 <HAL_UART_Receive_IT>
	CAN1_DATA_TX[0] = data[0];
 800096e:	4b0b      	ldr	r3, [pc, #44]	; (800099c <HAL_UART_RxCpltCallback+0x40>)
 8000970:	781a      	ldrb	r2, [r3, #0]
 8000972:	4b0c      	ldr	r3, [pc, #48]	; (80009a4 <HAL_UART_RxCpltCallback+0x48>)
 8000974:	701a      	strb	r2, [r3, #0]
	CAN1_DATA_TX[1] = data[1];
 8000976:	4b09      	ldr	r3, [pc, #36]	; (800099c <HAL_UART_RxCpltCallback+0x40>)
 8000978:	785a      	ldrb	r2, [r3, #1]
 800097a:	4b0a      	ldr	r3, [pc, #40]	; (80009a4 <HAL_UART_RxCpltCallback+0x48>)
 800097c:	705a      	strb	r2, [r3, #1]
	HAL_CAN_AddTxMessage(&hcan1, &CAN1_pHeader, CAN1_DATA_TX, &CAN1_pTxMailbox);
 800097e:	4b0a      	ldr	r3, [pc, #40]	; (80009a8 <HAL_UART_RxCpltCallback+0x4c>)
 8000980:	4a08      	ldr	r2, [pc, #32]	; (80009a4 <HAL_UART_RxCpltCallback+0x48>)
 8000982:	490a      	ldr	r1, [pc, #40]	; (80009ac <HAL_UART_RxCpltCallback+0x50>)
 8000984:	480a      	ldr	r0, [pc, #40]	; (80009b0 <HAL_UART_RxCpltCallback+0x54>)
 8000986:	f000 fcb3 	bl	80012f0 <HAL_CAN_AddTxMessage>
	HAL_GPIO_TogglePin(LED_TX_GPIO_Port, LED_TX_Pin);
 800098a:	2101      	movs	r1, #1
 800098c:	4809      	ldr	r0, [pc, #36]	; (80009b4 <HAL_UART_RxCpltCallback+0x58>)
 800098e:	f001 fc4a 	bl	8002226 <HAL_GPIO_TogglePin>

	//REQ_BUFFER[7] = NumBytesReq;

}
 8000992:	bf00      	nop
 8000994:	3708      	adds	r7, #8
 8000996:	46bd      	mov	sp, r7
 8000998:	bd80      	pop	{r7, pc}
 800099a:	bf00      	nop
 800099c:	2000018c 	.word	0x2000018c
 80009a0:	20000078 	.word	0x20000078
 80009a4:	2000017c 	.word	0x2000017c
 80009a8:	20000174 	.word	0x20000174
 80009ac:	200000bc 	.word	0x200000bc
 80009b0:	20000028 	.word	0x20000028
 80009b4:	40020400 	.word	0x40020400

080009b8 <HAL_CAN_RxFifo0MsgPendingCallback>:
	HAL_Delay(delay);
}


void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b084      	sub	sp, #16
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &CAN2_pHeaderRx, CAN2_DATA_RX);
 80009c0:	4b15      	ldr	r3, [pc, #84]	; (8000a18 <HAL_CAN_RxFifo0MsgPendingCallback+0x60>)
 80009c2:	4a16      	ldr	r2, [pc, #88]	; (8000a1c <HAL_CAN_RxFifo0MsgPendingCallback+0x64>)
 80009c4:	2100      	movs	r1, #0
 80009c6:	6878      	ldr	r0, [r7, #4]
 80009c8:	f000 fd6d 	bl	80014a6 <HAL_CAN_GetRxMessage>
	for(int i = 2; i< 8; i++){
 80009cc:	2302      	movs	r3, #2
 80009ce:	60fb      	str	r3, [r7, #12]
 80009d0:	e011      	b.n	80009f6 <HAL_CAN_RxFifo0MsgPendingCallback+0x3e>
		CAN2_DATA_RX[i] = CAN2_DATA_RX[i-1] + CAN2_DATA_RX[i-2];
 80009d2:	68fb      	ldr	r3, [r7, #12]
 80009d4:	3b01      	subs	r3, #1
 80009d6:	4a10      	ldr	r2, [pc, #64]	; (8000a18 <HAL_CAN_RxFifo0MsgPendingCallback+0x60>)
 80009d8:	5cd2      	ldrb	r2, [r2, r3]
 80009da:	68fb      	ldr	r3, [r7, #12]
 80009dc:	3b02      	subs	r3, #2
 80009de:	490e      	ldr	r1, [pc, #56]	; (8000a18 <HAL_CAN_RxFifo0MsgPendingCallback+0x60>)
 80009e0:	5ccb      	ldrb	r3, [r1, r3]
 80009e2:	4413      	add	r3, r2
 80009e4:	b2d9      	uxtb	r1, r3
 80009e6:	4a0c      	ldr	r2, [pc, #48]	; (8000a18 <HAL_CAN_RxFifo0MsgPendingCallback+0x60>)
 80009e8:	68fb      	ldr	r3, [r7, #12]
 80009ea:	4413      	add	r3, r2
 80009ec:	460a      	mov	r2, r1
 80009ee:	701a      	strb	r2, [r3, #0]
	for(int i = 2; i< 8; i++){
 80009f0:	68fb      	ldr	r3, [r7, #12]
 80009f2:	3301      	adds	r3, #1
 80009f4:	60fb      	str	r3, [r7, #12]
 80009f6:	68fb      	ldr	r3, [r7, #12]
 80009f8:	2b07      	cmp	r3, #7
 80009fa:	ddea      	ble.n	80009d2 <HAL_CAN_RxFifo0MsgPendingCallback+0x1a>
	}
	HAL_GPIO_TogglePin(LED_RX_GPIO_Port, LED_RX_Pin);
 80009fc:	2102      	movs	r1, #2
 80009fe:	4808      	ldr	r0, [pc, #32]	; (8000a20 <HAL_CAN_RxFifo0MsgPendingCallback+0x68>)
 8000a00:	f001 fc11 	bl	8002226 <HAL_GPIO_TogglePin>
	HAL_UART_Transmit(&huart3, CAN2_DATA_RX, 8, 10);
 8000a04:	230a      	movs	r3, #10
 8000a06:	2208      	movs	r2, #8
 8000a08:	4903      	ldr	r1, [pc, #12]	; (8000a18 <HAL_CAN_RxFifo0MsgPendingCallback+0x60>)
 8000a0a:	4806      	ldr	r0, [pc, #24]	; (8000a24 <HAL_CAN_RxFifo0MsgPendingCallback+0x6c>)
 8000a0c:	f002 f92f 	bl	8002c6e <HAL_UART_Transmit>
}
 8000a10:	bf00      	nop
 8000a12:	3710      	adds	r7, #16
 8000a14:	46bd      	mov	sp, r7
 8000a16:	bd80      	pop	{r7, pc}
 8000a18:	20000184 	.word	0x20000184
 8000a1c:	20000130 	.word	0x20000130
 8000a20:	40020400 	.word	0x40020400
 8000a24:	20000078 	.word	0x20000078

08000a28 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a2c:	b672      	cpsid	i
}
 8000a2e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a30:	e7fe      	b.n	8000a30 <Error_Handler+0x8>
	...

08000a34 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a34:	b480      	push	{r7}
 8000a36:	b083      	sub	sp, #12
 8000a38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	607b      	str	r3, [r7, #4]
 8000a3e:	4b10      	ldr	r3, [pc, #64]	; (8000a80 <HAL_MspInit+0x4c>)
 8000a40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a42:	4a0f      	ldr	r2, [pc, #60]	; (8000a80 <HAL_MspInit+0x4c>)
 8000a44:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a48:	6453      	str	r3, [r2, #68]	; 0x44
 8000a4a:	4b0d      	ldr	r3, [pc, #52]	; (8000a80 <HAL_MspInit+0x4c>)
 8000a4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a52:	607b      	str	r3, [r7, #4]
 8000a54:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a56:	2300      	movs	r3, #0
 8000a58:	603b      	str	r3, [r7, #0]
 8000a5a:	4b09      	ldr	r3, [pc, #36]	; (8000a80 <HAL_MspInit+0x4c>)
 8000a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a5e:	4a08      	ldr	r2, [pc, #32]	; (8000a80 <HAL_MspInit+0x4c>)
 8000a60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a64:	6413      	str	r3, [r2, #64]	; 0x40
 8000a66:	4b06      	ldr	r3, [pc, #24]	; (8000a80 <HAL_MspInit+0x4c>)
 8000a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a6e:	603b      	str	r3, [r7, #0]
 8000a70:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a72:	bf00      	nop
 8000a74:	370c      	adds	r7, #12
 8000a76:	46bd      	mov	sp, r7
 8000a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7c:	4770      	bx	lr
 8000a7e:	bf00      	nop
 8000a80:	40023800 	.word	0x40023800

08000a84 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b08c      	sub	sp, #48	; 0x30
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a8c:	f107 031c 	add.w	r3, r7, #28
 8000a90:	2200      	movs	r2, #0
 8000a92:	601a      	str	r2, [r3, #0]
 8000a94:	605a      	str	r2, [r3, #4]
 8000a96:	609a      	str	r2, [r3, #8]
 8000a98:	60da      	str	r2, [r3, #12]
 8000a9a:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	4a4a      	ldr	r2, [pc, #296]	; (8000bcc <HAL_CAN_MspInit+0x148>)
 8000aa2:	4293      	cmp	r3, r2
 8000aa4:	d136      	bne.n	8000b14 <HAL_CAN_MspInit+0x90>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 8000aa6:	4b4a      	ldr	r3, [pc, #296]	; (8000bd0 <HAL_CAN_MspInit+0x14c>)
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	3301      	adds	r3, #1
 8000aac:	4a48      	ldr	r2, [pc, #288]	; (8000bd0 <HAL_CAN_MspInit+0x14c>)
 8000aae:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8000ab0:	4b47      	ldr	r3, [pc, #284]	; (8000bd0 <HAL_CAN_MspInit+0x14c>)
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	2b01      	cmp	r3, #1
 8000ab6:	d10d      	bne.n	8000ad4 <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8000ab8:	2300      	movs	r3, #0
 8000aba:	61bb      	str	r3, [r7, #24]
 8000abc:	4b45      	ldr	r3, [pc, #276]	; (8000bd4 <HAL_CAN_MspInit+0x150>)
 8000abe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ac0:	4a44      	ldr	r2, [pc, #272]	; (8000bd4 <HAL_CAN_MspInit+0x150>)
 8000ac2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000ac6:	6413      	str	r3, [r2, #64]	; 0x40
 8000ac8:	4b42      	ldr	r3, [pc, #264]	; (8000bd4 <HAL_CAN_MspInit+0x150>)
 8000aca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000acc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000ad0:	61bb      	str	r3, [r7, #24]
 8000ad2:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	617b      	str	r3, [r7, #20]
 8000ad8:	4b3e      	ldr	r3, [pc, #248]	; (8000bd4 <HAL_CAN_MspInit+0x150>)
 8000ada:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000adc:	4a3d      	ldr	r2, [pc, #244]	; (8000bd4 <HAL_CAN_MspInit+0x150>)
 8000ade:	f043 0301 	orr.w	r3, r3, #1
 8000ae2:	6313      	str	r3, [r2, #48]	; 0x30
 8000ae4:	4b3b      	ldr	r3, [pc, #236]	; (8000bd4 <HAL_CAN_MspInit+0x150>)
 8000ae6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae8:	f003 0301 	and.w	r3, r3, #1
 8000aec:	617b      	str	r3, [r7, #20]
 8000aee:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000af0:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000af4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000af6:	2302      	movs	r3, #2
 8000af8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afa:	2300      	movs	r3, #0
 8000afc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000afe:	2303      	movs	r3, #3
 8000b00:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000b02:	2309      	movs	r3, #9
 8000b04:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b06:	f107 031c 	add.w	r3, r7, #28
 8000b0a:	4619      	mov	r1, r3
 8000b0c:	4832      	ldr	r0, [pc, #200]	; (8000bd8 <HAL_CAN_MspInit+0x154>)
 8000b0e:	f001 f9d5 	bl	8001ebc <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 8000b12:	e057      	b.n	8000bc4 <HAL_CAN_MspInit+0x140>
  else if(hcan->Instance==CAN2)
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	4a30      	ldr	r2, [pc, #192]	; (8000bdc <HAL_CAN_MspInit+0x158>)
 8000b1a:	4293      	cmp	r3, r2
 8000b1c:	d152      	bne.n	8000bc4 <HAL_CAN_MspInit+0x140>
    __HAL_RCC_CAN2_CLK_ENABLE();
 8000b1e:	2300      	movs	r3, #0
 8000b20:	613b      	str	r3, [r7, #16]
 8000b22:	4b2c      	ldr	r3, [pc, #176]	; (8000bd4 <HAL_CAN_MspInit+0x150>)
 8000b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b26:	4a2b      	ldr	r2, [pc, #172]	; (8000bd4 <HAL_CAN_MspInit+0x150>)
 8000b28:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000b2c:	6413      	str	r3, [r2, #64]	; 0x40
 8000b2e:	4b29      	ldr	r3, [pc, #164]	; (8000bd4 <HAL_CAN_MspInit+0x150>)
 8000b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b32:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000b36:	613b      	str	r3, [r7, #16]
 8000b38:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8000b3a:	4b25      	ldr	r3, [pc, #148]	; (8000bd0 <HAL_CAN_MspInit+0x14c>)
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	3301      	adds	r3, #1
 8000b40:	4a23      	ldr	r2, [pc, #140]	; (8000bd0 <HAL_CAN_MspInit+0x14c>)
 8000b42:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8000b44:	4b22      	ldr	r3, [pc, #136]	; (8000bd0 <HAL_CAN_MspInit+0x14c>)
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	2b01      	cmp	r3, #1
 8000b4a:	d10d      	bne.n	8000b68 <HAL_CAN_MspInit+0xe4>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	60fb      	str	r3, [r7, #12]
 8000b50:	4b20      	ldr	r3, [pc, #128]	; (8000bd4 <HAL_CAN_MspInit+0x150>)
 8000b52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b54:	4a1f      	ldr	r2, [pc, #124]	; (8000bd4 <HAL_CAN_MspInit+0x150>)
 8000b56:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000b5a:	6413      	str	r3, [r2, #64]	; 0x40
 8000b5c:	4b1d      	ldr	r3, [pc, #116]	; (8000bd4 <HAL_CAN_MspInit+0x150>)
 8000b5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000b64:	60fb      	str	r3, [r7, #12]
 8000b66:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b68:	2300      	movs	r3, #0
 8000b6a:	60bb      	str	r3, [r7, #8]
 8000b6c:	4b19      	ldr	r3, [pc, #100]	; (8000bd4 <HAL_CAN_MspInit+0x150>)
 8000b6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b70:	4a18      	ldr	r2, [pc, #96]	; (8000bd4 <HAL_CAN_MspInit+0x150>)
 8000b72:	f043 0302 	orr.w	r3, r3, #2
 8000b76:	6313      	str	r3, [r2, #48]	; 0x30
 8000b78:	4b16      	ldr	r3, [pc, #88]	; (8000bd4 <HAL_CAN_MspInit+0x150>)
 8000b7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b7c:	f003 0302 	and.w	r3, r3, #2
 8000b80:	60bb      	str	r3, [r7, #8]
 8000b82:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8000b84:	2360      	movs	r3, #96	; 0x60
 8000b86:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b88:	2302      	movs	r3, #2
 8000b8a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b90:	2303      	movs	r3, #3
 8000b92:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8000b94:	2309      	movs	r3, #9
 8000b96:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b98:	f107 031c 	add.w	r3, r7, #28
 8000b9c:	4619      	mov	r1, r3
 8000b9e:	4810      	ldr	r0, [pc, #64]	; (8000be0 <HAL_CAN_MspInit+0x15c>)
 8000ba0:	f001 f98c 	bl	8001ebc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 2, 0);
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	2102      	movs	r1, #2
 8000ba8:	2040      	movs	r0, #64	; 0x40
 8000baa:	f001 f8be 	bl	8001d2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 8000bae:	2040      	movs	r0, #64	; 0x40
 8000bb0:	f001 f8d7 	bl	8001d62 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN2_RX1_IRQn, 0, 0);
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	2100      	movs	r1, #0
 8000bb8:	2041      	movs	r0, #65	; 0x41
 8000bba:	f001 f8b6 	bl	8001d2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX1_IRQn);
 8000bbe:	2041      	movs	r0, #65	; 0x41
 8000bc0:	f001 f8cf 	bl	8001d62 <HAL_NVIC_EnableIRQ>
}
 8000bc4:	bf00      	nop
 8000bc6:	3730      	adds	r7, #48	; 0x30
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	bd80      	pop	{r7, pc}
 8000bcc:	40006400 	.word	0x40006400
 8000bd0:	20000194 	.word	0x20000194
 8000bd4:	40023800 	.word	0x40023800
 8000bd8:	40020000 	.word	0x40020000
 8000bdc:	40006800 	.word	0x40006800
 8000be0:	40020400 	.word	0x40020400

08000be4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b08a      	sub	sp, #40	; 0x28
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bec:	f107 0314 	add.w	r3, r7, #20
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	601a      	str	r2, [r3, #0]
 8000bf4:	605a      	str	r2, [r3, #4]
 8000bf6:	609a      	str	r2, [r3, #8]
 8000bf8:	60da      	str	r2, [r3, #12]
 8000bfa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	4a1d      	ldr	r2, [pc, #116]	; (8000c78 <HAL_UART_MspInit+0x94>)
 8000c02:	4293      	cmp	r3, r2
 8000c04:	d134      	bne.n	8000c70 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000c06:	2300      	movs	r3, #0
 8000c08:	613b      	str	r3, [r7, #16]
 8000c0a:	4b1c      	ldr	r3, [pc, #112]	; (8000c7c <HAL_UART_MspInit+0x98>)
 8000c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c0e:	4a1b      	ldr	r2, [pc, #108]	; (8000c7c <HAL_UART_MspInit+0x98>)
 8000c10:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c14:	6413      	str	r3, [r2, #64]	; 0x40
 8000c16:	4b19      	ldr	r3, [pc, #100]	; (8000c7c <HAL_UART_MspInit+0x98>)
 8000c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c1a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000c1e:	613b      	str	r3, [r7, #16]
 8000c20:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c22:	2300      	movs	r3, #0
 8000c24:	60fb      	str	r3, [r7, #12]
 8000c26:	4b15      	ldr	r3, [pc, #84]	; (8000c7c <HAL_UART_MspInit+0x98>)
 8000c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c2a:	4a14      	ldr	r2, [pc, #80]	; (8000c7c <HAL_UART_MspInit+0x98>)
 8000c2c:	f043 0304 	orr.w	r3, r3, #4
 8000c30:	6313      	str	r3, [r2, #48]	; 0x30
 8000c32:	4b12      	ldr	r3, [pc, #72]	; (8000c7c <HAL_UART_MspInit+0x98>)
 8000c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c36:	f003 0304 	and.w	r3, r3, #4
 8000c3a:	60fb      	str	r3, [r7, #12]
 8000c3c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PC10     ------> USART3_TX
    PC11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000c3e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000c42:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c44:	2302      	movs	r3, #2
 8000c46:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c4c:	2303      	movs	r3, #3
 8000c4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000c50:	2307      	movs	r3, #7
 8000c52:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c54:	f107 0314 	add.w	r3, r7, #20
 8000c58:	4619      	mov	r1, r3
 8000c5a:	4809      	ldr	r0, [pc, #36]	; (8000c80 <HAL_UART_MspInit+0x9c>)
 8000c5c:	f001 f92e 	bl	8001ebc <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 1, 0);
 8000c60:	2200      	movs	r2, #0
 8000c62:	2101      	movs	r1, #1
 8000c64:	2027      	movs	r0, #39	; 0x27
 8000c66:	f001 f860 	bl	8001d2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000c6a:	2027      	movs	r0, #39	; 0x27
 8000c6c:	f001 f879 	bl	8001d62 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000c70:	bf00      	nop
 8000c72:	3728      	adds	r7, #40	; 0x28
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bd80      	pop	{r7, pc}
 8000c78:	40004800 	.word	0x40004800
 8000c7c:	40023800 	.word	0x40023800
 8000c80:	40020800 	.word	0x40020800

08000c84 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c84:	b480      	push	{r7}
 8000c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c88:	e7fe      	b.n	8000c88 <NMI_Handler+0x4>

08000c8a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c8a:	b480      	push	{r7}
 8000c8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c8e:	e7fe      	b.n	8000c8e <HardFault_Handler+0x4>

08000c90 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c90:	b480      	push	{r7}
 8000c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c94:	e7fe      	b.n	8000c94 <MemManage_Handler+0x4>

08000c96 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c96:	b480      	push	{r7}
 8000c98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c9a:	e7fe      	b.n	8000c9a <BusFault_Handler+0x4>

08000c9c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ca0:	e7fe      	b.n	8000ca0 <UsageFault_Handler+0x4>

08000ca2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ca2:	b480      	push	{r7}
 8000ca4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ca6:	bf00      	nop
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cae:	4770      	bx	lr

08000cb0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cb4:	bf00      	nop
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbc:	4770      	bx	lr

08000cbe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cbe:	b480      	push	{r7}
 8000cc0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cc2:	bf00      	nop
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cca:	4770      	bx	lr

08000ccc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cd0:	f000 f8ce 	bl	8000e70 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /*Support to print time stamp in CAN log*/
  TimeStamp ++;
 8000cd4:	4b03      	ldr	r3, [pc, #12]	; (8000ce4 <SysTick_Handler+0x18>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	3301      	adds	r3, #1
 8000cda:	4a02      	ldr	r2, [pc, #8]	; (8000ce4 <SysTick_Handler+0x18>)
 8000cdc:	6013      	str	r3, [r2, #0]


  /* USER CODE END SysTick_IRQn 1 */
}
 8000cde:	bf00      	nop
 8000ce0:	bd80      	pop	{r7, pc}
 8000ce2:	bf00      	nop
 8000ce4:	20000190 	.word	0x20000190

08000ce8 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000cec:	2001      	movs	r0, #1
 8000cee:	f001 fab5 	bl	800225c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000cf2:	bf00      	nop
 8000cf4:	bd80      	pop	{r7, pc}
	...

08000cf8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000cfc:	4804      	ldr	r0, [pc, #16]	; (8000d10 <USART3_IRQHandler+0x18>)
 8000cfe:	f002 f879 	bl	8002df4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */
  HAL_UART_Receive_IT(&huart3, &REQ_1BYTE_DATA, 1);
 8000d02:	2201      	movs	r2, #1
 8000d04:	4903      	ldr	r1, [pc, #12]	; (8000d14 <USART3_IRQHandler+0x1c>)
 8000d06:	4802      	ldr	r0, [pc, #8]	; (8000d10 <USART3_IRQHandler+0x18>)
 8000d08:	f002 f843 	bl	8002d92 <HAL_UART_Receive_IT>
  /* USER CODE END USART3_IRQn 1 */
}
 8000d0c:	bf00      	nop
 8000d0e:	bd80      	pop	{r7, pc}
 8000d10:	20000078 	.word	0x20000078
 8000d14:	20000178 	.word	0x20000178

08000d18 <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupts.
  */
void CAN2_RX0_IRQHandler(void)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */
	uint8_t NumByteSend;
  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8000d1c:	4805      	ldr	r0, [pc, #20]	; (8000d34 <CAN2_RX0_IRQHandler+0x1c>)
 8000d1e:	f000 fcfa 	bl	8001716 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */
	HAL_CAN_GetRxMessage(&hcan2, CAN_RX_FIFO0, &CAN2_pHeaderRx, CAN2_DATA_RX);
 8000d22:	4b05      	ldr	r3, [pc, #20]	; (8000d38 <CAN2_RX0_IRQHandler+0x20>)
 8000d24:	4a05      	ldr	r2, [pc, #20]	; (8000d3c <CAN2_RX0_IRQHandler+0x24>)
 8000d26:	2100      	movs	r1, #0
 8000d28:	4802      	ldr	r0, [pc, #8]	; (8000d34 <CAN2_RX0_IRQHandler+0x1c>)
 8000d2a:	f000 fbbc 	bl	80014a6 <HAL_CAN_GetRxMessage>

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 8000d2e:	bf00      	nop
 8000d30:	bd80      	pop	{r7, pc}
 8000d32:	bf00      	nop
 8000d34:	20000050 	.word	0x20000050
 8000d38:	20000184 	.word	0x20000184
 8000d3c:	20000130 	.word	0x20000130

08000d40 <CAN2_RX1_IRQHandler>:

/**
  * @brief This function handles CAN2 RX1 interrupt.
  */
void CAN2_RX1_IRQHandler(void)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX1_IRQn 0 */

  /* USER CODE END CAN2_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8000d44:	4802      	ldr	r0, [pc, #8]	; (8000d50 <CAN2_RX1_IRQHandler+0x10>)
 8000d46:	f000 fce6 	bl	8001716 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX1_IRQn 1 */

  /* USER CODE END CAN2_RX1_IRQn 1 */
}
 8000d4a:	bf00      	nop
 8000d4c:	bd80      	pop	{r7, pc}
 8000d4e:	bf00      	nop
 8000d50:	20000050 	.word	0x20000050

08000d54 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d54:	b480      	push	{r7}
 8000d56:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d58:	4b06      	ldr	r3, [pc, #24]	; (8000d74 <SystemInit+0x20>)
 8000d5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d5e:	4a05      	ldr	r2, [pc, #20]	; (8000d74 <SystemInit+0x20>)
 8000d60:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d64:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d68:	bf00      	nop
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d70:	4770      	bx	lr
 8000d72:	bf00      	nop
 8000d74:	e000ed00 	.word	0xe000ed00

08000d78 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000d78:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000db0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d7c:	480d      	ldr	r0, [pc, #52]	; (8000db4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000d7e:	490e      	ldr	r1, [pc, #56]	; (8000db8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000d80:	4a0e      	ldr	r2, [pc, #56]	; (8000dbc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d82:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d84:	e002      	b.n	8000d8c <LoopCopyDataInit>

08000d86 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d86:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d88:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d8a:	3304      	adds	r3, #4

08000d8c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d8c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d8e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d90:	d3f9      	bcc.n	8000d86 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d92:	4a0b      	ldr	r2, [pc, #44]	; (8000dc0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000d94:	4c0b      	ldr	r4, [pc, #44]	; (8000dc4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000d96:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d98:	e001      	b.n	8000d9e <LoopFillZerobss>

08000d9a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d9a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d9c:	3204      	adds	r2, #4

08000d9e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d9e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000da0:	d3fb      	bcc.n	8000d9a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000da2:	f7ff ffd7 	bl	8000d54 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000da6:	f002 ff95 	bl	8003cd4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000daa:	f7ff fb8b 	bl	80004c4 <main>
  bx  lr    
 8000dae:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000db0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000db4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000db8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000dbc:	08003d5c 	.word	0x08003d5c
  ldr r2, =_sbss
 8000dc0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000dc4:	2000019c 	.word	0x2000019c

08000dc8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000dc8:	e7fe      	b.n	8000dc8 <ADC_IRQHandler>
	...

08000dcc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000dd0:	4b0e      	ldr	r3, [pc, #56]	; (8000e0c <HAL_Init+0x40>)
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	4a0d      	ldr	r2, [pc, #52]	; (8000e0c <HAL_Init+0x40>)
 8000dd6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000dda:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ddc:	4b0b      	ldr	r3, [pc, #44]	; (8000e0c <HAL_Init+0x40>)
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	4a0a      	ldr	r2, [pc, #40]	; (8000e0c <HAL_Init+0x40>)
 8000de2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000de6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000de8:	4b08      	ldr	r3, [pc, #32]	; (8000e0c <HAL_Init+0x40>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	4a07      	ldr	r2, [pc, #28]	; (8000e0c <HAL_Init+0x40>)
 8000dee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000df2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000df4:	2003      	movs	r0, #3
 8000df6:	f000 ff8d 	bl	8001d14 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000dfa:	2000      	movs	r0, #0
 8000dfc:	f000 f808 	bl	8000e10 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e00:	f7ff fe18 	bl	8000a34 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e04:	2300      	movs	r3, #0
}
 8000e06:	4618      	mov	r0, r3
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	bf00      	nop
 8000e0c:	40023c00 	.word	0x40023c00

08000e10 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b082      	sub	sp, #8
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e18:	4b12      	ldr	r3, [pc, #72]	; (8000e64 <HAL_InitTick+0x54>)
 8000e1a:	681a      	ldr	r2, [r3, #0]
 8000e1c:	4b12      	ldr	r3, [pc, #72]	; (8000e68 <HAL_InitTick+0x58>)
 8000e1e:	781b      	ldrb	r3, [r3, #0]
 8000e20:	4619      	mov	r1, r3
 8000e22:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e26:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e2e:	4618      	mov	r0, r3
 8000e30:	f000 ffa5 	bl	8001d7e <HAL_SYSTICK_Config>
 8000e34:	4603      	mov	r3, r0
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d001      	beq.n	8000e3e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e3a:	2301      	movs	r3, #1
 8000e3c:	e00e      	b.n	8000e5c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	2b0f      	cmp	r3, #15
 8000e42:	d80a      	bhi.n	8000e5a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e44:	2200      	movs	r2, #0
 8000e46:	6879      	ldr	r1, [r7, #4]
 8000e48:	f04f 30ff 	mov.w	r0, #4294967295
 8000e4c:	f000 ff6d 	bl	8001d2a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e50:	4a06      	ldr	r2, [pc, #24]	; (8000e6c <HAL_InitTick+0x5c>)
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e56:	2300      	movs	r3, #0
 8000e58:	e000      	b.n	8000e5c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e5a:	2301      	movs	r3, #1
}
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	3708      	adds	r7, #8
 8000e60:	46bd      	mov	sp, r7
 8000e62:	bd80      	pop	{r7, pc}
 8000e64:	20000000 	.word	0x20000000
 8000e68:	20000008 	.word	0x20000008
 8000e6c:	20000004 	.word	0x20000004

08000e70 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e70:	b480      	push	{r7}
 8000e72:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e74:	4b06      	ldr	r3, [pc, #24]	; (8000e90 <HAL_IncTick+0x20>)
 8000e76:	781b      	ldrb	r3, [r3, #0]
 8000e78:	461a      	mov	r2, r3
 8000e7a:	4b06      	ldr	r3, [pc, #24]	; (8000e94 <HAL_IncTick+0x24>)
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	4413      	add	r3, r2
 8000e80:	4a04      	ldr	r2, [pc, #16]	; (8000e94 <HAL_IncTick+0x24>)
 8000e82:	6013      	str	r3, [r2, #0]
}
 8000e84:	bf00      	nop
 8000e86:	46bd      	mov	sp, r7
 8000e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8c:	4770      	bx	lr
 8000e8e:	bf00      	nop
 8000e90:	20000008 	.word	0x20000008
 8000e94:	20000198 	.word	0x20000198

08000e98 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	af00      	add	r7, sp, #0
  return uwTick;
 8000e9c:	4b03      	ldr	r3, [pc, #12]	; (8000eac <HAL_GetTick+0x14>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
}
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop
 8000eac:	20000198 	.word	0x20000198

08000eb0 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b084      	sub	sp, #16
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d101      	bne.n	8000ec2 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000ebe:	2301      	movs	r3, #1
 8000ec0:	e0ed      	b.n	800109e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000ec8:	b2db      	uxtb	r3, r3
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d102      	bne.n	8000ed4 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000ece:	6878      	ldr	r0, [r7, #4]
 8000ed0:	f7ff fdd8 	bl	8000a84 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	681a      	ldr	r2, [r3, #0]
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	f042 0201 	orr.w	r2, r2, #1
 8000ee2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000ee4:	f7ff ffd8 	bl	8000e98 <HAL_GetTick>
 8000ee8:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000eea:	e012      	b.n	8000f12 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000eec:	f7ff ffd4 	bl	8000e98 <HAL_GetTick>
 8000ef0:	4602      	mov	r2, r0
 8000ef2:	68fb      	ldr	r3, [r7, #12]
 8000ef4:	1ad3      	subs	r3, r2, r3
 8000ef6:	2b0a      	cmp	r3, #10
 8000ef8:	d90b      	bls.n	8000f12 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000efe:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	2205      	movs	r2, #5
 8000f0a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000f0e:	2301      	movs	r3, #1
 8000f10:	e0c5      	b.n	800109e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	685b      	ldr	r3, [r3, #4]
 8000f18:	f003 0301 	and.w	r3, r3, #1
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d0e5      	beq.n	8000eec <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	681a      	ldr	r2, [r3, #0]
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	f022 0202 	bic.w	r2, r2, #2
 8000f2e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000f30:	f7ff ffb2 	bl	8000e98 <HAL_GetTick>
 8000f34:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000f36:	e012      	b.n	8000f5e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000f38:	f7ff ffae 	bl	8000e98 <HAL_GetTick>
 8000f3c:	4602      	mov	r2, r0
 8000f3e:	68fb      	ldr	r3, [r7, #12]
 8000f40:	1ad3      	subs	r3, r2, r3
 8000f42:	2b0a      	cmp	r3, #10
 8000f44:	d90b      	bls.n	8000f5e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f4a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	2205      	movs	r2, #5
 8000f56:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000f5a:	2301      	movs	r3, #1
 8000f5c:	e09f      	b.n	800109e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	685b      	ldr	r3, [r3, #4]
 8000f64:	f003 0302 	and.w	r3, r3, #2
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d1e5      	bne.n	8000f38 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	7e1b      	ldrb	r3, [r3, #24]
 8000f70:	2b01      	cmp	r3, #1
 8000f72:	d108      	bne.n	8000f86 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	681a      	ldr	r2, [r3, #0]
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000f82:	601a      	str	r2, [r3, #0]
 8000f84:	e007      	b.n	8000f96 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	681a      	ldr	r2, [r3, #0]
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000f94:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	7e5b      	ldrb	r3, [r3, #25]
 8000f9a:	2b01      	cmp	r3, #1
 8000f9c:	d108      	bne.n	8000fb0 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	681a      	ldr	r2, [r3, #0]
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000fac:	601a      	str	r2, [r3, #0]
 8000fae:	e007      	b.n	8000fc0 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	681a      	ldr	r2, [r3, #0]
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000fbe:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	7e9b      	ldrb	r3, [r3, #26]
 8000fc4:	2b01      	cmp	r3, #1
 8000fc6:	d108      	bne.n	8000fda <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	681a      	ldr	r2, [r3, #0]
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	f042 0220 	orr.w	r2, r2, #32
 8000fd6:	601a      	str	r2, [r3, #0]
 8000fd8:	e007      	b.n	8000fea <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	681a      	ldr	r2, [r3, #0]
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	f022 0220 	bic.w	r2, r2, #32
 8000fe8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	7edb      	ldrb	r3, [r3, #27]
 8000fee:	2b01      	cmp	r3, #1
 8000ff0:	d108      	bne.n	8001004 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	681a      	ldr	r2, [r3, #0]
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	f022 0210 	bic.w	r2, r2, #16
 8001000:	601a      	str	r2, [r3, #0]
 8001002:	e007      	b.n	8001014 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	681a      	ldr	r2, [r3, #0]
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	f042 0210 	orr.w	r2, r2, #16
 8001012:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	7f1b      	ldrb	r3, [r3, #28]
 8001018:	2b01      	cmp	r3, #1
 800101a:	d108      	bne.n	800102e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	681a      	ldr	r2, [r3, #0]
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	f042 0208 	orr.w	r2, r2, #8
 800102a:	601a      	str	r2, [r3, #0]
 800102c:	e007      	b.n	800103e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	681a      	ldr	r2, [r3, #0]
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	f022 0208 	bic.w	r2, r2, #8
 800103c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	7f5b      	ldrb	r3, [r3, #29]
 8001042:	2b01      	cmp	r3, #1
 8001044:	d108      	bne.n	8001058 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	681a      	ldr	r2, [r3, #0]
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	f042 0204 	orr.w	r2, r2, #4
 8001054:	601a      	str	r2, [r3, #0]
 8001056:	e007      	b.n	8001068 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	681a      	ldr	r2, [r3, #0]
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	f022 0204 	bic.w	r2, r2, #4
 8001066:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	689a      	ldr	r2, [r3, #8]
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	68db      	ldr	r3, [r3, #12]
 8001070:	431a      	orrs	r2, r3
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	691b      	ldr	r3, [r3, #16]
 8001076:	431a      	orrs	r2, r3
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	695b      	ldr	r3, [r3, #20]
 800107c:	ea42 0103 	orr.w	r1, r2, r3
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	685b      	ldr	r3, [r3, #4]
 8001084:	1e5a      	subs	r2, r3, #1
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	430a      	orrs	r2, r1
 800108c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	2200      	movs	r2, #0
 8001092:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	2201      	movs	r2, #1
 8001098:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800109c:	2300      	movs	r3, #0
}
 800109e:	4618      	mov	r0, r3
 80010a0:	3710      	adds	r7, #16
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}
	...

080010a8 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 80010a8:	b480      	push	{r7}
 80010aa:	b087      	sub	sp, #28
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
 80010b0:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	f893 3020 	ldrb.w	r3, [r3, #32]
 80010be:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80010c0:	7cfb      	ldrb	r3, [r7, #19]
 80010c2:	2b01      	cmp	r3, #1
 80010c4:	d003      	beq.n	80010ce <HAL_CAN_ConfigFilter+0x26>
 80010c6:	7cfb      	ldrb	r3, [r7, #19]
 80010c8:	2b02      	cmp	r3, #2
 80010ca:	f040 80be 	bne.w	800124a <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 80010ce:	4b65      	ldr	r3, [pc, #404]	; (8001264 <HAL_CAN_ConfigFilter+0x1bc>)
 80010d0:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80010d2:	697b      	ldr	r3, [r7, #20]
 80010d4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80010d8:	f043 0201 	orr.w	r2, r3, #1
 80010dc:	697b      	ldr	r3, [r7, #20]
 80010de:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80010e2:	697b      	ldr	r3, [r7, #20]
 80010e4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80010e8:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80010ec:	697b      	ldr	r3, [r7, #20]
 80010ee:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 80010f2:	697b      	ldr	r3, [r7, #20]
 80010f4:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010fc:	021b      	lsls	r3, r3, #8
 80010fe:	431a      	orrs	r2, r3
 8001100:	697b      	ldr	r3, [r7, #20]
 8001102:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001106:	683b      	ldr	r3, [r7, #0]
 8001108:	695b      	ldr	r3, [r3, #20]
 800110a:	f003 031f 	and.w	r3, r3, #31
 800110e:	2201      	movs	r2, #1
 8001110:	fa02 f303 	lsl.w	r3, r2, r3
 8001114:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001116:	697b      	ldr	r3, [r7, #20]
 8001118:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	43db      	mvns	r3, r3
 8001120:	401a      	ands	r2, r3
 8001122:	697b      	ldr	r3, [r7, #20]
 8001124:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	69db      	ldr	r3, [r3, #28]
 800112c:	2b00      	cmp	r3, #0
 800112e:	d123      	bne.n	8001178 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001130:	697b      	ldr	r3, [r7, #20]
 8001132:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	43db      	mvns	r3, r3
 800113a:	401a      	ands	r2, r3
 800113c:	697b      	ldr	r3, [r7, #20]
 800113e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001142:	683b      	ldr	r3, [r7, #0]
 8001144:	68db      	ldr	r3, [r3, #12]
 8001146:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	685b      	ldr	r3, [r3, #4]
 800114c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800114e:	683a      	ldr	r2, [r7, #0]
 8001150:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001152:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001154:	697b      	ldr	r3, [r7, #20]
 8001156:	3248      	adds	r2, #72	; 0x48
 8001158:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	689b      	ldr	r3, [r3, #8]
 8001160:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800116c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800116e:	6979      	ldr	r1, [r7, #20]
 8001170:	3348      	adds	r3, #72	; 0x48
 8001172:	00db      	lsls	r3, r3, #3
 8001174:	440b      	add	r3, r1
 8001176:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	69db      	ldr	r3, [r3, #28]
 800117c:	2b01      	cmp	r3, #1
 800117e:	d122      	bne.n	80011c6 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001180:	697b      	ldr	r3, [r7, #20]
 8001182:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	431a      	orrs	r2, r3
 800118a:	697b      	ldr	r3, [r7, #20]
 800118c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001196:	683b      	ldr	r3, [r7, #0]
 8001198:	685b      	ldr	r3, [r3, #4]
 800119a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800119c:	683a      	ldr	r2, [r7, #0]
 800119e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80011a0:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80011a2:	697b      	ldr	r3, [r7, #20]
 80011a4:	3248      	adds	r2, #72	; 0x48
 80011a6:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	689b      	ldr	r3, [r3, #8]
 80011ae:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	68db      	ldr	r3, [r3, #12]
 80011b4:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80011ba:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80011bc:	6979      	ldr	r1, [r7, #20]
 80011be:	3348      	adds	r3, #72	; 0x48
 80011c0:	00db      	lsls	r3, r3, #3
 80011c2:	440b      	add	r3, r1
 80011c4:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80011c6:	683b      	ldr	r3, [r7, #0]
 80011c8:	699b      	ldr	r3, [r3, #24]
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d109      	bne.n	80011e2 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80011ce:	697b      	ldr	r3, [r7, #20]
 80011d0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	43db      	mvns	r3, r3
 80011d8:	401a      	ands	r2, r3
 80011da:	697b      	ldr	r3, [r7, #20]
 80011dc:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80011e0:	e007      	b.n	80011f2 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80011e2:	697b      	ldr	r3, [r7, #20]
 80011e4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	431a      	orrs	r2, r3
 80011ec:	697b      	ldr	r3, [r7, #20]
 80011ee:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80011f2:	683b      	ldr	r3, [r7, #0]
 80011f4:	691b      	ldr	r3, [r3, #16]
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d109      	bne.n	800120e <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80011fa:	697b      	ldr	r3, [r7, #20]
 80011fc:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	43db      	mvns	r3, r3
 8001204:	401a      	ands	r2, r3
 8001206:	697b      	ldr	r3, [r7, #20]
 8001208:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 800120c:	e007      	b.n	800121e <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800120e:	697b      	ldr	r3, [r7, #20]
 8001210:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	431a      	orrs	r2, r3
 8001218:	697b      	ldr	r3, [r7, #20]
 800121a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	6a1b      	ldr	r3, [r3, #32]
 8001222:	2b01      	cmp	r3, #1
 8001224:	d107      	bne.n	8001236 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001226:	697b      	ldr	r3, [r7, #20]
 8001228:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	431a      	orrs	r2, r3
 8001230:	697b      	ldr	r3, [r7, #20]
 8001232:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001236:	697b      	ldr	r3, [r7, #20]
 8001238:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800123c:	f023 0201 	bic.w	r2, r3, #1
 8001240:	697b      	ldr	r3, [r7, #20]
 8001242:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8001246:	2300      	movs	r3, #0
 8001248:	e006      	b.n	8001258 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800124e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001256:	2301      	movs	r3, #1
  }
}
 8001258:	4618      	mov	r0, r3
 800125a:	371c      	adds	r7, #28
 800125c:	46bd      	mov	sp, r7
 800125e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001262:	4770      	bx	lr
 8001264:	40006400 	.word	0x40006400

08001268 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b084      	sub	sp, #16
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001276:	b2db      	uxtb	r3, r3
 8001278:	2b01      	cmp	r3, #1
 800127a:	d12e      	bne.n	80012da <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	2202      	movs	r2, #2
 8001280:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	681a      	ldr	r2, [r3, #0]
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	f022 0201 	bic.w	r2, r2, #1
 8001292:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001294:	f7ff fe00 	bl	8000e98 <HAL_GetTick>
 8001298:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800129a:	e012      	b.n	80012c2 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800129c:	f7ff fdfc 	bl	8000e98 <HAL_GetTick>
 80012a0:	4602      	mov	r2, r0
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	1ad3      	subs	r3, r2, r3
 80012a6:	2b0a      	cmp	r3, #10
 80012a8:	d90b      	bls.n	80012c2 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012ae:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	2205      	movs	r2, #5
 80012ba:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80012be:	2301      	movs	r3, #1
 80012c0:	e012      	b.n	80012e8 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	685b      	ldr	r3, [r3, #4]
 80012c8:	f003 0301 	and.w	r3, r3, #1
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d1e5      	bne.n	800129c <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	2200      	movs	r2, #0
 80012d4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80012d6:	2300      	movs	r3, #0
 80012d8:	e006      	b.n	80012e8 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012de:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80012e6:	2301      	movs	r3, #1
  }
}
 80012e8:	4618      	mov	r0, r3
 80012ea:	3710      	adds	r7, #16
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bd80      	pop	{r7, pc}

080012f0 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 80012f0:	b480      	push	{r7}
 80012f2:	b089      	sub	sp, #36	; 0x24
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	60f8      	str	r0, [r7, #12]
 80012f8:	60b9      	str	r1, [r7, #8]
 80012fa:	607a      	str	r2, [r7, #4]
 80012fc:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001304:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	689b      	ldr	r3, [r3, #8]
 800130c:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800130e:	7ffb      	ldrb	r3, [r7, #31]
 8001310:	2b01      	cmp	r3, #1
 8001312:	d003      	beq.n	800131c <HAL_CAN_AddTxMessage+0x2c>
 8001314:	7ffb      	ldrb	r3, [r7, #31]
 8001316:	2b02      	cmp	r3, #2
 8001318:	f040 80b8 	bne.w	800148c <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800131c:	69bb      	ldr	r3, [r7, #24]
 800131e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001322:	2b00      	cmp	r3, #0
 8001324:	d10a      	bne.n	800133c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001326:	69bb      	ldr	r3, [r7, #24]
 8001328:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800132c:	2b00      	cmp	r3, #0
 800132e:	d105      	bne.n	800133c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001330:	69bb      	ldr	r3, [r7, #24]
 8001332:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001336:	2b00      	cmp	r3, #0
 8001338:	f000 80a0 	beq.w	800147c <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 800133c:	69bb      	ldr	r3, [r7, #24]
 800133e:	0e1b      	lsrs	r3, r3, #24
 8001340:	f003 0303 	and.w	r3, r3, #3
 8001344:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8001346:	697b      	ldr	r3, [r7, #20]
 8001348:	2b02      	cmp	r3, #2
 800134a:	d907      	bls.n	800135c <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001350:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001358:	2301      	movs	r3, #1
 800135a:	e09e      	b.n	800149a <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800135c:	2201      	movs	r2, #1
 800135e:	697b      	ldr	r3, [r7, #20]
 8001360:	409a      	lsls	r2, r3
 8001362:	683b      	ldr	r3, [r7, #0]
 8001364:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001366:	68bb      	ldr	r3, [r7, #8]
 8001368:	689b      	ldr	r3, [r3, #8]
 800136a:	2b00      	cmp	r3, #0
 800136c:	d10d      	bne.n	800138a <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800136e:	68bb      	ldr	r3, [r7, #8]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001374:	68bb      	ldr	r3, [r7, #8]
 8001376:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001378:	68f9      	ldr	r1, [r7, #12]
 800137a:	6809      	ldr	r1, [r1, #0]
 800137c:	431a      	orrs	r2, r3
 800137e:	697b      	ldr	r3, [r7, #20]
 8001380:	3318      	adds	r3, #24
 8001382:	011b      	lsls	r3, r3, #4
 8001384:	440b      	add	r3, r1
 8001386:	601a      	str	r2, [r3, #0]
 8001388:	e00f      	b.n	80013aa <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800138a:	68bb      	ldr	r3, [r7, #8]
 800138c:	685b      	ldr	r3, [r3, #4]
 800138e:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001390:	68bb      	ldr	r3, [r7, #8]
 8001392:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001394:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001396:	68bb      	ldr	r3, [r7, #8]
 8001398:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800139a:	68f9      	ldr	r1, [r7, #12]
 800139c:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800139e:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80013a0:	697b      	ldr	r3, [r7, #20]
 80013a2:	3318      	adds	r3, #24
 80013a4:	011b      	lsls	r3, r3, #4
 80013a6:	440b      	add	r3, r1
 80013a8:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	6819      	ldr	r1, [r3, #0]
 80013ae:	68bb      	ldr	r3, [r7, #8]
 80013b0:	691a      	ldr	r2, [r3, #16]
 80013b2:	697b      	ldr	r3, [r7, #20]
 80013b4:	3318      	adds	r3, #24
 80013b6:	011b      	lsls	r3, r3, #4
 80013b8:	440b      	add	r3, r1
 80013ba:	3304      	adds	r3, #4
 80013bc:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80013be:	68bb      	ldr	r3, [r7, #8]
 80013c0:	7d1b      	ldrb	r3, [r3, #20]
 80013c2:	2b01      	cmp	r3, #1
 80013c4:	d111      	bne.n	80013ea <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	681a      	ldr	r2, [r3, #0]
 80013ca:	697b      	ldr	r3, [r7, #20]
 80013cc:	3318      	adds	r3, #24
 80013ce:	011b      	lsls	r3, r3, #4
 80013d0:	4413      	add	r3, r2
 80013d2:	3304      	adds	r3, #4
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	68fa      	ldr	r2, [r7, #12]
 80013d8:	6811      	ldr	r1, [r2, #0]
 80013da:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80013de:	697b      	ldr	r3, [r7, #20]
 80013e0:	3318      	adds	r3, #24
 80013e2:	011b      	lsls	r3, r3, #4
 80013e4:	440b      	add	r3, r1
 80013e6:	3304      	adds	r3, #4
 80013e8:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	3307      	adds	r3, #7
 80013ee:	781b      	ldrb	r3, [r3, #0]
 80013f0:	061a      	lsls	r2, r3, #24
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	3306      	adds	r3, #6
 80013f6:	781b      	ldrb	r3, [r3, #0]
 80013f8:	041b      	lsls	r3, r3, #16
 80013fa:	431a      	orrs	r2, r3
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	3305      	adds	r3, #5
 8001400:	781b      	ldrb	r3, [r3, #0]
 8001402:	021b      	lsls	r3, r3, #8
 8001404:	4313      	orrs	r3, r2
 8001406:	687a      	ldr	r2, [r7, #4]
 8001408:	3204      	adds	r2, #4
 800140a:	7812      	ldrb	r2, [r2, #0]
 800140c:	4610      	mov	r0, r2
 800140e:	68fa      	ldr	r2, [r7, #12]
 8001410:	6811      	ldr	r1, [r2, #0]
 8001412:	ea43 0200 	orr.w	r2, r3, r0
 8001416:	697b      	ldr	r3, [r7, #20]
 8001418:	011b      	lsls	r3, r3, #4
 800141a:	440b      	add	r3, r1
 800141c:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8001420:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	3303      	adds	r3, #3
 8001426:	781b      	ldrb	r3, [r3, #0]
 8001428:	061a      	lsls	r2, r3, #24
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	3302      	adds	r3, #2
 800142e:	781b      	ldrb	r3, [r3, #0]
 8001430:	041b      	lsls	r3, r3, #16
 8001432:	431a      	orrs	r2, r3
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	3301      	adds	r3, #1
 8001438:	781b      	ldrb	r3, [r3, #0]
 800143a:	021b      	lsls	r3, r3, #8
 800143c:	4313      	orrs	r3, r2
 800143e:	687a      	ldr	r2, [r7, #4]
 8001440:	7812      	ldrb	r2, [r2, #0]
 8001442:	4610      	mov	r0, r2
 8001444:	68fa      	ldr	r2, [r7, #12]
 8001446:	6811      	ldr	r1, [r2, #0]
 8001448:	ea43 0200 	orr.w	r2, r3, r0
 800144c:	697b      	ldr	r3, [r7, #20]
 800144e:	011b      	lsls	r3, r3, #4
 8001450:	440b      	add	r3, r1
 8001452:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8001456:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	681a      	ldr	r2, [r3, #0]
 800145c:	697b      	ldr	r3, [r7, #20]
 800145e:	3318      	adds	r3, #24
 8001460:	011b      	lsls	r3, r3, #4
 8001462:	4413      	add	r3, r2
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	68fa      	ldr	r2, [r7, #12]
 8001468:	6811      	ldr	r1, [r2, #0]
 800146a:	f043 0201 	orr.w	r2, r3, #1
 800146e:	697b      	ldr	r3, [r7, #20]
 8001470:	3318      	adds	r3, #24
 8001472:	011b      	lsls	r3, r3, #4
 8001474:	440b      	add	r3, r1
 8001476:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001478:	2300      	movs	r3, #0
 800147a:	e00e      	b.n	800149a <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001480:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8001488:	2301      	movs	r3, #1
 800148a:	e006      	b.n	800149a <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001490:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001498:	2301      	movs	r3, #1
  }
}
 800149a:	4618      	mov	r0, r3
 800149c:	3724      	adds	r7, #36	; 0x24
 800149e:	46bd      	mov	sp, r7
 80014a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a4:	4770      	bx	lr

080014a6 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80014a6:	b480      	push	{r7}
 80014a8:	b087      	sub	sp, #28
 80014aa:	af00      	add	r7, sp, #0
 80014ac:	60f8      	str	r0, [r7, #12]
 80014ae:	60b9      	str	r1, [r7, #8]
 80014b0:	607a      	str	r2, [r7, #4]
 80014b2:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80014ba:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80014bc:	7dfb      	ldrb	r3, [r7, #23]
 80014be:	2b01      	cmp	r3, #1
 80014c0:	d003      	beq.n	80014ca <HAL_CAN_GetRxMessage+0x24>
 80014c2:	7dfb      	ldrb	r3, [r7, #23]
 80014c4:	2b02      	cmp	r3, #2
 80014c6:	f040 80f3 	bne.w	80016b0 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80014ca:	68bb      	ldr	r3, [r7, #8]
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d10e      	bne.n	80014ee <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	68db      	ldr	r3, [r3, #12]
 80014d6:	f003 0303 	and.w	r3, r3, #3
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d116      	bne.n	800150c <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014e2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80014ea:	2301      	movs	r3, #1
 80014ec:	e0e7      	b.n	80016be <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	691b      	ldr	r3, [r3, #16]
 80014f4:	f003 0303 	and.w	r3, r3, #3
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d107      	bne.n	800150c <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001500:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001508:	2301      	movs	r3, #1
 800150a:	e0d8      	b.n	80016be <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	681a      	ldr	r2, [r3, #0]
 8001510:	68bb      	ldr	r3, [r7, #8]
 8001512:	331b      	adds	r3, #27
 8001514:	011b      	lsls	r3, r3, #4
 8001516:	4413      	add	r3, r2
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f003 0204 	and.w	r2, r3, #4
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	689b      	ldr	r3, [r3, #8]
 8001526:	2b00      	cmp	r3, #0
 8001528:	d10c      	bne.n	8001544 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	681a      	ldr	r2, [r3, #0]
 800152e:	68bb      	ldr	r3, [r7, #8]
 8001530:	331b      	adds	r3, #27
 8001532:	011b      	lsls	r3, r3, #4
 8001534:	4413      	add	r3, r2
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	0d5b      	lsrs	r3, r3, #21
 800153a:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	601a      	str	r2, [r3, #0]
 8001542:	e00b      	b.n	800155c <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	681a      	ldr	r2, [r3, #0]
 8001548:	68bb      	ldr	r3, [r7, #8]
 800154a:	331b      	adds	r3, #27
 800154c:	011b      	lsls	r3, r3, #4
 800154e:	4413      	add	r3, r2
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	08db      	lsrs	r3, r3, #3
 8001554:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	681a      	ldr	r2, [r3, #0]
 8001560:	68bb      	ldr	r3, [r7, #8]
 8001562:	331b      	adds	r3, #27
 8001564:	011b      	lsls	r3, r3, #4
 8001566:	4413      	add	r3, r2
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f003 0202 	and.w	r2, r3, #2
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	681a      	ldr	r2, [r3, #0]
 8001576:	68bb      	ldr	r3, [r7, #8]
 8001578:	331b      	adds	r3, #27
 800157a:	011b      	lsls	r3, r3, #4
 800157c:	4413      	add	r3, r2
 800157e:	3304      	adds	r3, #4
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f003 020f 	and.w	r2, r3, #15
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	681a      	ldr	r2, [r3, #0]
 800158e:	68bb      	ldr	r3, [r7, #8]
 8001590:	331b      	adds	r3, #27
 8001592:	011b      	lsls	r3, r3, #4
 8001594:	4413      	add	r3, r2
 8001596:	3304      	adds	r3, #4
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	0a1b      	lsrs	r3, r3, #8
 800159c:	b2da      	uxtb	r2, r3
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	681a      	ldr	r2, [r3, #0]
 80015a6:	68bb      	ldr	r3, [r7, #8]
 80015a8:	331b      	adds	r3, #27
 80015aa:	011b      	lsls	r3, r3, #4
 80015ac:	4413      	add	r3, r2
 80015ae:	3304      	adds	r3, #4
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	0c1b      	lsrs	r3, r3, #16
 80015b4:	b29a      	uxth	r2, r3
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	681a      	ldr	r2, [r3, #0]
 80015be:	68bb      	ldr	r3, [r7, #8]
 80015c0:	011b      	lsls	r3, r3, #4
 80015c2:	4413      	add	r3, r2
 80015c4:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	b2da      	uxtb	r2, r3
 80015cc:	683b      	ldr	r3, [r7, #0]
 80015ce:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	681a      	ldr	r2, [r3, #0]
 80015d4:	68bb      	ldr	r3, [r7, #8]
 80015d6:	011b      	lsls	r3, r3, #4
 80015d8:	4413      	add	r3, r2
 80015da:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	0a1a      	lsrs	r2, r3, #8
 80015e2:	683b      	ldr	r3, [r7, #0]
 80015e4:	3301      	adds	r3, #1
 80015e6:	b2d2      	uxtb	r2, r2
 80015e8:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	681a      	ldr	r2, [r3, #0]
 80015ee:	68bb      	ldr	r3, [r7, #8]
 80015f0:	011b      	lsls	r3, r3, #4
 80015f2:	4413      	add	r3, r2
 80015f4:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	0c1a      	lsrs	r2, r3, #16
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	3302      	adds	r3, #2
 8001600:	b2d2      	uxtb	r2, r2
 8001602:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	681a      	ldr	r2, [r3, #0]
 8001608:	68bb      	ldr	r3, [r7, #8]
 800160a:	011b      	lsls	r3, r3, #4
 800160c:	4413      	add	r3, r2
 800160e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	0e1a      	lsrs	r2, r3, #24
 8001616:	683b      	ldr	r3, [r7, #0]
 8001618:	3303      	adds	r3, #3
 800161a:	b2d2      	uxtb	r2, r2
 800161c:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	681a      	ldr	r2, [r3, #0]
 8001622:	68bb      	ldr	r3, [r7, #8]
 8001624:	011b      	lsls	r3, r3, #4
 8001626:	4413      	add	r3, r2
 8001628:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800162c:	681a      	ldr	r2, [r3, #0]
 800162e:	683b      	ldr	r3, [r7, #0]
 8001630:	3304      	adds	r3, #4
 8001632:	b2d2      	uxtb	r2, r2
 8001634:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	681a      	ldr	r2, [r3, #0]
 800163a:	68bb      	ldr	r3, [r7, #8]
 800163c:	011b      	lsls	r3, r3, #4
 800163e:	4413      	add	r3, r2
 8001640:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	0a1a      	lsrs	r2, r3, #8
 8001648:	683b      	ldr	r3, [r7, #0]
 800164a:	3305      	adds	r3, #5
 800164c:	b2d2      	uxtb	r2, r2
 800164e:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	681a      	ldr	r2, [r3, #0]
 8001654:	68bb      	ldr	r3, [r7, #8]
 8001656:	011b      	lsls	r3, r3, #4
 8001658:	4413      	add	r3, r2
 800165a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	0c1a      	lsrs	r2, r3, #16
 8001662:	683b      	ldr	r3, [r7, #0]
 8001664:	3306      	adds	r3, #6
 8001666:	b2d2      	uxtb	r2, r2
 8001668:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	681a      	ldr	r2, [r3, #0]
 800166e:	68bb      	ldr	r3, [r7, #8]
 8001670:	011b      	lsls	r3, r3, #4
 8001672:	4413      	add	r3, r2
 8001674:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	0e1a      	lsrs	r2, r3, #24
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	3307      	adds	r3, #7
 8001680:	b2d2      	uxtb	r2, r2
 8001682:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001684:	68bb      	ldr	r3, [r7, #8]
 8001686:	2b00      	cmp	r3, #0
 8001688:	d108      	bne.n	800169c <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	68da      	ldr	r2, [r3, #12]
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f042 0220 	orr.w	r2, r2, #32
 8001698:	60da      	str	r2, [r3, #12]
 800169a:	e007      	b.n	80016ac <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	691a      	ldr	r2, [r3, #16]
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f042 0220 	orr.w	r2, r2, #32
 80016aa:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80016ac:	2300      	movs	r3, #0
 80016ae:	e006      	b.n	80016be <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016b4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80016bc:	2301      	movs	r3, #1
  }
}
 80016be:	4618      	mov	r0, r3
 80016c0:	371c      	adds	r7, #28
 80016c2:	46bd      	mov	sp, r7
 80016c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c8:	4770      	bx	lr

080016ca <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80016ca:	b480      	push	{r7}
 80016cc:	b085      	sub	sp, #20
 80016ce:	af00      	add	r7, sp, #0
 80016d0:	6078      	str	r0, [r7, #4]
 80016d2:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80016da:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80016dc:	7bfb      	ldrb	r3, [r7, #15]
 80016de:	2b01      	cmp	r3, #1
 80016e0:	d002      	beq.n	80016e8 <HAL_CAN_ActivateNotification+0x1e>
 80016e2:	7bfb      	ldrb	r3, [r7, #15]
 80016e4:	2b02      	cmp	r3, #2
 80016e6:	d109      	bne.n	80016fc <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	6959      	ldr	r1, [r3, #20]
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	683a      	ldr	r2, [r7, #0]
 80016f4:	430a      	orrs	r2, r1
 80016f6:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80016f8:	2300      	movs	r3, #0
 80016fa:	e006      	b.n	800170a <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001700:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001708:	2301      	movs	r3, #1
  }
}
 800170a:	4618      	mov	r0, r3
 800170c:	3714      	adds	r7, #20
 800170e:	46bd      	mov	sp, r7
 8001710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001714:	4770      	bx	lr

08001716 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001716:	b580      	push	{r7, lr}
 8001718:	b08a      	sub	sp, #40	; 0x28
 800171a:	af00      	add	r7, sp, #0
 800171c:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800171e:	2300      	movs	r3, #0
 8001720:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	695b      	ldr	r3, [r3, #20]
 8001728:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	685b      	ldr	r3, [r3, #4]
 8001730:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	689b      	ldr	r3, [r3, #8]
 8001738:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	68db      	ldr	r3, [r3, #12]
 8001740:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	691b      	ldr	r3, [r3, #16]
 8001748:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	699b      	ldr	r3, [r3, #24]
 8001750:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001752:	6a3b      	ldr	r3, [r7, #32]
 8001754:	f003 0301 	and.w	r3, r3, #1
 8001758:	2b00      	cmp	r3, #0
 800175a:	d07c      	beq.n	8001856 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800175c:	69bb      	ldr	r3, [r7, #24]
 800175e:	f003 0301 	and.w	r3, r3, #1
 8001762:	2b00      	cmp	r3, #0
 8001764:	d023      	beq.n	80017ae <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	2201      	movs	r2, #1
 800176c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800176e:	69bb      	ldr	r3, [r7, #24]
 8001770:	f003 0302 	and.w	r3, r3, #2
 8001774:	2b00      	cmp	r3, #0
 8001776:	d003      	beq.n	8001780 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001778:	6878      	ldr	r0, [r7, #4]
 800177a:	f000 f983 	bl	8001a84 <HAL_CAN_TxMailbox0CompleteCallback>
 800177e:	e016      	b.n	80017ae <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001780:	69bb      	ldr	r3, [r7, #24]
 8001782:	f003 0304 	and.w	r3, r3, #4
 8001786:	2b00      	cmp	r3, #0
 8001788:	d004      	beq.n	8001794 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800178a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800178c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001790:	627b      	str	r3, [r7, #36]	; 0x24
 8001792:	e00c      	b.n	80017ae <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001794:	69bb      	ldr	r3, [r7, #24]
 8001796:	f003 0308 	and.w	r3, r3, #8
 800179a:	2b00      	cmp	r3, #0
 800179c:	d004      	beq.n	80017a8 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800179e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017a0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80017a4:	627b      	str	r3, [r7, #36]	; 0x24
 80017a6:	e002      	b.n	80017ae <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80017a8:	6878      	ldr	r0, [r7, #4]
 80017aa:	f000 f989 	bl	8001ac0 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80017ae:	69bb      	ldr	r3, [r7, #24]
 80017b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d024      	beq.n	8001802 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80017c0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80017c2:	69bb      	ldr	r3, [r7, #24]
 80017c4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d003      	beq.n	80017d4 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80017cc:	6878      	ldr	r0, [r7, #4]
 80017ce:	f000 f963 	bl	8001a98 <HAL_CAN_TxMailbox1CompleteCallback>
 80017d2:	e016      	b.n	8001802 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80017d4:	69bb      	ldr	r3, [r7, #24]
 80017d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d004      	beq.n	80017e8 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80017de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017e0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80017e4:	627b      	str	r3, [r7, #36]	; 0x24
 80017e6:	e00c      	b.n	8001802 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80017e8:	69bb      	ldr	r3, [r7, #24]
 80017ea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d004      	beq.n	80017fc <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80017f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017f8:	627b      	str	r3, [r7, #36]	; 0x24
 80017fa:	e002      	b.n	8001802 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80017fc:	6878      	ldr	r0, [r7, #4]
 80017fe:	f000 f969 	bl	8001ad4 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001802:	69bb      	ldr	r3, [r7, #24]
 8001804:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001808:	2b00      	cmp	r3, #0
 800180a:	d024      	beq.n	8001856 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001814:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001816:	69bb      	ldr	r3, [r7, #24]
 8001818:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800181c:	2b00      	cmp	r3, #0
 800181e:	d003      	beq.n	8001828 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001820:	6878      	ldr	r0, [r7, #4]
 8001822:	f000 f943 	bl	8001aac <HAL_CAN_TxMailbox2CompleteCallback>
 8001826:	e016      	b.n	8001856 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001828:	69bb      	ldr	r3, [r7, #24]
 800182a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800182e:	2b00      	cmp	r3, #0
 8001830:	d004      	beq.n	800183c <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001834:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001838:	627b      	str	r3, [r7, #36]	; 0x24
 800183a:	e00c      	b.n	8001856 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800183c:	69bb      	ldr	r3, [r7, #24]
 800183e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001842:	2b00      	cmp	r3, #0
 8001844:	d004      	beq.n	8001850 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001848:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800184c:	627b      	str	r3, [r7, #36]	; 0x24
 800184e:	e002      	b.n	8001856 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001850:	6878      	ldr	r0, [r7, #4]
 8001852:	f000 f949 	bl	8001ae8 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001856:	6a3b      	ldr	r3, [r7, #32]
 8001858:	f003 0308 	and.w	r3, r3, #8
 800185c:	2b00      	cmp	r3, #0
 800185e:	d00c      	beq.n	800187a <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001860:	697b      	ldr	r3, [r7, #20]
 8001862:	f003 0310 	and.w	r3, r3, #16
 8001866:	2b00      	cmp	r3, #0
 8001868:	d007      	beq.n	800187a <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800186a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800186c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001870:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	2210      	movs	r2, #16
 8001878:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800187a:	6a3b      	ldr	r3, [r7, #32]
 800187c:	f003 0304 	and.w	r3, r3, #4
 8001880:	2b00      	cmp	r3, #0
 8001882:	d00b      	beq.n	800189c <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001884:	697b      	ldr	r3, [r7, #20]
 8001886:	f003 0308 	and.w	r3, r3, #8
 800188a:	2b00      	cmp	r3, #0
 800188c:	d006      	beq.n	800189c <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	2208      	movs	r2, #8
 8001894:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001896:	6878      	ldr	r0, [r7, #4]
 8001898:	f000 f930 	bl	8001afc <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800189c:	6a3b      	ldr	r3, [r7, #32]
 800189e:	f003 0302 	and.w	r3, r3, #2
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d009      	beq.n	80018ba <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	68db      	ldr	r3, [r3, #12]
 80018ac:	f003 0303 	and.w	r3, r3, #3
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d002      	beq.n	80018ba <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80018b4:	6878      	ldr	r0, [r7, #4]
 80018b6:	f7ff f87f 	bl	80009b8 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80018ba:	6a3b      	ldr	r3, [r7, #32]
 80018bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d00c      	beq.n	80018de <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80018c4:	693b      	ldr	r3, [r7, #16]
 80018c6:	f003 0310 	and.w	r3, r3, #16
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d007      	beq.n	80018de <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80018ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018d0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80018d4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	2210      	movs	r2, #16
 80018dc:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80018de:	6a3b      	ldr	r3, [r7, #32]
 80018e0:	f003 0320 	and.w	r3, r3, #32
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d00b      	beq.n	8001900 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80018e8:	693b      	ldr	r3, [r7, #16]
 80018ea:	f003 0308 	and.w	r3, r3, #8
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d006      	beq.n	8001900 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	2208      	movs	r2, #8
 80018f8:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80018fa:	6878      	ldr	r0, [r7, #4]
 80018fc:	f000 f912 	bl	8001b24 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001900:	6a3b      	ldr	r3, [r7, #32]
 8001902:	f003 0310 	and.w	r3, r3, #16
 8001906:	2b00      	cmp	r3, #0
 8001908:	d009      	beq.n	800191e <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	691b      	ldr	r3, [r3, #16]
 8001910:	f003 0303 	and.w	r3, r3, #3
 8001914:	2b00      	cmp	r3, #0
 8001916:	d002      	beq.n	800191e <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001918:	6878      	ldr	r0, [r7, #4]
 800191a:	f000 f8f9 	bl	8001b10 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800191e:	6a3b      	ldr	r3, [r7, #32]
 8001920:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001924:	2b00      	cmp	r3, #0
 8001926:	d00b      	beq.n	8001940 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001928:	69fb      	ldr	r3, [r7, #28]
 800192a:	f003 0310 	and.w	r3, r3, #16
 800192e:	2b00      	cmp	r3, #0
 8001930:	d006      	beq.n	8001940 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	2210      	movs	r2, #16
 8001938:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800193a:	6878      	ldr	r0, [r7, #4]
 800193c:	f000 f8fc 	bl	8001b38 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001940:	6a3b      	ldr	r3, [r7, #32]
 8001942:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001946:	2b00      	cmp	r3, #0
 8001948:	d00b      	beq.n	8001962 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800194a:	69fb      	ldr	r3, [r7, #28]
 800194c:	f003 0308 	and.w	r3, r3, #8
 8001950:	2b00      	cmp	r3, #0
 8001952:	d006      	beq.n	8001962 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	2208      	movs	r2, #8
 800195a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800195c:	6878      	ldr	r0, [r7, #4]
 800195e:	f000 f8f5 	bl	8001b4c <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001962:	6a3b      	ldr	r3, [r7, #32]
 8001964:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001968:	2b00      	cmp	r3, #0
 800196a:	d07b      	beq.n	8001a64 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800196c:	69fb      	ldr	r3, [r7, #28]
 800196e:	f003 0304 	and.w	r3, r3, #4
 8001972:	2b00      	cmp	r3, #0
 8001974:	d072      	beq.n	8001a5c <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001976:	6a3b      	ldr	r3, [r7, #32]
 8001978:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800197c:	2b00      	cmp	r3, #0
 800197e:	d008      	beq.n	8001992 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001986:	2b00      	cmp	r3, #0
 8001988:	d003      	beq.n	8001992 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800198a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800198c:	f043 0301 	orr.w	r3, r3, #1
 8001990:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001992:	6a3b      	ldr	r3, [r7, #32]
 8001994:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001998:	2b00      	cmp	r3, #0
 800199a:	d008      	beq.n	80019ae <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d003      	beq.n	80019ae <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80019a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019a8:	f043 0302 	orr.w	r3, r3, #2
 80019ac:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80019ae:	6a3b      	ldr	r3, [r7, #32]
 80019b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d008      	beq.n	80019ca <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d003      	beq.n	80019ca <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80019c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019c4:	f043 0304 	orr.w	r3, r3, #4
 80019c8:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80019ca:	6a3b      	ldr	r3, [r7, #32]
 80019cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d043      	beq.n	8001a5c <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d03e      	beq.n	8001a5c <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80019e4:	2b60      	cmp	r3, #96	; 0x60
 80019e6:	d02b      	beq.n	8001a40 <HAL_CAN_IRQHandler+0x32a>
 80019e8:	2b60      	cmp	r3, #96	; 0x60
 80019ea:	d82e      	bhi.n	8001a4a <HAL_CAN_IRQHandler+0x334>
 80019ec:	2b50      	cmp	r3, #80	; 0x50
 80019ee:	d022      	beq.n	8001a36 <HAL_CAN_IRQHandler+0x320>
 80019f0:	2b50      	cmp	r3, #80	; 0x50
 80019f2:	d82a      	bhi.n	8001a4a <HAL_CAN_IRQHandler+0x334>
 80019f4:	2b40      	cmp	r3, #64	; 0x40
 80019f6:	d019      	beq.n	8001a2c <HAL_CAN_IRQHandler+0x316>
 80019f8:	2b40      	cmp	r3, #64	; 0x40
 80019fa:	d826      	bhi.n	8001a4a <HAL_CAN_IRQHandler+0x334>
 80019fc:	2b30      	cmp	r3, #48	; 0x30
 80019fe:	d010      	beq.n	8001a22 <HAL_CAN_IRQHandler+0x30c>
 8001a00:	2b30      	cmp	r3, #48	; 0x30
 8001a02:	d822      	bhi.n	8001a4a <HAL_CAN_IRQHandler+0x334>
 8001a04:	2b10      	cmp	r3, #16
 8001a06:	d002      	beq.n	8001a0e <HAL_CAN_IRQHandler+0x2f8>
 8001a08:	2b20      	cmp	r3, #32
 8001a0a:	d005      	beq.n	8001a18 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001a0c:	e01d      	b.n	8001a4a <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a10:	f043 0308 	orr.w	r3, r3, #8
 8001a14:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001a16:	e019      	b.n	8001a4c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a1a:	f043 0310 	orr.w	r3, r3, #16
 8001a1e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001a20:	e014      	b.n	8001a4c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a24:	f043 0320 	orr.w	r3, r3, #32
 8001a28:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001a2a:	e00f      	b.n	8001a4c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a2e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001a32:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001a34:	e00a      	b.n	8001a4c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a3c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001a3e:	e005      	b.n	8001a4c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a46:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001a48:	e000      	b.n	8001a4c <HAL_CAN_IRQHandler+0x336>
            break;
 8001a4a:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	699a      	ldr	r2, [r3, #24]
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001a5a:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	2204      	movs	r2, #4
 8001a62:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d008      	beq.n	8001a7c <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a70:	431a      	orrs	r2, r3
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001a76:	6878      	ldr	r0, [r7, #4]
 8001a78:	f000 f872 	bl	8001b60 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001a7c:	bf00      	nop
 8001a7e:	3728      	adds	r7, #40	; 0x28
 8001a80:	46bd      	mov	sp, r7
 8001a82:	bd80      	pop	{r7, pc}

08001a84 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001a84:	b480      	push	{r7}
 8001a86:	b083      	sub	sp, #12
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001a8c:	bf00      	nop
 8001a8e:	370c      	adds	r7, #12
 8001a90:	46bd      	mov	sp, r7
 8001a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a96:	4770      	bx	lr

08001a98 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	b083      	sub	sp, #12
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001aa0:	bf00      	nop
 8001aa2:	370c      	adds	r7, #12
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aaa:	4770      	bx	lr

08001aac <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001aac:	b480      	push	{r7}
 8001aae:	b083      	sub	sp, #12
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001ab4:	bf00      	nop
 8001ab6:	370c      	adds	r7, #12
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abe:	4770      	bx	lr

08001ac0 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	b083      	sub	sp, #12
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001ac8:	bf00      	nop
 8001aca:	370c      	adds	r7, #12
 8001acc:	46bd      	mov	sp, r7
 8001ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad2:	4770      	bx	lr

08001ad4 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	b083      	sub	sp, #12
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001adc:	bf00      	nop
 8001ade:	370c      	adds	r7, #12
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae6:	4770      	bx	lr

08001ae8 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	b083      	sub	sp, #12
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001af0:	bf00      	nop
 8001af2:	370c      	adds	r7, #12
 8001af4:	46bd      	mov	sp, r7
 8001af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afa:	4770      	bx	lr

08001afc <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001afc:	b480      	push	{r7}
 8001afe:	b083      	sub	sp, #12
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001b04:	bf00      	nop
 8001b06:	370c      	adds	r7, #12
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0e:	4770      	bx	lr

08001b10 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001b10:	b480      	push	{r7}
 8001b12:	b083      	sub	sp, #12
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001b18:	bf00      	nop
 8001b1a:	370c      	adds	r7, #12
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b22:	4770      	bx	lr

08001b24 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001b24:	b480      	push	{r7}
 8001b26:	b083      	sub	sp, #12
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001b2c:	bf00      	nop
 8001b2e:	370c      	adds	r7, #12
 8001b30:	46bd      	mov	sp, r7
 8001b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b36:	4770      	bx	lr

08001b38 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	b083      	sub	sp, #12
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001b40:	bf00      	nop
 8001b42:	370c      	adds	r7, #12
 8001b44:	46bd      	mov	sp, r7
 8001b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4a:	4770      	bx	lr

08001b4c <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	b083      	sub	sp, #12
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001b54:	bf00      	nop
 8001b56:	370c      	adds	r7, #12
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5e:	4770      	bx	lr

08001b60 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001b60:	b480      	push	{r7}
 8001b62:	b083      	sub	sp, #12
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001b68:	bf00      	nop
 8001b6a:	370c      	adds	r7, #12
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b72:	4770      	bx	lr

08001b74 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b74:	b480      	push	{r7}
 8001b76:	b085      	sub	sp, #20
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	f003 0307 	and.w	r3, r3, #7
 8001b82:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b84:	4b0c      	ldr	r3, [pc, #48]	; (8001bb8 <__NVIC_SetPriorityGrouping+0x44>)
 8001b86:	68db      	ldr	r3, [r3, #12]
 8001b88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b8a:	68ba      	ldr	r2, [r7, #8]
 8001b8c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b90:	4013      	ands	r3, r2
 8001b92:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b98:	68bb      	ldr	r3, [r7, #8]
 8001b9a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b9c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ba0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ba4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ba6:	4a04      	ldr	r2, [pc, #16]	; (8001bb8 <__NVIC_SetPriorityGrouping+0x44>)
 8001ba8:	68bb      	ldr	r3, [r7, #8]
 8001baa:	60d3      	str	r3, [r2, #12]
}
 8001bac:	bf00      	nop
 8001bae:	3714      	adds	r7, #20
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb6:	4770      	bx	lr
 8001bb8:	e000ed00 	.word	0xe000ed00

08001bbc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001bc0:	4b04      	ldr	r3, [pc, #16]	; (8001bd4 <__NVIC_GetPriorityGrouping+0x18>)
 8001bc2:	68db      	ldr	r3, [r3, #12]
 8001bc4:	0a1b      	lsrs	r3, r3, #8
 8001bc6:	f003 0307 	and.w	r3, r3, #7
}
 8001bca:	4618      	mov	r0, r3
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd2:	4770      	bx	lr
 8001bd4:	e000ed00 	.word	0xe000ed00

08001bd8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	b083      	sub	sp, #12
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	4603      	mov	r3, r0
 8001be0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001be2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	db0b      	blt.n	8001c02 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001bea:	79fb      	ldrb	r3, [r7, #7]
 8001bec:	f003 021f 	and.w	r2, r3, #31
 8001bf0:	4907      	ldr	r1, [pc, #28]	; (8001c10 <__NVIC_EnableIRQ+0x38>)
 8001bf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bf6:	095b      	lsrs	r3, r3, #5
 8001bf8:	2001      	movs	r0, #1
 8001bfa:	fa00 f202 	lsl.w	r2, r0, r2
 8001bfe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c02:	bf00      	nop
 8001c04:	370c      	adds	r7, #12
 8001c06:	46bd      	mov	sp, r7
 8001c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0c:	4770      	bx	lr
 8001c0e:	bf00      	nop
 8001c10:	e000e100 	.word	0xe000e100

08001c14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c14:	b480      	push	{r7}
 8001c16:	b083      	sub	sp, #12
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	6039      	str	r1, [r7, #0]
 8001c1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	db0a      	blt.n	8001c3e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	b2da      	uxtb	r2, r3
 8001c2c:	490c      	ldr	r1, [pc, #48]	; (8001c60 <__NVIC_SetPriority+0x4c>)
 8001c2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c32:	0112      	lsls	r2, r2, #4
 8001c34:	b2d2      	uxtb	r2, r2
 8001c36:	440b      	add	r3, r1
 8001c38:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c3c:	e00a      	b.n	8001c54 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	b2da      	uxtb	r2, r3
 8001c42:	4908      	ldr	r1, [pc, #32]	; (8001c64 <__NVIC_SetPriority+0x50>)
 8001c44:	79fb      	ldrb	r3, [r7, #7]
 8001c46:	f003 030f 	and.w	r3, r3, #15
 8001c4a:	3b04      	subs	r3, #4
 8001c4c:	0112      	lsls	r2, r2, #4
 8001c4e:	b2d2      	uxtb	r2, r2
 8001c50:	440b      	add	r3, r1
 8001c52:	761a      	strb	r2, [r3, #24]
}
 8001c54:	bf00      	nop
 8001c56:	370c      	adds	r7, #12
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5e:	4770      	bx	lr
 8001c60:	e000e100 	.word	0xe000e100
 8001c64:	e000ed00 	.word	0xe000ed00

08001c68 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	b089      	sub	sp, #36	; 0x24
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	60f8      	str	r0, [r7, #12]
 8001c70:	60b9      	str	r1, [r7, #8]
 8001c72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	f003 0307 	and.w	r3, r3, #7
 8001c7a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c7c:	69fb      	ldr	r3, [r7, #28]
 8001c7e:	f1c3 0307 	rsb	r3, r3, #7
 8001c82:	2b04      	cmp	r3, #4
 8001c84:	bf28      	it	cs
 8001c86:	2304      	movcs	r3, #4
 8001c88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c8a:	69fb      	ldr	r3, [r7, #28]
 8001c8c:	3304      	adds	r3, #4
 8001c8e:	2b06      	cmp	r3, #6
 8001c90:	d902      	bls.n	8001c98 <NVIC_EncodePriority+0x30>
 8001c92:	69fb      	ldr	r3, [r7, #28]
 8001c94:	3b03      	subs	r3, #3
 8001c96:	e000      	b.n	8001c9a <NVIC_EncodePriority+0x32>
 8001c98:	2300      	movs	r3, #0
 8001c9a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c9c:	f04f 32ff 	mov.w	r2, #4294967295
 8001ca0:	69bb      	ldr	r3, [r7, #24]
 8001ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca6:	43da      	mvns	r2, r3
 8001ca8:	68bb      	ldr	r3, [r7, #8]
 8001caa:	401a      	ands	r2, r3
 8001cac:	697b      	ldr	r3, [r7, #20]
 8001cae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001cb0:	f04f 31ff 	mov.w	r1, #4294967295
 8001cb4:	697b      	ldr	r3, [r7, #20]
 8001cb6:	fa01 f303 	lsl.w	r3, r1, r3
 8001cba:	43d9      	mvns	r1, r3
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cc0:	4313      	orrs	r3, r2
         );
}
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	3724      	adds	r7, #36	; 0x24
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ccc:	4770      	bx	lr
	...

08001cd0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b082      	sub	sp, #8
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	3b01      	subs	r3, #1
 8001cdc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ce0:	d301      	bcc.n	8001ce6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	e00f      	b.n	8001d06 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ce6:	4a0a      	ldr	r2, [pc, #40]	; (8001d10 <SysTick_Config+0x40>)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	3b01      	subs	r3, #1
 8001cec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001cee:	210f      	movs	r1, #15
 8001cf0:	f04f 30ff 	mov.w	r0, #4294967295
 8001cf4:	f7ff ff8e 	bl	8001c14 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001cf8:	4b05      	ldr	r3, [pc, #20]	; (8001d10 <SysTick_Config+0x40>)
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001cfe:	4b04      	ldr	r3, [pc, #16]	; (8001d10 <SysTick_Config+0x40>)
 8001d00:	2207      	movs	r2, #7
 8001d02:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d04:	2300      	movs	r3, #0
}
 8001d06:	4618      	mov	r0, r3
 8001d08:	3708      	adds	r7, #8
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bd80      	pop	{r7, pc}
 8001d0e:	bf00      	nop
 8001d10:	e000e010 	.word	0xe000e010

08001d14 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b082      	sub	sp, #8
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d1c:	6878      	ldr	r0, [r7, #4]
 8001d1e:	f7ff ff29 	bl	8001b74 <__NVIC_SetPriorityGrouping>
}
 8001d22:	bf00      	nop
 8001d24:	3708      	adds	r7, #8
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bd80      	pop	{r7, pc}

08001d2a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d2a:	b580      	push	{r7, lr}
 8001d2c:	b086      	sub	sp, #24
 8001d2e:	af00      	add	r7, sp, #0
 8001d30:	4603      	mov	r3, r0
 8001d32:	60b9      	str	r1, [r7, #8]
 8001d34:	607a      	str	r2, [r7, #4]
 8001d36:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d3c:	f7ff ff3e 	bl	8001bbc <__NVIC_GetPriorityGrouping>
 8001d40:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d42:	687a      	ldr	r2, [r7, #4]
 8001d44:	68b9      	ldr	r1, [r7, #8]
 8001d46:	6978      	ldr	r0, [r7, #20]
 8001d48:	f7ff ff8e 	bl	8001c68 <NVIC_EncodePriority>
 8001d4c:	4602      	mov	r2, r0
 8001d4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d52:	4611      	mov	r1, r2
 8001d54:	4618      	mov	r0, r3
 8001d56:	f7ff ff5d 	bl	8001c14 <__NVIC_SetPriority>
}
 8001d5a:	bf00      	nop
 8001d5c:	3718      	adds	r7, #24
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bd80      	pop	{r7, pc}

08001d62 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d62:	b580      	push	{r7, lr}
 8001d64:	b082      	sub	sp, #8
 8001d66:	af00      	add	r7, sp, #0
 8001d68:	4603      	mov	r3, r0
 8001d6a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d70:	4618      	mov	r0, r3
 8001d72:	f7ff ff31 	bl	8001bd8 <__NVIC_EnableIRQ>
}
 8001d76:	bf00      	nop
 8001d78:	3708      	adds	r7, #8
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}

08001d7e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d7e:	b580      	push	{r7, lr}
 8001d80:	b082      	sub	sp, #8
 8001d82:	af00      	add	r7, sp, #0
 8001d84:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d86:	6878      	ldr	r0, [r7, #4]
 8001d88:	f7ff ffa2 	bl	8001cd0 <SysTick_Config>
 8001d8c:	4603      	mov	r3, r0
}
 8001d8e:	4618      	mov	r0, r3
 8001d90:	3708      	adds	r7, #8
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bd80      	pop	{r7, pc}

08001d96 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001d96:	b580      	push	{r7, lr}
 8001d98:	b084      	sub	sp, #16
 8001d9a:	af00      	add	r7, sp, #0
 8001d9c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001da2:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001da4:	f7ff f878 	bl	8000e98 <HAL_GetTick>
 8001da8:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001db0:	b2db      	uxtb	r3, r3
 8001db2:	2b02      	cmp	r3, #2
 8001db4:	d008      	beq.n	8001dc8 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	2280      	movs	r2, #128	; 0x80
 8001dba:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001dc4:	2301      	movs	r3, #1
 8001dc6:	e052      	b.n	8001e6e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	681a      	ldr	r2, [r3, #0]
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f022 0216 	bic.w	r2, r2, #22
 8001dd6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	695a      	ldr	r2, [r3, #20]
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001de6:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d103      	bne.n	8001df8 <HAL_DMA_Abort+0x62>
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d007      	beq.n	8001e08 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	681a      	ldr	r2, [r3, #0]
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f022 0208 	bic.w	r2, r2, #8
 8001e06:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	681a      	ldr	r2, [r3, #0]
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f022 0201 	bic.w	r2, r2, #1
 8001e16:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e18:	e013      	b.n	8001e42 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001e1a:	f7ff f83d 	bl	8000e98 <HAL_GetTick>
 8001e1e:	4602      	mov	r2, r0
 8001e20:	68bb      	ldr	r3, [r7, #8]
 8001e22:	1ad3      	subs	r3, r2, r3
 8001e24:	2b05      	cmp	r3, #5
 8001e26:	d90c      	bls.n	8001e42 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	2220      	movs	r2, #32
 8001e2c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	2203      	movs	r2, #3
 8001e32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	2200      	movs	r2, #0
 8001e3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001e3e:	2303      	movs	r3, #3
 8001e40:	e015      	b.n	8001e6e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f003 0301 	and.w	r3, r3, #1
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d1e4      	bne.n	8001e1a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e54:	223f      	movs	r2, #63	; 0x3f
 8001e56:	409a      	lsls	r2, r3
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	2201      	movs	r2, #1
 8001e60:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	2200      	movs	r2, #0
 8001e68:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001e6c:	2300      	movs	r3, #0
}
 8001e6e:	4618      	mov	r0, r3
 8001e70:	3710      	adds	r7, #16
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bd80      	pop	{r7, pc}

08001e76 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001e76:	b480      	push	{r7}
 8001e78:	b083      	sub	sp, #12
 8001e7a:	af00      	add	r7, sp, #0
 8001e7c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001e84:	b2db      	uxtb	r3, r3
 8001e86:	2b02      	cmp	r3, #2
 8001e88:	d004      	beq.n	8001e94 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	2280      	movs	r2, #128	; 0x80
 8001e8e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001e90:	2301      	movs	r3, #1
 8001e92:	e00c      	b.n	8001eae <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	2205      	movs	r2, #5
 8001e98:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	681a      	ldr	r2, [r3, #0]
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f022 0201 	bic.w	r2, r2, #1
 8001eaa:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001eac:	2300      	movs	r3, #0
}
 8001eae:	4618      	mov	r0, r3
 8001eb0:	370c      	adds	r7, #12
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb8:	4770      	bx	lr
	...

08001ebc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	b089      	sub	sp, #36	; 0x24
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
 8001ec4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	61fb      	str	r3, [r7, #28]
 8001ed6:	e16b      	b.n	80021b0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001ed8:	2201      	movs	r2, #1
 8001eda:	69fb      	ldr	r3, [r7, #28]
 8001edc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	697a      	ldr	r2, [r7, #20]
 8001ee8:	4013      	ands	r3, r2
 8001eea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001eec:	693a      	ldr	r2, [r7, #16]
 8001eee:	697b      	ldr	r3, [r7, #20]
 8001ef0:	429a      	cmp	r2, r3
 8001ef2:	f040 815a 	bne.w	80021aa <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	685b      	ldr	r3, [r3, #4]
 8001efa:	f003 0303 	and.w	r3, r3, #3
 8001efe:	2b01      	cmp	r3, #1
 8001f00:	d005      	beq.n	8001f0e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	685b      	ldr	r3, [r3, #4]
 8001f06:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f0a:	2b02      	cmp	r3, #2
 8001f0c:	d130      	bne.n	8001f70 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	689b      	ldr	r3, [r3, #8]
 8001f12:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001f14:	69fb      	ldr	r3, [r7, #28]
 8001f16:	005b      	lsls	r3, r3, #1
 8001f18:	2203      	movs	r2, #3
 8001f1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f1e:	43db      	mvns	r3, r3
 8001f20:	69ba      	ldr	r2, [r7, #24]
 8001f22:	4013      	ands	r3, r2
 8001f24:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	68da      	ldr	r2, [r3, #12]
 8001f2a:	69fb      	ldr	r3, [r7, #28]
 8001f2c:	005b      	lsls	r3, r3, #1
 8001f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f32:	69ba      	ldr	r2, [r7, #24]
 8001f34:	4313      	orrs	r3, r2
 8001f36:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	69ba      	ldr	r2, [r7, #24]
 8001f3c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	685b      	ldr	r3, [r3, #4]
 8001f42:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f44:	2201      	movs	r2, #1
 8001f46:	69fb      	ldr	r3, [r7, #28]
 8001f48:	fa02 f303 	lsl.w	r3, r2, r3
 8001f4c:	43db      	mvns	r3, r3
 8001f4e:	69ba      	ldr	r2, [r7, #24]
 8001f50:	4013      	ands	r3, r2
 8001f52:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	685b      	ldr	r3, [r3, #4]
 8001f58:	091b      	lsrs	r3, r3, #4
 8001f5a:	f003 0201 	and.w	r2, r3, #1
 8001f5e:	69fb      	ldr	r3, [r7, #28]
 8001f60:	fa02 f303 	lsl.w	r3, r2, r3
 8001f64:	69ba      	ldr	r2, [r7, #24]
 8001f66:	4313      	orrs	r3, r2
 8001f68:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	69ba      	ldr	r2, [r7, #24]
 8001f6e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	685b      	ldr	r3, [r3, #4]
 8001f74:	f003 0303 	and.w	r3, r3, #3
 8001f78:	2b03      	cmp	r3, #3
 8001f7a:	d017      	beq.n	8001fac <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	68db      	ldr	r3, [r3, #12]
 8001f80:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001f82:	69fb      	ldr	r3, [r7, #28]
 8001f84:	005b      	lsls	r3, r3, #1
 8001f86:	2203      	movs	r2, #3
 8001f88:	fa02 f303 	lsl.w	r3, r2, r3
 8001f8c:	43db      	mvns	r3, r3
 8001f8e:	69ba      	ldr	r2, [r7, #24]
 8001f90:	4013      	ands	r3, r2
 8001f92:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	689a      	ldr	r2, [r3, #8]
 8001f98:	69fb      	ldr	r3, [r7, #28]
 8001f9a:	005b      	lsls	r3, r3, #1
 8001f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa0:	69ba      	ldr	r2, [r7, #24]
 8001fa2:	4313      	orrs	r3, r2
 8001fa4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	69ba      	ldr	r2, [r7, #24]
 8001faa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	685b      	ldr	r3, [r3, #4]
 8001fb0:	f003 0303 	and.w	r3, r3, #3
 8001fb4:	2b02      	cmp	r3, #2
 8001fb6:	d123      	bne.n	8002000 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001fb8:	69fb      	ldr	r3, [r7, #28]
 8001fba:	08da      	lsrs	r2, r3, #3
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	3208      	adds	r2, #8
 8001fc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fc4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001fc6:	69fb      	ldr	r3, [r7, #28]
 8001fc8:	f003 0307 	and.w	r3, r3, #7
 8001fcc:	009b      	lsls	r3, r3, #2
 8001fce:	220f      	movs	r2, #15
 8001fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd4:	43db      	mvns	r3, r3
 8001fd6:	69ba      	ldr	r2, [r7, #24]
 8001fd8:	4013      	ands	r3, r2
 8001fda:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	691a      	ldr	r2, [r3, #16]
 8001fe0:	69fb      	ldr	r3, [r7, #28]
 8001fe2:	f003 0307 	and.w	r3, r3, #7
 8001fe6:	009b      	lsls	r3, r3, #2
 8001fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fec:	69ba      	ldr	r2, [r7, #24]
 8001fee:	4313      	orrs	r3, r2
 8001ff0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001ff2:	69fb      	ldr	r3, [r7, #28]
 8001ff4:	08da      	lsrs	r2, r3, #3
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	3208      	adds	r2, #8
 8001ffa:	69b9      	ldr	r1, [r7, #24]
 8001ffc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002006:	69fb      	ldr	r3, [r7, #28]
 8002008:	005b      	lsls	r3, r3, #1
 800200a:	2203      	movs	r2, #3
 800200c:	fa02 f303 	lsl.w	r3, r2, r3
 8002010:	43db      	mvns	r3, r3
 8002012:	69ba      	ldr	r2, [r7, #24]
 8002014:	4013      	ands	r3, r2
 8002016:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	685b      	ldr	r3, [r3, #4]
 800201c:	f003 0203 	and.w	r2, r3, #3
 8002020:	69fb      	ldr	r3, [r7, #28]
 8002022:	005b      	lsls	r3, r3, #1
 8002024:	fa02 f303 	lsl.w	r3, r2, r3
 8002028:	69ba      	ldr	r2, [r7, #24]
 800202a:	4313      	orrs	r3, r2
 800202c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	69ba      	ldr	r2, [r7, #24]
 8002032:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800203c:	2b00      	cmp	r3, #0
 800203e:	f000 80b4 	beq.w	80021aa <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002042:	2300      	movs	r3, #0
 8002044:	60fb      	str	r3, [r7, #12]
 8002046:	4b60      	ldr	r3, [pc, #384]	; (80021c8 <HAL_GPIO_Init+0x30c>)
 8002048:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800204a:	4a5f      	ldr	r2, [pc, #380]	; (80021c8 <HAL_GPIO_Init+0x30c>)
 800204c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002050:	6453      	str	r3, [r2, #68]	; 0x44
 8002052:	4b5d      	ldr	r3, [pc, #372]	; (80021c8 <HAL_GPIO_Init+0x30c>)
 8002054:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002056:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800205a:	60fb      	str	r3, [r7, #12]
 800205c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800205e:	4a5b      	ldr	r2, [pc, #364]	; (80021cc <HAL_GPIO_Init+0x310>)
 8002060:	69fb      	ldr	r3, [r7, #28]
 8002062:	089b      	lsrs	r3, r3, #2
 8002064:	3302      	adds	r3, #2
 8002066:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800206a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800206c:	69fb      	ldr	r3, [r7, #28]
 800206e:	f003 0303 	and.w	r3, r3, #3
 8002072:	009b      	lsls	r3, r3, #2
 8002074:	220f      	movs	r2, #15
 8002076:	fa02 f303 	lsl.w	r3, r2, r3
 800207a:	43db      	mvns	r3, r3
 800207c:	69ba      	ldr	r2, [r7, #24]
 800207e:	4013      	ands	r3, r2
 8002080:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	4a52      	ldr	r2, [pc, #328]	; (80021d0 <HAL_GPIO_Init+0x314>)
 8002086:	4293      	cmp	r3, r2
 8002088:	d02b      	beq.n	80020e2 <HAL_GPIO_Init+0x226>
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	4a51      	ldr	r2, [pc, #324]	; (80021d4 <HAL_GPIO_Init+0x318>)
 800208e:	4293      	cmp	r3, r2
 8002090:	d025      	beq.n	80020de <HAL_GPIO_Init+0x222>
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	4a50      	ldr	r2, [pc, #320]	; (80021d8 <HAL_GPIO_Init+0x31c>)
 8002096:	4293      	cmp	r3, r2
 8002098:	d01f      	beq.n	80020da <HAL_GPIO_Init+0x21e>
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	4a4f      	ldr	r2, [pc, #316]	; (80021dc <HAL_GPIO_Init+0x320>)
 800209e:	4293      	cmp	r3, r2
 80020a0:	d019      	beq.n	80020d6 <HAL_GPIO_Init+0x21a>
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	4a4e      	ldr	r2, [pc, #312]	; (80021e0 <HAL_GPIO_Init+0x324>)
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d013      	beq.n	80020d2 <HAL_GPIO_Init+0x216>
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	4a4d      	ldr	r2, [pc, #308]	; (80021e4 <HAL_GPIO_Init+0x328>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d00d      	beq.n	80020ce <HAL_GPIO_Init+0x212>
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	4a4c      	ldr	r2, [pc, #304]	; (80021e8 <HAL_GPIO_Init+0x32c>)
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d007      	beq.n	80020ca <HAL_GPIO_Init+0x20e>
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	4a4b      	ldr	r2, [pc, #300]	; (80021ec <HAL_GPIO_Init+0x330>)
 80020be:	4293      	cmp	r3, r2
 80020c0:	d101      	bne.n	80020c6 <HAL_GPIO_Init+0x20a>
 80020c2:	2307      	movs	r3, #7
 80020c4:	e00e      	b.n	80020e4 <HAL_GPIO_Init+0x228>
 80020c6:	2308      	movs	r3, #8
 80020c8:	e00c      	b.n	80020e4 <HAL_GPIO_Init+0x228>
 80020ca:	2306      	movs	r3, #6
 80020cc:	e00a      	b.n	80020e4 <HAL_GPIO_Init+0x228>
 80020ce:	2305      	movs	r3, #5
 80020d0:	e008      	b.n	80020e4 <HAL_GPIO_Init+0x228>
 80020d2:	2304      	movs	r3, #4
 80020d4:	e006      	b.n	80020e4 <HAL_GPIO_Init+0x228>
 80020d6:	2303      	movs	r3, #3
 80020d8:	e004      	b.n	80020e4 <HAL_GPIO_Init+0x228>
 80020da:	2302      	movs	r3, #2
 80020dc:	e002      	b.n	80020e4 <HAL_GPIO_Init+0x228>
 80020de:	2301      	movs	r3, #1
 80020e0:	e000      	b.n	80020e4 <HAL_GPIO_Init+0x228>
 80020e2:	2300      	movs	r3, #0
 80020e4:	69fa      	ldr	r2, [r7, #28]
 80020e6:	f002 0203 	and.w	r2, r2, #3
 80020ea:	0092      	lsls	r2, r2, #2
 80020ec:	4093      	lsls	r3, r2
 80020ee:	69ba      	ldr	r2, [r7, #24]
 80020f0:	4313      	orrs	r3, r2
 80020f2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80020f4:	4935      	ldr	r1, [pc, #212]	; (80021cc <HAL_GPIO_Init+0x310>)
 80020f6:	69fb      	ldr	r3, [r7, #28]
 80020f8:	089b      	lsrs	r3, r3, #2
 80020fa:	3302      	adds	r3, #2
 80020fc:	69ba      	ldr	r2, [r7, #24]
 80020fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002102:	4b3b      	ldr	r3, [pc, #236]	; (80021f0 <HAL_GPIO_Init+0x334>)
 8002104:	689b      	ldr	r3, [r3, #8]
 8002106:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002108:	693b      	ldr	r3, [r7, #16]
 800210a:	43db      	mvns	r3, r3
 800210c:	69ba      	ldr	r2, [r7, #24]
 800210e:	4013      	ands	r3, r2
 8002110:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	685b      	ldr	r3, [r3, #4]
 8002116:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800211a:	2b00      	cmp	r3, #0
 800211c:	d003      	beq.n	8002126 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800211e:	69ba      	ldr	r2, [r7, #24]
 8002120:	693b      	ldr	r3, [r7, #16]
 8002122:	4313      	orrs	r3, r2
 8002124:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002126:	4a32      	ldr	r2, [pc, #200]	; (80021f0 <HAL_GPIO_Init+0x334>)
 8002128:	69bb      	ldr	r3, [r7, #24]
 800212a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800212c:	4b30      	ldr	r3, [pc, #192]	; (80021f0 <HAL_GPIO_Init+0x334>)
 800212e:	68db      	ldr	r3, [r3, #12]
 8002130:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002132:	693b      	ldr	r3, [r7, #16]
 8002134:	43db      	mvns	r3, r3
 8002136:	69ba      	ldr	r2, [r7, #24]
 8002138:	4013      	ands	r3, r2
 800213a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	685b      	ldr	r3, [r3, #4]
 8002140:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002144:	2b00      	cmp	r3, #0
 8002146:	d003      	beq.n	8002150 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002148:	69ba      	ldr	r2, [r7, #24]
 800214a:	693b      	ldr	r3, [r7, #16]
 800214c:	4313      	orrs	r3, r2
 800214e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002150:	4a27      	ldr	r2, [pc, #156]	; (80021f0 <HAL_GPIO_Init+0x334>)
 8002152:	69bb      	ldr	r3, [r7, #24]
 8002154:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002156:	4b26      	ldr	r3, [pc, #152]	; (80021f0 <HAL_GPIO_Init+0x334>)
 8002158:	685b      	ldr	r3, [r3, #4]
 800215a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800215c:	693b      	ldr	r3, [r7, #16]
 800215e:	43db      	mvns	r3, r3
 8002160:	69ba      	ldr	r2, [r7, #24]
 8002162:	4013      	ands	r3, r2
 8002164:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	685b      	ldr	r3, [r3, #4]
 800216a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800216e:	2b00      	cmp	r3, #0
 8002170:	d003      	beq.n	800217a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002172:	69ba      	ldr	r2, [r7, #24]
 8002174:	693b      	ldr	r3, [r7, #16]
 8002176:	4313      	orrs	r3, r2
 8002178:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800217a:	4a1d      	ldr	r2, [pc, #116]	; (80021f0 <HAL_GPIO_Init+0x334>)
 800217c:	69bb      	ldr	r3, [r7, #24]
 800217e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002180:	4b1b      	ldr	r3, [pc, #108]	; (80021f0 <HAL_GPIO_Init+0x334>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002186:	693b      	ldr	r3, [r7, #16]
 8002188:	43db      	mvns	r3, r3
 800218a:	69ba      	ldr	r2, [r7, #24]
 800218c:	4013      	ands	r3, r2
 800218e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	685b      	ldr	r3, [r3, #4]
 8002194:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002198:	2b00      	cmp	r3, #0
 800219a:	d003      	beq.n	80021a4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800219c:	69ba      	ldr	r2, [r7, #24]
 800219e:	693b      	ldr	r3, [r7, #16]
 80021a0:	4313      	orrs	r3, r2
 80021a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80021a4:	4a12      	ldr	r2, [pc, #72]	; (80021f0 <HAL_GPIO_Init+0x334>)
 80021a6:	69bb      	ldr	r3, [r7, #24]
 80021a8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80021aa:	69fb      	ldr	r3, [r7, #28]
 80021ac:	3301      	adds	r3, #1
 80021ae:	61fb      	str	r3, [r7, #28]
 80021b0:	69fb      	ldr	r3, [r7, #28]
 80021b2:	2b0f      	cmp	r3, #15
 80021b4:	f67f ae90 	bls.w	8001ed8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80021b8:	bf00      	nop
 80021ba:	bf00      	nop
 80021bc:	3724      	adds	r7, #36	; 0x24
 80021be:	46bd      	mov	sp, r7
 80021c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c4:	4770      	bx	lr
 80021c6:	bf00      	nop
 80021c8:	40023800 	.word	0x40023800
 80021cc:	40013800 	.word	0x40013800
 80021d0:	40020000 	.word	0x40020000
 80021d4:	40020400 	.word	0x40020400
 80021d8:	40020800 	.word	0x40020800
 80021dc:	40020c00 	.word	0x40020c00
 80021e0:	40021000 	.word	0x40021000
 80021e4:	40021400 	.word	0x40021400
 80021e8:	40021800 	.word	0x40021800
 80021ec:	40021c00 	.word	0x40021c00
 80021f0:	40013c00 	.word	0x40013c00

080021f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021f4:	b480      	push	{r7}
 80021f6:	b083      	sub	sp, #12
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
 80021fc:	460b      	mov	r3, r1
 80021fe:	807b      	strh	r3, [r7, #2]
 8002200:	4613      	mov	r3, r2
 8002202:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002204:	787b      	ldrb	r3, [r7, #1]
 8002206:	2b00      	cmp	r3, #0
 8002208:	d003      	beq.n	8002212 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800220a:	887a      	ldrh	r2, [r7, #2]
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002210:	e003      	b.n	800221a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002212:	887b      	ldrh	r3, [r7, #2]
 8002214:	041a      	lsls	r2, r3, #16
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	619a      	str	r2, [r3, #24]
}
 800221a:	bf00      	nop
 800221c:	370c      	adds	r7, #12
 800221e:	46bd      	mov	sp, r7
 8002220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002224:	4770      	bx	lr

08002226 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002226:	b480      	push	{r7}
 8002228:	b085      	sub	sp, #20
 800222a:	af00      	add	r7, sp, #0
 800222c:	6078      	str	r0, [r7, #4]
 800222e:	460b      	mov	r3, r1
 8002230:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	695b      	ldr	r3, [r3, #20]
 8002236:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002238:	887a      	ldrh	r2, [r7, #2]
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	4013      	ands	r3, r2
 800223e:	041a      	lsls	r2, r3, #16
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	43d9      	mvns	r1, r3
 8002244:	887b      	ldrh	r3, [r7, #2]
 8002246:	400b      	ands	r3, r1
 8002248:	431a      	orrs	r2, r3
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	619a      	str	r2, [r3, #24]
}
 800224e:	bf00      	nop
 8002250:	3714      	adds	r7, #20
 8002252:	46bd      	mov	sp, r7
 8002254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002258:	4770      	bx	lr
	...

0800225c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b082      	sub	sp, #8
 8002260:	af00      	add	r7, sp, #0
 8002262:	4603      	mov	r3, r0
 8002264:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002266:	4b08      	ldr	r3, [pc, #32]	; (8002288 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002268:	695a      	ldr	r2, [r3, #20]
 800226a:	88fb      	ldrh	r3, [r7, #6]
 800226c:	4013      	ands	r3, r2
 800226e:	2b00      	cmp	r3, #0
 8002270:	d006      	beq.n	8002280 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002272:	4a05      	ldr	r2, [pc, #20]	; (8002288 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002274:	88fb      	ldrh	r3, [r7, #6]
 8002276:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002278:	88fb      	ldrh	r3, [r7, #6]
 800227a:	4618      	mov	r0, r3
 800227c:	f000 f806 	bl	800228c <HAL_GPIO_EXTI_Callback>
  }
}
 8002280:	bf00      	nop
 8002282:	3708      	adds	r7, #8
 8002284:	46bd      	mov	sp, r7
 8002286:	bd80      	pop	{r7, pc}
 8002288:	40013c00 	.word	0x40013c00

0800228c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800228c:	b480      	push	{r7}
 800228e:	b083      	sub	sp, #12
 8002290:	af00      	add	r7, sp, #0
 8002292:	4603      	mov	r3, r0
 8002294:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002296:	bf00      	nop
 8002298:	370c      	adds	r7, #12
 800229a:	46bd      	mov	sp, r7
 800229c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a0:	4770      	bx	lr
	...

080022a4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b086      	sub	sp, #24
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d101      	bne.n	80022b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80022b2:	2301      	movs	r3, #1
 80022b4:	e267      	b.n	8002786 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f003 0301 	and.w	r3, r3, #1
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d075      	beq.n	80023ae <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80022c2:	4b88      	ldr	r3, [pc, #544]	; (80024e4 <HAL_RCC_OscConfig+0x240>)
 80022c4:	689b      	ldr	r3, [r3, #8]
 80022c6:	f003 030c 	and.w	r3, r3, #12
 80022ca:	2b04      	cmp	r3, #4
 80022cc:	d00c      	beq.n	80022e8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80022ce:	4b85      	ldr	r3, [pc, #532]	; (80024e4 <HAL_RCC_OscConfig+0x240>)
 80022d0:	689b      	ldr	r3, [r3, #8]
 80022d2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80022d6:	2b08      	cmp	r3, #8
 80022d8:	d112      	bne.n	8002300 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80022da:	4b82      	ldr	r3, [pc, #520]	; (80024e4 <HAL_RCC_OscConfig+0x240>)
 80022dc:	685b      	ldr	r3, [r3, #4]
 80022de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022e2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80022e6:	d10b      	bne.n	8002300 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022e8:	4b7e      	ldr	r3, [pc, #504]	; (80024e4 <HAL_RCC_OscConfig+0x240>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d05b      	beq.n	80023ac <HAL_RCC_OscConfig+0x108>
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	685b      	ldr	r3, [r3, #4]
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d157      	bne.n	80023ac <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80022fc:	2301      	movs	r3, #1
 80022fe:	e242      	b.n	8002786 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	685b      	ldr	r3, [r3, #4]
 8002304:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002308:	d106      	bne.n	8002318 <HAL_RCC_OscConfig+0x74>
 800230a:	4b76      	ldr	r3, [pc, #472]	; (80024e4 <HAL_RCC_OscConfig+0x240>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	4a75      	ldr	r2, [pc, #468]	; (80024e4 <HAL_RCC_OscConfig+0x240>)
 8002310:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002314:	6013      	str	r3, [r2, #0]
 8002316:	e01d      	b.n	8002354 <HAL_RCC_OscConfig+0xb0>
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002320:	d10c      	bne.n	800233c <HAL_RCC_OscConfig+0x98>
 8002322:	4b70      	ldr	r3, [pc, #448]	; (80024e4 <HAL_RCC_OscConfig+0x240>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	4a6f      	ldr	r2, [pc, #444]	; (80024e4 <HAL_RCC_OscConfig+0x240>)
 8002328:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800232c:	6013      	str	r3, [r2, #0]
 800232e:	4b6d      	ldr	r3, [pc, #436]	; (80024e4 <HAL_RCC_OscConfig+0x240>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	4a6c      	ldr	r2, [pc, #432]	; (80024e4 <HAL_RCC_OscConfig+0x240>)
 8002334:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002338:	6013      	str	r3, [r2, #0]
 800233a:	e00b      	b.n	8002354 <HAL_RCC_OscConfig+0xb0>
 800233c:	4b69      	ldr	r3, [pc, #420]	; (80024e4 <HAL_RCC_OscConfig+0x240>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4a68      	ldr	r2, [pc, #416]	; (80024e4 <HAL_RCC_OscConfig+0x240>)
 8002342:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002346:	6013      	str	r3, [r2, #0]
 8002348:	4b66      	ldr	r3, [pc, #408]	; (80024e4 <HAL_RCC_OscConfig+0x240>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	4a65      	ldr	r2, [pc, #404]	; (80024e4 <HAL_RCC_OscConfig+0x240>)
 800234e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002352:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	2b00      	cmp	r3, #0
 800235a:	d013      	beq.n	8002384 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800235c:	f7fe fd9c 	bl	8000e98 <HAL_GetTick>
 8002360:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002362:	e008      	b.n	8002376 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002364:	f7fe fd98 	bl	8000e98 <HAL_GetTick>
 8002368:	4602      	mov	r2, r0
 800236a:	693b      	ldr	r3, [r7, #16]
 800236c:	1ad3      	subs	r3, r2, r3
 800236e:	2b64      	cmp	r3, #100	; 0x64
 8002370:	d901      	bls.n	8002376 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002372:	2303      	movs	r3, #3
 8002374:	e207      	b.n	8002786 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002376:	4b5b      	ldr	r3, [pc, #364]	; (80024e4 <HAL_RCC_OscConfig+0x240>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800237e:	2b00      	cmp	r3, #0
 8002380:	d0f0      	beq.n	8002364 <HAL_RCC_OscConfig+0xc0>
 8002382:	e014      	b.n	80023ae <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002384:	f7fe fd88 	bl	8000e98 <HAL_GetTick>
 8002388:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800238a:	e008      	b.n	800239e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800238c:	f7fe fd84 	bl	8000e98 <HAL_GetTick>
 8002390:	4602      	mov	r2, r0
 8002392:	693b      	ldr	r3, [r7, #16]
 8002394:	1ad3      	subs	r3, r2, r3
 8002396:	2b64      	cmp	r3, #100	; 0x64
 8002398:	d901      	bls.n	800239e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800239a:	2303      	movs	r3, #3
 800239c:	e1f3      	b.n	8002786 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800239e:	4b51      	ldr	r3, [pc, #324]	; (80024e4 <HAL_RCC_OscConfig+0x240>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d1f0      	bne.n	800238c <HAL_RCC_OscConfig+0xe8>
 80023aa:	e000      	b.n	80023ae <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f003 0302 	and.w	r3, r3, #2
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d063      	beq.n	8002482 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80023ba:	4b4a      	ldr	r3, [pc, #296]	; (80024e4 <HAL_RCC_OscConfig+0x240>)
 80023bc:	689b      	ldr	r3, [r3, #8]
 80023be:	f003 030c 	and.w	r3, r3, #12
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d00b      	beq.n	80023de <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80023c6:	4b47      	ldr	r3, [pc, #284]	; (80024e4 <HAL_RCC_OscConfig+0x240>)
 80023c8:	689b      	ldr	r3, [r3, #8]
 80023ca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80023ce:	2b08      	cmp	r3, #8
 80023d0:	d11c      	bne.n	800240c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80023d2:	4b44      	ldr	r3, [pc, #272]	; (80024e4 <HAL_RCC_OscConfig+0x240>)
 80023d4:	685b      	ldr	r3, [r3, #4]
 80023d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d116      	bne.n	800240c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023de:	4b41      	ldr	r3, [pc, #260]	; (80024e4 <HAL_RCC_OscConfig+0x240>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f003 0302 	and.w	r3, r3, #2
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d005      	beq.n	80023f6 <HAL_RCC_OscConfig+0x152>
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	68db      	ldr	r3, [r3, #12]
 80023ee:	2b01      	cmp	r3, #1
 80023f0:	d001      	beq.n	80023f6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80023f2:	2301      	movs	r3, #1
 80023f4:	e1c7      	b.n	8002786 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023f6:	4b3b      	ldr	r3, [pc, #236]	; (80024e4 <HAL_RCC_OscConfig+0x240>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	691b      	ldr	r3, [r3, #16]
 8002402:	00db      	lsls	r3, r3, #3
 8002404:	4937      	ldr	r1, [pc, #220]	; (80024e4 <HAL_RCC_OscConfig+0x240>)
 8002406:	4313      	orrs	r3, r2
 8002408:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800240a:	e03a      	b.n	8002482 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	68db      	ldr	r3, [r3, #12]
 8002410:	2b00      	cmp	r3, #0
 8002412:	d020      	beq.n	8002456 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002414:	4b34      	ldr	r3, [pc, #208]	; (80024e8 <HAL_RCC_OscConfig+0x244>)
 8002416:	2201      	movs	r2, #1
 8002418:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800241a:	f7fe fd3d 	bl	8000e98 <HAL_GetTick>
 800241e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002420:	e008      	b.n	8002434 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002422:	f7fe fd39 	bl	8000e98 <HAL_GetTick>
 8002426:	4602      	mov	r2, r0
 8002428:	693b      	ldr	r3, [r7, #16]
 800242a:	1ad3      	subs	r3, r2, r3
 800242c:	2b02      	cmp	r3, #2
 800242e:	d901      	bls.n	8002434 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002430:	2303      	movs	r3, #3
 8002432:	e1a8      	b.n	8002786 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002434:	4b2b      	ldr	r3, [pc, #172]	; (80024e4 <HAL_RCC_OscConfig+0x240>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f003 0302 	and.w	r3, r3, #2
 800243c:	2b00      	cmp	r3, #0
 800243e:	d0f0      	beq.n	8002422 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002440:	4b28      	ldr	r3, [pc, #160]	; (80024e4 <HAL_RCC_OscConfig+0x240>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	691b      	ldr	r3, [r3, #16]
 800244c:	00db      	lsls	r3, r3, #3
 800244e:	4925      	ldr	r1, [pc, #148]	; (80024e4 <HAL_RCC_OscConfig+0x240>)
 8002450:	4313      	orrs	r3, r2
 8002452:	600b      	str	r3, [r1, #0]
 8002454:	e015      	b.n	8002482 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002456:	4b24      	ldr	r3, [pc, #144]	; (80024e8 <HAL_RCC_OscConfig+0x244>)
 8002458:	2200      	movs	r2, #0
 800245a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800245c:	f7fe fd1c 	bl	8000e98 <HAL_GetTick>
 8002460:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002462:	e008      	b.n	8002476 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002464:	f7fe fd18 	bl	8000e98 <HAL_GetTick>
 8002468:	4602      	mov	r2, r0
 800246a:	693b      	ldr	r3, [r7, #16]
 800246c:	1ad3      	subs	r3, r2, r3
 800246e:	2b02      	cmp	r3, #2
 8002470:	d901      	bls.n	8002476 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002472:	2303      	movs	r3, #3
 8002474:	e187      	b.n	8002786 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002476:	4b1b      	ldr	r3, [pc, #108]	; (80024e4 <HAL_RCC_OscConfig+0x240>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f003 0302 	and.w	r3, r3, #2
 800247e:	2b00      	cmp	r3, #0
 8002480:	d1f0      	bne.n	8002464 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f003 0308 	and.w	r3, r3, #8
 800248a:	2b00      	cmp	r3, #0
 800248c:	d036      	beq.n	80024fc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	695b      	ldr	r3, [r3, #20]
 8002492:	2b00      	cmp	r3, #0
 8002494:	d016      	beq.n	80024c4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002496:	4b15      	ldr	r3, [pc, #84]	; (80024ec <HAL_RCC_OscConfig+0x248>)
 8002498:	2201      	movs	r2, #1
 800249a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800249c:	f7fe fcfc 	bl	8000e98 <HAL_GetTick>
 80024a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024a2:	e008      	b.n	80024b6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80024a4:	f7fe fcf8 	bl	8000e98 <HAL_GetTick>
 80024a8:	4602      	mov	r2, r0
 80024aa:	693b      	ldr	r3, [r7, #16]
 80024ac:	1ad3      	subs	r3, r2, r3
 80024ae:	2b02      	cmp	r3, #2
 80024b0:	d901      	bls.n	80024b6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80024b2:	2303      	movs	r3, #3
 80024b4:	e167      	b.n	8002786 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024b6:	4b0b      	ldr	r3, [pc, #44]	; (80024e4 <HAL_RCC_OscConfig+0x240>)
 80024b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80024ba:	f003 0302 	and.w	r3, r3, #2
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d0f0      	beq.n	80024a4 <HAL_RCC_OscConfig+0x200>
 80024c2:	e01b      	b.n	80024fc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80024c4:	4b09      	ldr	r3, [pc, #36]	; (80024ec <HAL_RCC_OscConfig+0x248>)
 80024c6:	2200      	movs	r2, #0
 80024c8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024ca:	f7fe fce5 	bl	8000e98 <HAL_GetTick>
 80024ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024d0:	e00e      	b.n	80024f0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80024d2:	f7fe fce1 	bl	8000e98 <HAL_GetTick>
 80024d6:	4602      	mov	r2, r0
 80024d8:	693b      	ldr	r3, [r7, #16]
 80024da:	1ad3      	subs	r3, r2, r3
 80024dc:	2b02      	cmp	r3, #2
 80024de:	d907      	bls.n	80024f0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80024e0:	2303      	movs	r3, #3
 80024e2:	e150      	b.n	8002786 <HAL_RCC_OscConfig+0x4e2>
 80024e4:	40023800 	.word	0x40023800
 80024e8:	42470000 	.word	0x42470000
 80024ec:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024f0:	4b88      	ldr	r3, [pc, #544]	; (8002714 <HAL_RCC_OscConfig+0x470>)
 80024f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80024f4:	f003 0302 	and.w	r3, r3, #2
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d1ea      	bne.n	80024d2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f003 0304 	and.w	r3, r3, #4
 8002504:	2b00      	cmp	r3, #0
 8002506:	f000 8097 	beq.w	8002638 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800250a:	2300      	movs	r3, #0
 800250c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800250e:	4b81      	ldr	r3, [pc, #516]	; (8002714 <HAL_RCC_OscConfig+0x470>)
 8002510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002512:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002516:	2b00      	cmp	r3, #0
 8002518:	d10f      	bne.n	800253a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800251a:	2300      	movs	r3, #0
 800251c:	60bb      	str	r3, [r7, #8]
 800251e:	4b7d      	ldr	r3, [pc, #500]	; (8002714 <HAL_RCC_OscConfig+0x470>)
 8002520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002522:	4a7c      	ldr	r2, [pc, #496]	; (8002714 <HAL_RCC_OscConfig+0x470>)
 8002524:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002528:	6413      	str	r3, [r2, #64]	; 0x40
 800252a:	4b7a      	ldr	r3, [pc, #488]	; (8002714 <HAL_RCC_OscConfig+0x470>)
 800252c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800252e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002532:	60bb      	str	r3, [r7, #8]
 8002534:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002536:	2301      	movs	r3, #1
 8002538:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800253a:	4b77      	ldr	r3, [pc, #476]	; (8002718 <HAL_RCC_OscConfig+0x474>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002542:	2b00      	cmp	r3, #0
 8002544:	d118      	bne.n	8002578 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002546:	4b74      	ldr	r3, [pc, #464]	; (8002718 <HAL_RCC_OscConfig+0x474>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	4a73      	ldr	r2, [pc, #460]	; (8002718 <HAL_RCC_OscConfig+0x474>)
 800254c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002550:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002552:	f7fe fca1 	bl	8000e98 <HAL_GetTick>
 8002556:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002558:	e008      	b.n	800256c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800255a:	f7fe fc9d 	bl	8000e98 <HAL_GetTick>
 800255e:	4602      	mov	r2, r0
 8002560:	693b      	ldr	r3, [r7, #16]
 8002562:	1ad3      	subs	r3, r2, r3
 8002564:	2b02      	cmp	r3, #2
 8002566:	d901      	bls.n	800256c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002568:	2303      	movs	r3, #3
 800256a:	e10c      	b.n	8002786 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800256c:	4b6a      	ldr	r3, [pc, #424]	; (8002718 <HAL_RCC_OscConfig+0x474>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002574:	2b00      	cmp	r3, #0
 8002576:	d0f0      	beq.n	800255a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	689b      	ldr	r3, [r3, #8]
 800257c:	2b01      	cmp	r3, #1
 800257e:	d106      	bne.n	800258e <HAL_RCC_OscConfig+0x2ea>
 8002580:	4b64      	ldr	r3, [pc, #400]	; (8002714 <HAL_RCC_OscConfig+0x470>)
 8002582:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002584:	4a63      	ldr	r2, [pc, #396]	; (8002714 <HAL_RCC_OscConfig+0x470>)
 8002586:	f043 0301 	orr.w	r3, r3, #1
 800258a:	6713      	str	r3, [r2, #112]	; 0x70
 800258c:	e01c      	b.n	80025c8 <HAL_RCC_OscConfig+0x324>
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	689b      	ldr	r3, [r3, #8]
 8002592:	2b05      	cmp	r3, #5
 8002594:	d10c      	bne.n	80025b0 <HAL_RCC_OscConfig+0x30c>
 8002596:	4b5f      	ldr	r3, [pc, #380]	; (8002714 <HAL_RCC_OscConfig+0x470>)
 8002598:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800259a:	4a5e      	ldr	r2, [pc, #376]	; (8002714 <HAL_RCC_OscConfig+0x470>)
 800259c:	f043 0304 	orr.w	r3, r3, #4
 80025a0:	6713      	str	r3, [r2, #112]	; 0x70
 80025a2:	4b5c      	ldr	r3, [pc, #368]	; (8002714 <HAL_RCC_OscConfig+0x470>)
 80025a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025a6:	4a5b      	ldr	r2, [pc, #364]	; (8002714 <HAL_RCC_OscConfig+0x470>)
 80025a8:	f043 0301 	orr.w	r3, r3, #1
 80025ac:	6713      	str	r3, [r2, #112]	; 0x70
 80025ae:	e00b      	b.n	80025c8 <HAL_RCC_OscConfig+0x324>
 80025b0:	4b58      	ldr	r3, [pc, #352]	; (8002714 <HAL_RCC_OscConfig+0x470>)
 80025b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025b4:	4a57      	ldr	r2, [pc, #348]	; (8002714 <HAL_RCC_OscConfig+0x470>)
 80025b6:	f023 0301 	bic.w	r3, r3, #1
 80025ba:	6713      	str	r3, [r2, #112]	; 0x70
 80025bc:	4b55      	ldr	r3, [pc, #340]	; (8002714 <HAL_RCC_OscConfig+0x470>)
 80025be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025c0:	4a54      	ldr	r2, [pc, #336]	; (8002714 <HAL_RCC_OscConfig+0x470>)
 80025c2:	f023 0304 	bic.w	r3, r3, #4
 80025c6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	689b      	ldr	r3, [r3, #8]
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d015      	beq.n	80025fc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025d0:	f7fe fc62 	bl	8000e98 <HAL_GetTick>
 80025d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025d6:	e00a      	b.n	80025ee <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80025d8:	f7fe fc5e 	bl	8000e98 <HAL_GetTick>
 80025dc:	4602      	mov	r2, r0
 80025de:	693b      	ldr	r3, [r7, #16]
 80025e0:	1ad3      	subs	r3, r2, r3
 80025e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d901      	bls.n	80025ee <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80025ea:	2303      	movs	r3, #3
 80025ec:	e0cb      	b.n	8002786 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025ee:	4b49      	ldr	r3, [pc, #292]	; (8002714 <HAL_RCC_OscConfig+0x470>)
 80025f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025f2:	f003 0302 	and.w	r3, r3, #2
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d0ee      	beq.n	80025d8 <HAL_RCC_OscConfig+0x334>
 80025fa:	e014      	b.n	8002626 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025fc:	f7fe fc4c 	bl	8000e98 <HAL_GetTick>
 8002600:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002602:	e00a      	b.n	800261a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002604:	f7fe fc48 	bl	8000e98 <HAL_GetTick>
 8002608:	4602      	mov	r2, r0
 800260a:	693b      	ldr	r3, [r7, #16]
 800260c:	1ad3      	subs	r3, r2, r3
 800260e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002612:	4293      	cmp	r3, r2
 8002614:	d901      	bls.n	800261a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002616:	2303      	movs	r3, #3
 8002618:	e0b5      	b.n	8002786 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800261a:	4b3e      	ldr	r3, [pc, #248]	; (8002714 <HAL_RCC_OscConfig+0x470>)
 800261c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800261e:	f003 0302 	and.w	r3, r3, #2
 8002622:	2b00      	cmp	r3, #0
 8002624:	d1ee      	bne.n	8002604 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002626:	7dfb      	ldrb	r3, [r7, #23]
 8002628:	2b01      	cmp	r3, #1
 800262a:	d105      	bne.n	8002638 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800262c:	4b39      	ldr	r3, [pc, #228]	; (8002714 <HAL_RCC_OscConfig+0x470>)
 800262e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002630:	4a38      	ldr	r2, [pc, #224]	; (8002714 <HAL_RCC_OscConfig+0x470>)
 8002632:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002636:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	699b      	ldr	r3, [r3, #24]
 800263c:	2b00      	cmp	r3, #0
 800263e:	f000 80a1 	beq.w	8002784 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002642:	4b34      	ldr	r3, [pc, #208]	; (8002714 <HAL_RCC_OscConfig+0x470>)
 8002644:	689b      	ldr	r3, [r3, #8]
 8002646:	f003 030c 	and.w	r3, r3, #12
 800264a:	2b08      	cmp	r3, #8
 800264c:	d05c      	beq.n	8002708 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	699b      	ldr	r3, [r3, #24]
 8002652:	2b02      	cmp	r3, #2
 8002654:	d141      	bne.n	80026da <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002656:	4b31      	ldr	r3, [pc, #196]	; (800271c <HAL_RCC_OscConfig+0x478>)
 8002658:	2200      	movs	r2, #0
 800265a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800265c:	f7fe fc1c 	bl	8000e98 <HAL_GetTick>
 8002660:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002662:	e008      	b.n	8002676 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002664:	f7fe fc18 	bl	8000e98 <HAL_GetTick>
 8002668:	4602      	mov	r2, r0
 800266a:	693b      	ldr	r3, [r7, #16]
 800266c:	1ad3      	subs	r3, r2, r3
 800266e:	2b02      	cmp	r3, #2
 8002670:	d901      	bls.n	8002676 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002672:	2303      	movs	r3, #3
 8002674:	e087      	b.n	8002786 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002676:	4b27      	ldr	r3, [pc, #156]	; (8002714 <HAL_RCC_OscConfig+0x470>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800267e:	2b00      	cmp	r3, #0
 8002680:	d1f0      	bne.n	8002664 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	69da      	ldr	r2, [r3, #28]
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6a1b      	ldr	r3, [r3, #32]
 800268a:	431a      	orrs	r2, r3
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002690:	019b      	lsls	r3, r3, #6
 8002692:	431a      	orrs	r2, r3
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002698:	085b      	lsrs	r3, r3, #1
 800269a:	3b01      	subs	r3, #1
 800269c:	041b      	lsls	r3, r3, #16
 800269e:	431a      	orrs	r2, r3
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026a4:	061b      	lsls	r3, r3, #24
 80026a6:	491b      	ldr	r1, [pc, #108]	; (8002714 <HAL_RCC_OscConfig+0x470>)
 80026a8:	4313      	orrs	r3, r2
 80026aa:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80026ac:	4b1b      	ldr	r3, [pc, #108]	; (800271c <HAL_RCC_OscConfig+0x478>)
 80026ae:	2201      	movs	r2, #1
 80026b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026b2:	f7fe fbf1 	bl	8000e98 <HAL_GetTick>
 80026b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026b8:	e008      	b.n	80026cc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026ba:	f7fe fbed 	bl	8000e98 <HAL_GetTick>
 80026be:	4602      	mov	r2, r0
 80026c0:	693b      	ldr	r3, [r7, #16]
 80026c2:	1ad3      	subs	r3, r2, r3
 80026c4:	2b02      	cmp	r3, #2
 80026c6:	d901      	bls.n	80026cc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80026c8:	2303      	movs	r3, #3
 80026ca:	e05c      	b.n	8002786 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026cc:	4b11      	ldr	r3, [pc, #68]	; (8002714 <HAL_RCC_OscConfig+0x470>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d0f0      	beq.n	80026ba <HAL_RCC_OscConfig+0x416>
 80026d8:	e054      	b.n	8002784 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026da:	4b10      	ldr	r3, [pc, #64]	; (800271c <HAL_RCC_OscConfig+0x478>)
 80026dc:	2200      	movs	r2, #0
 80026de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026e0:	f7fe fbda 	bl	8000e98 <HAL_GetTick>
 80026e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026e6:	e008      	b.n	80026fa <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026e8:	f7fe fbd6 	bl	8000e98 <HAL_GetTick>
 80026ec:	4602      	mov	r2, r0
 80026ee:	693b      	ldr	r3, [r7, #16]
 80026f0:	1ad3      	subs	r3, r2, r3
 80026f2:	2b02      	cmp	r3, #2
 80026f4:	d901      	bls.n	80026fa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80026f6:	2303      	movs	r3, #3
 80026f8:	e045      	b.n	8002786 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026fa:	4b06      	ldr	r3, [pc, #24]	; (8002714 <HAL_RCC_OscConfig+0x470>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002702:	2b00      	cmp	r3, #0
 8002704:	d1f0      	bne.n	80026e8 <HAL_RCC_OscConfig+0x444>
 8002706:	e03d      	b.n	8002784 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	699b      	ldr	r3, [r3, #24]
 800270c:	2b01      	cmp	r3, #1
 800270e:	d107      	bne.n	8002720 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002710:	2301      	movs	r3, #1
 8002712:	e038      	b.n	8002786 <HAL_RCC_OscConfig+0x4e2>
 8002714:	40023800 	.word	0x40023800
 8002718:	40007000 	.word	0x40007000
 800271c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002720:	4b1b      	ldr	r3, [pc, #108]	; (8002790 <HAL_RCC_OscConfig+0x4ec>)
 8002722:	685b      	ldr	r3, [r3, #4]
 8002724:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	699b      	ldr	r3, [r3, #24]
 800272a:	2b01      	cmp	r3, #1
 800272c:	d028      	beq.n	8002780 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002738:	429a      	cmp	r2, r3
 800273a:	d121      	bne.n	8002780 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002746:	429a      	cmp	r2, r3
 8002748:	d11a      	bne.n	8002780 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800274a:	68fa      	ldr	r2, [r7, #12]
 800274c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002750:	4013      	ands	r3, r2
 8002752:	687a      	ldr	r2, [r7, #4]
 8002754:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002756:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002758:	4293      	cmp	r3, r2
 800275a:	d111      	bne.n	8002780 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002766:	085b      	lsrs	r3, r3, #1
 8002768:	3b01      	subs	r3, #1
 800276a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800276c:	429a      	cmp	r2, r3
 800276e:	d107      	bne.n	8002780 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800277a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800277c:	429a      	cmp	r2, r3
 800277e:	d001      	beq.n	8002784 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002780:	2301      	movs	r3, #1
 8002782:	e000      	b.n	8002786 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002784:	2300      	movs	r3, #0
}
 8002786:	4618      	mov	r0, r3
 8002788:	3718      	adds	r7, #24
 800278a:	46bd      	mov	sp, r7
 800278c:	bd80      	pop	{r7, pc}
 800278e:	bf00      	nop
 8002790:	40023800 	.word	0x40023800

08002794 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b084      	sub	sp, #16
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
 800279c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d101      	bne.n	80027a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80027a4:	2301      	movs	r3, #1
 80027a6:	e0cc      	b.n	8002942 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80027a8:	4b68      	ldr	r3, [pc, #416]	; (800294c <HAL_RCC_ClockConfig+0x1b8>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f003 0307 	and.w	r3, r3, #7
 80027b0:	683a      	ldr	r2, [r7, #0]
 80027b2:	429a      	cmp	r2, r3
 80027b4:	d90c      	bls.n	80027d0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027b6:	4b65      	ldr	r3, [pc, #404]	; (800294c <HAL_RCC_ClockConfig+0x1b8>)
 80027b8:	683a      	ldr	r2, [r7, #0]
 80027ba:	b2d2      	uxtb	r2, r2
 80027bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80027be:	4b63      	ldr	r3, [pc, #396]	; (800294c <HAL_RCC_ClockConfig+0x1b8>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f003 0307 	and.w	r3, r3, #7
 80027c6:	683a      	ldr	r2, [r7, #0]
 80027c8:	429a      	cmp	r2, r3
 80027ca:	d001      	beq.n	80027d0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80027cc:	2301      	movs	r3, #1
 80027ce:	e0b8      	b.n	8002942 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f003 0302 	and.w	r3, r3, #2
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d020      	beq.n	800281e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f003 0304 	and.w	r3, r3, #4
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d005      	beq.n	80027f4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80027e8:	4b59      	ldr	r3, [pc, #356]	; (8002950 <HAL_RCC_ClockConfig+0x1bc>)
 80027ea:	689b      	ldr	r3, [r3, #8]
 80027ec:	4a58      	ldr	r2, [pc, #352]	; (8002950 <HAL_RCC_ClockConfig+0x1bc>)
 80027ee:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80027f2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f003 0308 	and.w	r3, r3, #8
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d005      	beq.n	800280c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002800:	4b53      	ldr	r3, [pc, #332]	; (8002950 <HAL_RCC_ClockConfig+0x1bc>)
 8002802:	689b      	ldr	r3, [r3, #8]
 8002804:	4a52      	ldr	r2, [pc, #328]	; (8002950 <HAL_RCC_ClockConfig+0x1bc>)
 8002806:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800280a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800280c:	4b50      	ldr	r3, [pc, #320]	; (8002950 <HAL_RCC_ClockConfig+0x1bc>)
 800280e:	689b      	ldr	r3, [r3, #8]
 8002810:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	689b      	ldr	r3, [r3, #8]
 8002818:	494d      	ldr	r1, [pc, #308]	; (8002950 <HAL_RCC_ClockConfig+0x1bc>)
 800281a:	4313      	orrs	r3, r2
 800281c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f003 0301 	and.w	r3, r3, #1
 8002826:	2b00      	cmp	r3, #0
 8002828:	d044      	beq.n	80028b4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	685b      	ldr	r3, [r3, #4]
 800282e:	2b01      	cmp	r3, #1
 8002830:	d107      	bne.n	8002842 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002832:	4b47      	ldr	r3, [pc, #284]	; (8002950 <HAL_RCC_ClockConfig+0x1bc>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800283a:	2b00      	cmp	r3, #0
 800283c:	d119      	bne.n	8002872 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800283e:	2301      	movs	r3, #1
 8002840:	e07f      	b.n	8002942 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	685b      	ldr	r3, [r3, #4]
 8002846:	2b02      	cmp	r3, #2
 8002848:	d003      	beq.n	8002852 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800284e:	2b03      	cmp	r3, #3
 8002850:	d107      	bne.n	8002862 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002852:	4b3f      	ldr	r3, [pc, #252]	; (8002950 <HAL_RCC_ClockConfig+0x1bc>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800285a:	2b00      	cmp	r3, #0
 800285c:	d109      	bne.n	8002872 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800285e:	2301      	movs	r3, #1
 8002860:	e06f      	b.n	8002942 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002862:	4b3b      	ldr	r3, [pc, #236]	; (8002950 <HAL_RCC_ClockConfig+0x1bc>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f003 0302 	and.w	r3, r3, #2
 800286a:	2b00      	cmp	r3, #0
 800286c:	d101      	bne.n	8002872 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800286e:	2301      	movs	r3, #1
 8002870:	e067      	b.n	8002942 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002872:	4b37      	ldr	r3, [pc, #220]	; (8002950 <HAL_RCC_ClockConfig+0x1bc>)
 8002874:	689b      	ldr	r3, [r3, #8]
 8002876:	f023 0203 	bic.w	r2, r3, #3
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	685b      	ldr	r3, [r3, #4]
 800287e:	4934      	ldr	r1, [pc, #208]	; (8002950 <HAL_RCC_ClockConfig+0x1bc>)
 8002880:	4313      	orrs	r3, r2
 8002882:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002884:	f7fe fb08 	bl	8000e98 <HAL_GetTick>
 8002888:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800288a:	e00a      	b.n	80028a2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800288c:	f7fe fb04 	bl	8000e98 <HAL_GetTick>
 8002890:	4602      	mov	r2, r0
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	1ad3      	subs	r3, r2, r3
 8002896:	f241 3288 	movw	r2, #5000	; 0x1388
 800289a:	4293      	cmp	r3, r2
 800289c:	d901      	bls.n	80028a2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800289e:	2303      	movs	r3, #3
 80028a0:	e04f      	b.n	8002942 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028a2:	4b2b      	ldr	r3, [pc, #172]	; (8002950 <HAL_RCC_ClockConfig+0x1bc>)
 80028a4:	689b      	ldr	r3, [r3, #8]
 80028a6:	f003 020c 	and.w	r2, r3, #12
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	685b      	ldr	r3, [r3, #4]
 80028ae:	009b      	lsls	r3, r3, #2
 80028b0:	429a      	cmp	r2, r3
 80028b2:	d1eb      	bne.n	800288c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80028b4:	4b25      	ldr	r3, [pc, #148]	; (800294c <HAL_RCC_ClockConfig+0x1b8>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f003 0307 	and.w	r3, r3, #7
 80028bc:	683a      	ldr	r2, [r7, #0]
 80028be:	429a      	cmp	r2, r3
 80028c0:	d20c      	bcs.n	80028dc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028c2:	4b22      	ldr	r3, [pc, #136]	; (800294c <HAL_RCC_ClockConfig+0x1b8>)
 80028c4:	683a      	ldr	r2, [r7, #0]
 80028c6:	b2d2      	uxtb	r2, r2
 80028c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80028ca:	4b20      	ldr	r3, [pc, #128]	; (800294c <HAL_RCC_ClockConfig+0x1b8>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f003 0307 	and.w	r3, r3, #7
 80028d2:	683a      	ldr	r2, [r7, #0]
 80028d4:	429a      	cmp	r2, r3
 80028d6:	d001      	beq.n	80028dc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80028d8:	2301      	movs	r3, #1
 80028da:	e032      	b.n	8002942 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f003 0304 	and.w	r3, r3, #4
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d008      	beq.n	80028fa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80028e8:	4b19      	ldr	r3, [pc, #100]	; (8002950 <HAL_RCC_ClockConfig+0x1bc>)
 80028ea:	689b      	ldr	r3, [r3, #8]
 80028ec:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	68db      	ldr	r3, [r3, #12]
 80028f4:	4916      	ldr	r1, [pc, #88]	; (8002950 <HAL_RCC_ClockConfig+0x1bc>)
 80028f6:	4313      	orrs	r3, r2
 80028f8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f003 0308 	and.w	r3, r3, #8
 8002902:	2b00      	cmp	r3, #0
 8002904:	d009      	beq.n	800291a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002906:	4b12      	ldr	r3, [pc, #72]	; (8002950 <HAL_RCC_ClockConfig+0x1bc>)
 8002908:	689b      	ldr	r3, [r3, #8]
 800290a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	691b      	ldr	r3, [r3, #16]
 8002912:	00db      	lsls	r3, r3, #3
 8002914:	490e      	ldr	r1, [pc, #56]	; (8002950 <HAL_RCC_ClockConfig+0x1bc>)
 8002916:	4313      	orrs	r3, r2
 8002918:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800291a:	f000 f821 	bl	8002960 <HAL_RCC_GetSysClockFreq>
 800291e:	4602      	mov	r2, r0
 8002920:	4b0b      	ldr	r3, [pc, #44]	; (8002950 <HAL_RCC_ClockConfig+0x1bc>)
 8002922:	689b      	ldr	r3, [r3, #8]
 8002924:	091b      	lsrs	r3, r3, #4
 8002926:	f003 030f 	and.w	r3, r3, #15
 800292a:	490a      	ldr	r1, [pc, #40]	; (8002954 <HAL_RCC_ClockConfig+0x1c0>)
 800292c:	5ccb      	ldrb	r3, [r1, r3]
 800292e:	fa22 f303 	lsr.w	r3, r2, r3
 8002932:	4a09      	ldr	r2, [pc, #36]	; (8002958 <HAL_RCC_ClockConfig+0x1c4>)
 8002934:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002936:	4b09      	ldr	r3, [pc, #36]	; (800295c <HAL_RCC_ClockConfig+0x1c8>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	4618      	mov	r0, r3
 800293c:	f7fe fa68 	bl	8000e10 <HAL_InitTick>

  return HAL_OK;
 8002940:	2300      	movs	r3, #0
}
 8002942:	4618      	mov	r0, r3
 8002944:	3710      	adds	r7, #16
 8002946:	46bd      	mov	sp, r7
 8002948:	bd80      	pop	{r7, pc}
 800294a:	bf00      	nop
 800294c:	40023c00 	.word	0x40023c00
 8002950:	40023800 	.word	0x40023800
 8002954:	08003d34 	.word	0x08003d34
 8002958:	20000000 	.word	0x20000000
 800295c:	20000004 	.word	0x20000004

08002960 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002960:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002964:	b094      	sub	sp, #80	; 0x50
 8002966:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002968:	2300      	movs	r3, #0
 800296a:	647b      	str	r3, [r7, #68]	; 0x44
 800296c:	2300      	movs	r3, #0
 800296e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002970:	2300      	movs	r3, #0
 8002972:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002974:	2300      	movs	r3, #0
 8002976:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002978:	4b79      	ldr	r3, [pc, #484]	; (8002b60 <HAL_RCC_GetSysClockFreq+0x200>)
 800297a:	689b      	ldr	r3, [r3, #8]
 800297c:	f003 030c 	and.w	r3, r3, #12
 8002980:	2b08      	cmp	r3, #8
 8002982:	d00d      	beq.n	80029a0 <HAL_RCC_GetSysClockFreq+0x40>
 8002984:	2b08      	cmp	r3, #8
 8002986:	f200 80e1 	bhi.w	8002b4c <HAL_RCC_GetSysClockFreq+0x1ec>
 800298a:	2b00      	cmp	r3, #0
 800298c:	d002      	beq.n	8002994 <HAL_RCC_GetSysClockFreq+0x34>
 800298e:	2b04      	cmp	r3, #4
 8002990:	d003      	beq.n	800299a <HAL_RCC_GetSysClockFreq+0x3a>
 8002992:	e0db      	b.n	8002b4c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002994:	4b73      	ldr	r3, [pc, #460]	; (8002b64 <HAL_RCC_GetSysClockFreq+0x204>)
 8002996:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002998:	e0db      	b.n	8002b52 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800299a:	4b73      	ldr	r3, [pc, #460]	; (8002b68 <HAL_RCC_GetSysClockFreq+0x208>)
 800299c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800299e:	e0d8      	b.n	8002b52 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80029a0:	4b6f      	ldr	r3, [pc, #444]	; (8002b60 <HAL_RCC_GetSysClockFreq+0x200>)
 80029a2:	685b      	ldr	r3, [r3, #4]
 80029a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80029a8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80029aa:	4b6d      	ldr	r3, [pc, #436]	; (8002b60 <HAL_RCC_GetSysClockFreq+0x200>)
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d063      	beq.n	8002a7e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80029b6:	4b6a      	ldr	r3, [pc, #424]	; (8002b60 <HAL_RCC_GetSysClockFreq+0x200>)
 80029b8:	685b      	ldr	r3, [r3, #4]
 80029ba:	099b      	lsrs	r3, r3, #6
 80029bc:	2200      	movs	r2, #0
 80029be:	63bb      	str	r3, [r7, #56]	; 0x38
 80029c0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80029c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80029c8:	633b      	str	r3, [r7, #48]	; 0x30
 80029ca:	2300      	movs	r3, #0
 80029cc:	637b      	str	r3, [r7, #52]	; 0x34
 80029ce:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80029d2:	4622      	mov	r2, r4
 80029d4:	462b      	mov	r3, r5
 80029d6:	f04f 0000 	mov.w	r0, #0
 80029da:	f04f 0100 	mov.w	r1, #0
 80029de:	0159      	lsls	r1, r3, #5
 80029e0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80029e4:	0150      	lsls	r0, r2, #5
 80029e6:	4602      	mov	r2, r0
 80029e8:	460b      	mov	r3, r1
 80029ea:	4621      	mov	r1, r4
 80029ec:	1a51      	subs	r1, r2, r1
 80029ee:	6139      	str	r1, [r7, #16]
 80029f0:	4629      	mov	r1, r5
 80029f2:	eb63 0301 	sbc.w	r3, r3, r1
 80029f6:	617b      	str	r3, [r7, #20]
 80029f8:	f04f 0200 	mov.w	r2, #0
 80029fc:	f04f 0300 	mov.w	r3, #0
 8002a00:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002a04:	4659      	mov	r1, fp
 8002a06:	018b      	lsls	r3, r1, #6
 8002a08:	4651      	mov	r1, sl
 8002a0a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002a0e:	4651      	mov	r1, sl
 8002a10:	018a      	lsls	r2, r1, #6
 8002a12:	4651      	mov	r1, sl
 8002a14:	ebb2 0801 	subs.w	r8, r2, r1
 8002a18:	4659      	mov	r1, fp
 8002a1a:	eb63 0901 	sbc.w	r9, r3, r1
 8002a1e:	f04f 0200 	mov.w	r2, #0
 8002a22:	f04f 0300 	mov.w	r3, #0
 8002a26:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002a2a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002a2e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002a32:	4690      	mov	r8, r2
 8002a34:	4699      	mov	r9, r3
 8002a36:	4623      	mov	r3, r4
 8002a38:	eb18 0303 	adds.w	r3, r8, r3
 8002a3c:	60bb      	str	r3, [r7, #8]
 8002a3e:	462b      	mov	r3, r5
 8002a40:	eb49 0303 	adc.w	r3, r9, r3
 8002a44:	60fb      	str	r3, [r7, #12]
 8002a46:	f04f 0200 	mov.w	r2, #0
 8002a4a:	f04f 0300 	mov.w	r3, #0
 8002a4e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002a52:	4629      	mov	r1, r5
 8002a54:	024b      	lsls	r3, r1, #9
 8002a56:	4621      	mov	r1, r4
 8002a58:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002a5c:	4621      	mov	r1, r4
 8002a5e:	024a      	lsls	r2, r1, #9
 8002a60:	4610      	mov	r0, r2
 8002a62:	4619      	mov	r1, r3
 8002a64:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002a66:	2200      	movs	r2, #0
 8002a68:	62bb      	str	r3, [r7, #40]	; 0x28
 8002a6a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002a6c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002a70:	f7fd fbaa 	bl	80001c8 <__aeabi_uldivmod>
 8002a74:	4602      	mov	r2, r0
 8002a76:	460b      	mov	r3, r1
 8002a78:	4613      	mov	r3, r2
 8002a7a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002a7c:	e058      	b.n	8002b30 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a7e:	4b38      	ldr	r3, [pc, #224]	; (8002b60 <HAL_RCC_GetSysClockFreq+0x200>)
 8002a80:	685b      	ldr	r3, [r3, #4]
 8002a82:	099b      	lsrs	r3, r3, #6
 8002a84:	2200      	movs	r2, #0
 8002a86:	4618      	mov	r0, r3
 8002a88:	4611      	mov	r1, r2
 8002a8a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002a8e:	623b      	str	r3, [r7, #32]
 8002a90:	2300      	movs	r3, #0
 8002a92:	627b      	str	r3, [r7, #36]	; 0x24
 8002a94:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002a98:	4642      	mov	r2, r8
 8002a9a:	464b      	mov	r3, r9
 8002a9c:	f04f 0000 	mov.w	r0, #0
 8002aa0:	f04f 0100 	mov.w	r1, #0
 8002aa4:	0159      	lsls	r1, r3, #5
 8002aa6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002aaa:	0150      	lsls	r0, r2, #5
 8002aac:	4602      	mov	r2, r0
 8002aae:	460b      	mov	r3, r1
 8002ab0:	4641      	mov	r1, r8
 8002ab2:	ebb2 0a01 	subs.w	sl, r2, r1
 8002ab6:	4649      	mov	r1, r9
 8002ab8:	eb63 0b01 	sbc.w	fp, r3, r1
 8002abc:	f04f 0200 	mov.w	r2, #0
 8002ac0:	f04f 0300 	mov.w	r3, #0
 8002ac4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002ac8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002acc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002ad0:	ebb2 040a 	subs.w	r4, r2, sl
 8002ad4:	eb63 050b 	sbc.w	r5, r3, fp
 8002ad8:	f04f 0200 	mov.w	r2, #0
 8002adc:	f04f 0300 	mov.w	r3, #0
 8002ae0:	00eb      	lsls	r3, r5, #3
 8002ae2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002ae6:	00e2      	lsls	r2, r4, #3
 8002ae8:	4614      	mov	r4, r2
 8002aea:	461d      	mov	r5, r3
 8002aec:	4643      	mov	r3, r8
 8002aee:	18e3      	adds	r3, r4, r3
 8002af0:	603b      	str	r3, [r7, #0]
 8002af2:	464b      	mov	r3, r9
 8002af4:	eb45 0303 	adc.w	r3, r5, r3
 8002af8:	607b      	str	r3, [r7, #4]
 8002afa:	f04f 0200 	mov.w	r2, #0
 8002afe:	f04f 0300 	mov.w	r3, #0
 8002b02:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002b06:	4629      	mov	r1, r5
 8002b08:	028b      	lsls	r3, r1, #10
 8002b0a:	4621      	mov	r1, r4
 8002b0c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002b10:	4621      	mov	r1, r4
 8002b12:	028a      	lsls	r2, r1, #10
 8002b14:	4610      	mov	r0, r2
 8002b16:	4619      	mov	r1, r3
 8002b18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	61bb      	str	r3, [r7, #24]
 8002b1e:	61fa      	str	r2, [r7, #28]
 8002b20:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002b24:	f7fd fb50 	bl	80001c8 <__aeabi_uldivmod>
 8002b28:	4602      	mov	r2, r0
 8002b2a:	460b      	mov	r3, r1
 8002b2c:	4613      	mov	r3, r2
 8002b2e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002b30:	4b0b      	ldr	r3, [pc, #44]	; (8002b60 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b32:	685b      	ldr	r3, [r3, #4]
 8002b34:	0c1b      	lsrs	r3, r3, #16
 8002b36:	f003 0303 	and.w	r3, r3, #3
 8002b3a:	3301      	adds	r3, #1
 8002b3c:	005b      	lsls	r3, r3, #1
 8002b3e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002b40:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002b42:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002b44:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b48:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002b4a:	e002      	b.n	8002b52 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002b4c:	4b05      	ldr	r3, [pc, #20]	; (8002b64 <HAL_RCC_GetSysClockFreq+0x204>)
 8002b4e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002b50:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b52:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002b54:	4618      	mov	r0, r3
 8002b56:	3750      	adds	r7, #80	; 0x50
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002b5e:	bf00      	nop
 8002b60:	40023800 	.word	0x40023800
 8002b64:	00f42400 	.word	0x00f42400
 8002b68:	007a1200 	.word	0x007a1200

08002b6c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b6c:	b480      	push	{r7}
 8002b6e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b70:	4b03      	ldr	r3, [pc, #12]	; (8002b80 <HAL_RCC_GetHCLKFreq+0x14>)
 8002b72:	681b      	ldr	r3, [r3, #0]
}
 8002b74:	4618      	mov	r0, r3
 8002b76:	46bd      	mov	sp, r7
 8002b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7c:	4770      	bx	lr
 8002b7e:	bf00      	nop
 8002b80:	20000000 	.word	0x20000000

08002b84 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002b88:	f7ff fff0 	bl	8002b6c <HAL_RCC_GetHCLKFreq>
 8002b8c:	4602      	mov	r2, r0
 8002b8e:	4b05      	ldr	r3, [pc, #20]	; (8002ba4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002b90:	689b      	ldr	r3, [r3, #8]
 8002b92:	0a9b      	lsrs	r3, r3, #10
 8002b94:	f003 0307 	and.w	r3, r3, #7
 8002b98:	4903      	ldr	r1, [pc, #12]	; (8002ba8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002b9a:	5ccb      	ldrb	r3, [r1, r3]
 8002b9c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	bd80      	pop	{r7, pc}
 8002ba4:	40023800 	.word	0x40023800
 8002ba8:	08003d44 	.word	0x08003d44

08002bac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002bb0:	f7ff ffdc 	bl	8002b6c <HAL_RCC_GetHCLKFreq>
 8002bb4:	4602      	mov	r2, r0
 8002bb6:	4b05      	ldr	r3, [pc, #20]	; (8002bcc <HAL_RCC_GetPCLK2Freq+0x20>)
 8002bb8:	689b      	ldr	r3, [r3, #8]
 8002bba:	0b5b      	lsrs	r3, r3, #13
 8002bbc:	f003 0307 	and.w	r3, r3, #7
 8002bc0:	4903      	ldr	r1, [pc, #12]	; (8002bd0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002bc2:	5ccb      	ldrb	r3, [r1, r3]
 8002bc4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002bc8:	4618      	mov	r0, r3
 8002bca:	bd80      	pop	{r7, pc}
 8002bcc:	40023800 	.word	0x40023800
 8002bd0:	08003d44 	.word	0x08003d44

08002bd4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b082      	sub	sp, #8
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d101      	bne.n	8002be6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002be2:	2301      	movs	r3, #1
 8002be4:	e03f      	b.n	8002c66 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bec:	b2db      	uxtb	r3, r3
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d106      	bne.n	8002c00 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002bfa:	6878      	ldr	r0, [r7, #4]
 8002bfc:	f7fd fff2 	bl	8000be4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2224      	movs	r2, #36	; 0x24
 8002c04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	68da      	ldr	r2, [r3, #12]
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002c16:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002c18:	6878      	ldr	r0, [r7, #4]
 8002c1a:	f000 fddf 	bl	80037dc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	691a      	ldr	r2, [r3, #16]
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002c2c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	695a      	ldr	r2, [r3, #20]
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002c3c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	68da      	ldr	r2, [r3, #12]
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002c4c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	2200      	movs	r2, #0
 8002c52:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2220      	movs	r2, #32
 8002c58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2220      	movs	r2, #32
 8002c60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002c64:	2300      	movs	r3, #0
}
 8002c66:	4618      	mov	r0, r3
 8002c68:	3708      	adds	r7, #8
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	bd80      	pop	{r7, pc}

08002c6e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c6e:	b580      	push	{r7, lr}
 8002c70:	b08a      	sub	sp, #40	; 0x28
 8002c72:	af02      	add	r7, sp, #8
 8002c74:	60f8      	str	r0, [r7, #12]
 8002c76:	60b9      	str	r1, [r7, #8]
 8002c78:	603b      	str	r3, [r7, #0]
 8002c7a:	4613      	mov	r3, r2
 8002c7c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002c7e:	2300      	movs	r3, #0
 8002c80:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c88:	b2db      	uxtb	r3, r3
 8002c8a:	2b20      	cmp	r3, #32
 8002c8c:	d17c      	bne.n	8002d88 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002c8e:	68bb      	ldr	r3, [r7, #8]
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d002      	beq.n	8002c9a <HAL_UART_Transmit+0x2c>
 8002c94:	88fb      	ldrh	r3, [r7, #6]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d101      	bne.n	8002c9e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	e075      	b.n	8002d8a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ca4:	2b01      	cmp	r3, #1
 8002ca6:	d101      	bne.n	8002cac <HAL_UART_Transmit+0x3e>
 8002ca8:	2302      	movs	r3, #2
 8002caa:	e06e      	b.n	8002d8a <HAL_UART_Transmit+0x11c>
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	2201      	movs	r2, #1
 8002cb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	2221      	movs	r2, #33	; 0x21
 8002cbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002cc2:	f7fe f8e9 	bl	8000e98 <HAL_GetTick>
 8002cc6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	88fa      	ldrh	r2, [r7, #6]
 8002ccc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	88fa      	ldrh	r2, [r7, #6]
 8002cd2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	689b      	ldr	r3, [r3, #8]
 8002cd8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002cdc:	d108      	bne.n	8002cf0 <HAL_UART_Transmit+0x82>
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	691b      	ldr	r3, [r3, #16]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d104      	bne.n	8002cf0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002cea:	68bb      	ldr	r3, [r7, #8]
 8002cec:	61bb      	str	r3, [r7, #24]
 8002cee:	e003      	b.n	8002cf8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002cf0:	68bb      	ldr	r3, [r7, #8]
 8002cf2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002d00:	e02a      	b.n	8002d58 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	9300      	str	r3, [sp, #0]
 8002d06:	697b      	ldr	r3, [r7, #20]
 8002d08:	2200      	movs	r2, #0
 8002d0a:	2180      	movs	r1, #128	; 0x80
 8002d0c:	68f8      	ldr	r0, [r7, #12]
 8002d0e:	f000 fb1f 	bl	8003350 <UART_WaitOnFlagUntilTimeout>
 8002d12:	4603      	mov	r3, r0
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d001      	beq.n	8002d1c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002d18:	2303      	movs	r3, #3
 8002d1a:	e036      	b.n	8002d8a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002d1c:	69fb      	ldr	r3, [r7, #28]
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d10b      	bne.n	8002d3a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002d22:	69bb      	ldr	r3, [r7, #24]
 8002d24:	881b      	ldrh	r3, [r3, #0]
 8002d26:	461a      	mov	r2, r3
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002d30:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002d32:	69bb      	ldr	r3, [r7, #24]
 8002d34:	3302      	adds	r3, #2
 8002d36:	61bb      	str	r3, [r7, #24]
 8002d38:	e007      	b.n	8002d4a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002d3a:	69fb      	ldr	r3, [r7, #28]
 8002d3c:	781a      	ldrb	r2, [r3, #0]
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002d44:	69fb      	ldr	r3, [r7, #28]
 8002d46:	3301      	adds	r3, #1
 8002d48:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002d4e:	b29b      	uxth	r3, r3
 8002d50:	3b01      	subs	r3, #1
 8002d52:	b29a      	uxth	r2, r3
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002d5c:	b29b      	uxth	r3, r3
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d1cf      	bne.n	8002d02 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	9300      	str	r3, [sp, #0]
 8002d66:	697b      	ldr	r3, [r7, #20]
 8002d68:	2200      	movs	r2, #0
 8002d6a:	2140      	movs	r1, #64	; 0x40
 8002d6c:	68f8      	ldr	r0, [r7, #12]
 8002d6e:	f000 faef 	bl	8003350 <UART_WaitOnFlagUntilTimeout>
 8002d72:	4603      	mov	r3, r0
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d001      	beq.n	8002d7c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002d78:	2303      	movs	r3, #3
 8002d7a:	e006      	b.n	8002d8a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	2220      	movs	r2, #32
 8002d80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002d84:	2300      	movs	r3, #0
 8002d86:	e000      	b.n	8002d8a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002d88:	2302      	movs	r3, #2
  }
}
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	3720      	adds	r7, #32
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	bd80      	pop	{r7, pc}

08002d92 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002d92:	b580      	push	{r7, lr}
 8002d94:	b084      	sub	sp, #16
 8002d96:	af00      	add	r7, sp, #0
 8002d98:	60f8      	str	r0, [r7, #12]
 8002d9a:	60b9      	str	r1, [r7, #8]
 8002d9c:	4613      	mov	r3, r2
 8002d9e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002da6:	b2db      	uxtb	r3, r3
 8002da8:	2b20      	cmp	r3, #32
 8002daa:	d11d      	bne.n	8002de8 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8002dac:	68bb      	ldr	r3, [r7, #8]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d002      	beq.n	8002db8 <HAL_UART_Receive_IT+0x26>
 8002db2:	88fb      	ldrh	r3, [r7, #6]
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d101      	bne.n	8002dbc <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002db8:	2301      	movs	r3, #1
 8002dba:	e016      	b.n	8002dea <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002dc2:	2b01      	cmp	r3, #1
 8002dc4:	d101      	bne.n	8002dca <HAL_UART_Receive_IT+0x38>
 8002dc6:	2302      	movs	r3, #2
 8002dc8:	e00f      	b.n	8002dea <HAL_UART_Receive_IT+0x58>
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	2201      	movs	r2, #1
 8002dce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002dd8:	88fb      	ldrh	r3, [r7, #6]
 8002dda:	461a      	mov	r2, r3
 8002ddc:	68b9      	ldr	r1, [r7, #8]
 8002dde:	68f8      	ldr	r0, [r7, #12]
 8002de0:	f000 fb24 	bl	800342c <UART_Start_Receive_IT>
 8002de4:	4603      	mov	r3, r0
 8002de6:	e000      	b.n	8002dea <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8002de8:	2302      	movs	r3, #2
  }
}
 8002dea:	4618      	mov	r0, r3
 8002dec:	3710      	adds	r7, #16
 8002dee:	46bd      	mov	sp, r7
 8002df0:	bd80      	pop	{r7, pc}
	...

08002df4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b0ba      	sub	sp, #232	; 0xe8
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	68db      	ldr	r3, [r3, #12]
 8002e0c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	695b      	ldr	r3, [r3, #20]
 8002e16:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002e20:	2300      	movs	r3, #0
 8002e22:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002e26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e2a:	f003 030f 	and.w	r3, r3, #15
 8002e2e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8002e32:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d10f      	bne.n	8002e5a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002e3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e3e:	f003 0320 	and.w	r3, r3, #32
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d009      	beq.n	8002e5a <HAL_UART_IRQHandler+0x66>
 8002e46:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002e4a:	f003 0320 	and.w	r3, r3, #32
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d003      	beq.n	8002e5a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002e52:	6878      	ldr	r0, [r7, #4]
 8002e54:	f000 fc07 	bl	8003666 <UART_Receive_IT>
      return;
 8002e58:	e256      	b.n	8003308 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002e5a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	f000 80de 	beq.w	8003020 <HAL_UART_IRQHandler+0x22c>
 8002e64:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002e68:	f003 0301 	and.w	r3, r3, #1
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d106      	bne.n	8002e7e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002e70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002e74:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	f000 80d1 	beq.w	8003020 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002e7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e82:	f003 0301 	and.w	r3, r3, #1
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d00b      	beq.n	8002ea2 <HAL_UART_IRQHandler+0xae>
 8002e8a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002e8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d005      	beq.n	8002ea2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e9a:	f043 0201 	orr.w	r2, r3, #1
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002ea2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ea6:	f003 0304 	and.w	r3, r3, #4
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d00b      	beq.n	8002ec6 <HAL_UART_IRQHandler+0xd2>
 8002eae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002eb2:	f003 0301 	and.w	r3, r3, #1
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d005      	beq.n	8002ec6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ebe:	f043 0202 	orr.w	r2, r3, #2
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002ec6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002eca:	f003 0302 	and.w	r3, r3, #2
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d00b      	beq.n	8002eea <HAL_UART_IRQHandler+0xf6>
 8002ed2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002ed6:	f003 0301 	and.w	r3, r3, #1
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d005      	beq.n	8002eea <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ee2:	f043 0204 	orr.w	r2, r3, #4
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002eea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002eee:	f003 0308 	and.w	r3, r3, #8
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d011      	beq.n	8002f1a <HAL_UART_IRQHandler+0x126>
 8002ef6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002efa:	f003 0320 	and.w	r3, r3, #32
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d105      	bne.n	8002f0e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002f02:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002f06:	f003 0301 	and.w	r3, r3, #1
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d005      	beq.n	8002f1a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f12:	f043 0208 	orr.w	r2, r3, #8
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	f000 81ed 	beq.w	80032fe <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002f24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f28:	f003 0320 	and.w	r3, r3, #32
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d008      	beq.n	8002f42 <HAL_UART_IRQHandler+0x14e>
 8002f30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002f34:	f003 0320 	and.w	r3, r3, #32
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d002      	beq.n	8002f42 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002f3c:	6878      	ldr	r0, [r7, #4]
 8002f3e:	f000 fb92 	bl	8003666 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	695b      	ldr	r3, [r3, #20]
 8002f48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f4c:	2b40      	cmp	r3, #64	; 0x40
 8002f4e:	bf0c      	ite	eq
 8002f50:	2301      	moveq	r3, #1
 8002f52:	2300      	movne	r3, #0
 8002f54:	b2db      	uxtb	r3, r3
 8002f56:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f5e:	f003 0308 	and.w	r3, r3, #8
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d103      	bne.n	8002f6e <HAL_UART_IRQHandler+0x17a>
 8002f66:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d04f      	beq.n	800300e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002f6e:	6878      	ldr	r0, [r7, #4]
 8002f70:	f000 fa9a 	bl	80034a8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	695b      	ldr	r3, [r3, #20]
 8002f7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f7e:	2b40      	cmp	r3, #64	; 0x40
 8002f80:	d141      	bne.n	8003006 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	3314      	adds	r3, #20
 8002f88:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f8c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002f90:	e853 3f00 	ldrex	r3, [r3]
 8002f94:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002f98:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002f9c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002fa0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	3314      	adds	r3, #20
 8002faa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002fae:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002fb2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fb6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002fba:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002fbe:	e841 2300 	strex	r3, r2, [r1]
 8002fc2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002fc6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d1d9      	bne.n	8002f82 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d013      	beq.n	8002ffe <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fda:	4a7d      	ldr	r2, [pc, #500]	; (80031d0 <HAL_UART_IRQHandler+0x3dc>)
 8002fdc:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	f7fe ff47 	bl	8001e76 <HAL_DMA_Abort_IT>
 8002fe8:	4603      	mov	r3, r0
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d016      	beq.n	800301c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ff2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ff4:	687a      	ldr	r2, [r7, #4]
 8002ff6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002ff8:	4610      	mov	r0, r2
 8002ffa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ffc:	e00e      	b.n	800301c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002ffe:	6878      	ldr	r0, [r7, #4]
 8003000:	f000 f990 	bl	8003324 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003004:	e00a      	b.n	800301c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003006:	6878      	ldr	r0, [r7, #4]
 8003008:	f000 f98c 	bl	8003324 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800300c:	e006      	b.n	800301c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800300e:	6878      	ldr	r0, [r7, #4]
 8003010:	f000 f988 	bl	8003324 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2200      	movs	r2, #0
 8003018:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800301a:	e170      	b.n	80032fe <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800301c:	bf00      	nop
    return;
 800301e:	e16e      	b.n	80032fe <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003024:	2b01      	cmp	r3, #1
 8003026:	f040 814a 	bne.w	80032be <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800302a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800302e:	f003 0310 	and.w	r3, r3, #16
 8003032:	2b00      	cmp	r3, #0
 8003034:	f000 8143 	beq.w	80032be <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003038:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800303c:	f003 0310 	and.w	r3, r3, #16
 8003040:	2b00      	cmp	r3, #0
 8003042:	f000 813c 	beq.w	80032be <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003046:	2300      	movs	r3, #0
 8003048:	60bb      	str	r3, [r7, #8]
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	60bb      	str	r3, [r7, #8]
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	685b      	ldr	r3, [r3, #4]
 8003058:	60bb      	str	r3, [r7, #8]
 800305a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	695b      	ldr	r3, [r3, #20]
 8003062:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003066:	2b40      	cmp	r3, #64	; 0x40
 8003068:	f040 80b4 	bne.w	80031d4 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	685b      	ldr	r3, [r3, #4]
 8003074:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003078:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800307c:	2b00      	cmp	r3, #0
 800307e:	f000 8140 	beq.w	8003302 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003086:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800308a:	429a      	cmp	r2, r3
 800308c:	f080 8139 	bcs.w	8003302 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003096:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800309c:	69db      	ldr	r3, [r3, #28]
 800309e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80030a2:	f000 8088 	beq.w	80031b6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	330c      	adds	r3, #12
 80030ac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030b0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80030b4:	e853 3f00 	ldrex	r3, [r3]
 80030b8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80030bc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80030c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80030c4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	330c      	adds	r3, #12
 80030ce:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80030d2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80030d6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030da:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80030de:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80030e2:	e841 2300 	strex	r3, r2, [r1]
 80030e6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80030ea:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d1d9      	bne.n	80030a6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	3314      	adds	r3, #20
 80030f8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030fa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80030fc:	e853 3f00 	ldrex	r3, [r3]
 8003100:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003102:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003104:	f023 0301 	bic.w	r3, r3, #1
 8003108:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	3314      	adds	r3, #20
 8003112:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003116:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800311a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800311c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800311e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003122:	e841 2300 	strex	r3, r2, [r1]
 8003126:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003128:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800312a:	2b00      	cmp	r3, #0
 800312c:	d1e1      	bne.n	80030f2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	3314      	adds	r3, #20
 8003134:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003136:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003138:	e853 3f00 	ldrex	r3, [r3]
 800313c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800313e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003140:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003144:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	3314      	adds	r3, #20
 800314e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003152:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003154:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003156:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003158:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800315a:	e841 2300 	strex	r3, r2, [r1]
 800315e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003160:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003162:	2b00      	cmp	r3, #0
 8003164:	d1e3      	bne.n	800312e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	2220      	movs	r2, #32
 800316a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	2200      	movs	r2, #0
 8003172:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	330c      	adds	r3, #12
 800317a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800317c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800317e:	e853 3f00 	ldrex	r3, [r3]
 8003182:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003184:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003186:	f023 0310 	bic.w	r3, r3, #16
 800318a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	330c      	adds	r3, #12
 8003194:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003198:	65ba      	str	r2, [r7, #88]	; 0x58
 800319a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800319c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800319e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80031a0:	e841 2300 	strex	r3, r2, [r1]
 80031a4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80031a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d1e3      	bne.n	8003174 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031b0:	4618      	mov	r0, r3
 80031b2:	f7fe fdf0 	bl	8001d96 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80031be:	b29b      	uxth	r3, r3
 80031c0:	1ad3      	subs	r3, r2, r3
 80031c2:	b29b      	uxth	r3, r3
 80031c4:	4619      	mov	r1, r3
 80031c6:	6878      	ldr	r0, [r7, #4]
 80031c8:	f000 f8b6 	bl	8003338 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80031cc:	e099      	b.n	8003302 <HAL_UART_IRQHandler+0x50e>
 80031ce:	bf00      	nop
 80031d0:	0800356f 	.word	0x0800356f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80031dc:	b29b      	uxth	r3, r3
 80031de:	1ad3      	subs	r3, r2, r3
 80031e0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80031e8:	b29b      	uxth	r3, r3
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	f000 808b 	beq.w	8003306 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80031f0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	f000 8086 	beq.w	8003306 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	330c      	adds	r3, #12
 8003200:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003202:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003204:	e853 3f00 	ldrex	r3, [r3]
 8003208:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800320a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800320c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003210:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	330c      	adds	r3, #12
 800321a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800321e:	647a      	str	r2, [r7, #68]	; 0x44
 8003220:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003222:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003224:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003226:	e841 2300 	strex	r3, r2, [r1]
 800322a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800322c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800322e:	2b00      	cmp	r3, #0
 8003230:	d1e3      	bne.n	80031fa <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	3314      	adds	r3, #20
 8003238:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800323a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800323c:	e853 3f00 	ldrex	r3, [r3]
 8003240:	623b      	str	r3, [r7, #32]
   return(result);
 8003242:	6a3b      	ldr	r3, [r7, #32]
 8003244:	f023 0301 	bic.w	r3, r3, #1
 8003248:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	3314      	adds	r3, #20
 8003252:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003256:	633a      	str	r2, [r7, #48]	; 0x30
 8003258:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800325a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800325c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800325e:	e841 2300 	strex	r3, r2, [r1]
 8003262:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003264:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003266:	2b00      	cmp	r3, #0
 8003268:	d1e3      	bne.n	8003232 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	2220      	movs	r2, #32
 800326e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	2200      	movs	r2, #0
 8003276:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	330c      	adds	r3, #12
 800327e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003280:	693b      	ldr	r3, [r7, #16]
 8003282:	e853 3f00 	ldrex	r3, [r3]
 8003286:	60fb      	str	r3, [r7, #12]
   return(result);
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	f023 0310 	bic.w	r3, r3, #16
 800328e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	330c      	adds	r3, #12
 8003298:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800329c:	61fa      	str	r2, [r7, #28]
 800329e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032a0:	69b9      	ldr	r1, [r7, #24]
 80032a2:	69fa      	ldr	r2, [r7, #28]
 80032a4:	e841 2300 	strex	r3, r2, [r1]
 80032a8:	617b      	str	r3, [r7, #20]
   return(result);
 80032aa:	697b      	ldr	r3, [r7, #20]
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d1e3      	bne.n	8003278 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80032b0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80032b4:	4619      	mov	r1, r3
 80032b6:	6878      	ldr	r0, [r7, #4]
 80032b8:	f000 f83e 	bl	8003338 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80032bc:	e023      	b.n	8003306 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80032be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80032c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d009      	beq.n	80032de <HAL_UART_IRQHandler+0x4ea>
 80032ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80032ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d003      	beq.n	80032de <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80032d6:	6878      	ldr	r0, [r7, #4]
 80032d8:	f000 f95d 	bl	8003596 <UART_Transmit_IT>
    return;
 80032dc:	e014      	b.n	8003308 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80032de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80032e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d00e      	beq.n	8003308 <HAL_UART_IRQHandler+0x514>
 80032ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80032ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d008      	beq.n	8003308 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80032f6:	6878      	ldr	r0, [r7, #4]
 80032f8:	f000 f99d 	bl	8003636 <UART_EndTransmit_IT>
    return;
 80032fc:	e004      	b.n	8003308 <HAL_UART_IRQHandler+0x514>
    return;
 80032fe:	bf00      	nop
 8003300:	e002      	b.n	8003308 <HAL_UART_IRQHandler+0x514>
      return;
 8003302:	bf00      	nop
 8003304:	e000      	b.n	8003308 <HAL_UART_IRQHandler+0x514>
      return;
 8003306:	bf00      	nop
  }
}
 8003308:	37e8      	adds	r7, #232	; 0xe8
 800330a:	46bd      	mov	sp, r7
 800330c:	bd80      	pop	{r7, pc}
 800330e:	bf00      	nop

08003310 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003310:	b480      	push	{r7}
 8003312:	b083      	sub	sp, #12
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003318:	bf00      	nop
 800331a:	370c      	adds	r7, #12
 800331c:	46bd      	mov	sp, r7
 800331e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003322:	4770      	bx	lr

08003324 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003324:	b480      	push	{r7}
 8003326:	b083      	sub	sp, #12
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800332c:	bf00      	nop
 800332e:	370c      	adds	r7, #12
 8003330:	46bd      	mov	sp, r7
 8003332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003336:	4770      	bx	lr

08003338 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003338:	b480      	push	{r7}
 800333a:	b083      	sub	sp, #12
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
 8003340:	460b      	mov	r3, r1
 8003342:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003344:	bf00      	nop
 8003346:	370c      	adds	r7, #12
 8003348:	46bd      	mov	sp, r7
 800334a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334e:	4770      	bx	lr

08003350 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	b090      	sub	sp, #64	; 0x40
 8003354:	af00      	add	r7, sp, #0
 8003356:	60f8      	str	r0, [r7, #12]
 8003358:	60b9      	str	r1, [r7, #8]
 800335a:	603b      	str	r3, [r7, #0]
 800335c:	4613      	mov	r3, r2
 800335e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003360:	e050      	b.n	8003404 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003362:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003364:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003368:	d04c      	beq.n	8003404 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800336a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800336c:	2b00      	cmp	r3, #0
 800336e:	d007      	beq.n	8003380 <UART_WaitOnFlagUntilTimeout+0x30>
 8003370:	f7fd fd92 	bl	8000e98 <HAL_GetTick>
 8003374:	4602      	mov	r2, r0
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	1ad3      	subs	r3, r2, r3
 800337a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800337c:	429a      	cmp	r2, r3
 800337e:	d241      	bcs.n	8003404 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	330c      	adds	r3, #12
 8003386:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003388:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800338a:	e853 3f00 	ldrex	r3, [r3]
 800338e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003392:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003396:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	330c      	adds	r3, #12
 800339e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80033a0:	637a      	str	r2, [r7, #52]	; 0x34
 80033a2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033a4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80033a6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80033a8:	e841 2300 	strex	r3, r2, [r1]
 80033ac:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80033ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d1e5      	bne.n	8003380 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	3314      	adds	r3, #20
 80033ba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033bc:	697b      	ldr	r3, [r7, #20]
 80033be:	e853 3f00 	ldrex	r3, [r3]
 80033c2:	613b      	str	r3, [r7, #16]
   return(result);
 80033c4:	693b      	ldr	r3, [r7, #16]
 80033c6:	f023 0301 	bic.w	r3, r3, #1
 80033ca:	63bb      	str	r3, [r7, #56]	; 0x38
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	3314      	adds	r3, #20
 80033d2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80033d4:	623a      	str	r2, [r7, #32]
 80033d6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033d8:	69f9      	ldr	r1, [r7, #28]
 80033da:	6a3a      	ldr	r2, [r7, #32]
 80033dc:	e841 2300 	strex	r3, r2, [r1]
 80033e0:	61bb      	str	r3, [r7, #24]
   return(result);
 80033e2:	69bb      	ldr	r3, [r7, #24]
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d1e5      	bne.n	80033b4 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	2220      	movs	r2, #32
 80033ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	2220      	movs	r2, #32
 80033f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	2200      	movs	r2, #0
 80033fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003400:	2303      	movs	r3, #3
 8003402:	e00f      	b.n	8003424 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	681a      	ldr	r2, [r3, #0]
 800340a:	68bb      	ldr	r3, [r7, #8]
 800340c:	4013      	ands	r3, r2
 800340e:	68ba      	ldr	r2, [r7, #8]
 8003410:	429a      	cmp	r2, r3
 8003412:	bf0c      	ite	eq
 8003414:	2301      	moveq	r3, #1
 8003416:	2300      	movne	r3, #0
 8003418:	b2db      	uxtb	r3, r3
 800341a:	461a      	mov	r2, r3
 800341c:	79fb      	ldrb	r3, [r7, #7]
 800341e:	429a      	cmp	r2, r3
 8003420:	d09f      	beq.n	8003362 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003422:	2300      	movs	r3, #0
}
 8003424:	4618      	mov	r0, r3
 8003426:	3740      	adds	r7, #64	; 0x40
 8003428:	46bd      	mov	sp, r7
 800342a:	bd80      	pop	{r7, pc}

0800342c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800342c:	b480      	push	{r7}
 800342e:	b085      	sub	sp, #20
 8003430:	af00      	add	r7, sp, #0
 8003432:	60f8      	str	r0, [r7, #12]
 8003434:	60b9      	str	r1, [r7, #8]
 8003436:	4613      	mov	r3, r2
 8003438:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	68ba      	ldr	r2, [r7, #8]
 800343e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	88fa      	ldrh	r2, [r7, #6]
 8003444:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	88fa      	ldrh	r2, [r7, #6]
 800344a:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	2200      	movs	r2, #0
 8003450:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	2222      	movs	r2, #34	; 0x22
 8003456:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	2200      	movs	r2, #0
 800345e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	691b      	ldr	r3, [r3, #16]
 8003466:	2b00      	cmp	r3, #0
 8003468:	d007      	beq.n	800347a <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	68da      	ldr	r2, [r3, #12]
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003478:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	695a      	ldr	r2, [r3, #20]
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f042 0201 	orr.w	r2, r2, #1
 8003488:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	68da      	ldr	r2, [r3, #12]
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f042 0220 	orr.w	r2, r2, #32
 8003498:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800349a:	2300      	movs	r3, #0
}
 800349c:	4618      	mov	r0, r3
 800349e:	3714      	adds	r7, #20
 80034a0:	46bd      	mov	sp, r7
 80034a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a6:	4770      	bx	lr

080034a8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80034a8:	b480      	push	{r7}
 80034aa:	b095      	sub	sp, #84	; 0x54
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	330c      	adds	r3, #12
 80034b6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034ba:	e853 3f00 	ldrex	r3, [r3]
 80034be:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80034c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034c2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80034c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	330c      	adds	r3, #12
 80034ce:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80034d0:	643a      	str	r2, [r7, #64]	; 0x40
 80034d2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034d4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80034d6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80034d8:	e841 2300 	strex	r3, r2, [r1]
 80034dc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80034de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d1e5      	bne.n	80034b0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	3314      	adds	r3, #20
 80034ea:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034ec:	6a3b      	ldr	r3, [r7, #32]
 80034ee:	e853 3f00 	ldrex	r3, [r3]
 80034f2:	61fb      	str	r3, [r7, #28]
   return(result);
 80034f4:	69fb      	ldr	r3, [r7, #28]
 80034f6:	f023 0301 	bic.w	r3, r3, #1
 80034fa:	64bb      	str	r3, [r7, #72]	; 0x48
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	3314      	adds	r3, #20
 8003502:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003504:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003506:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003508:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800350a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800350c:	e841 2300 	strex	r3, r2, [r1]
 8003510:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003514:	2b00      	cmp	r3, #0
 8003516:	d1e5      	bne.n	80034e4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800351c:	2b01      	cmp	r3, #1
 800351e:	d119      	bne.n	8003554 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	330c      	adds	r3, #12
 8003526:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	e853 3f00 	ldrex	r3, [r3]
 800352e:	60bb      	str	r3, [r7, #8]
   return(result);
 8003530:	68bb      	ldr	r3, [r7, #8]
 8003532:	f023 0310 	bic.w	r3, r3, #16
 8003536:	647b      	str	r3, [r7, #68]	; 0x44
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	330c      	adds	r3, #12
 800353e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003540:	61ba      	str	r2, [r7, #24]
 8003542:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003544:	6979      	ldr	r1, [r7, #20]
 8003546:	69ba      	ldr	r2, [r7, #24]
 8003548:	e841 2300 	strex	r3, r2, [r1]
 800354c:	613b      	str	r3, [r7, #16]
   return(result);
 800354e:	693b      	ldr	r3, [r7, #16]
 8003550:	2b00      	cmp	r3, #0
 8003552:	d1e5      	bne.n	8003520 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2220      	movs	r2, #32
 8003558:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2200      	movs	r2, #0
 8003560:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003562:	bf00      	nop
 8003564:	3754      	adds	r7, #84	; 0x54
 8003566:	46bd      	mov	sp, r7
 8003568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356c:	4770      	bx	lr

0800356e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800356e:	b580      	push	{r7, lr}
 8003570:	b084      	sub	sp, #16
 8003572:	af00      	add	r7, sp, #0
 8003574:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800357a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	2200      	movs	r2, #0
 8003580:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	2200      	movs	r2, #0
 8003586:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003588:	68f8      	ldr	r0, [r7, #12]
 800358a:	f7ff fecb 	bl	8003324 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800358e:	bf00      	nop
 8003590:	3710      	adds	r7, #16
 8003592:	46bd      	mov	sp, r7
 8003594:	bd80      	pop	{r7, pc}

08003596 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003596:	b480      	push	{r7}
 8003598:	b085      	sub	sp, #20
 800359a:	af00      	add	r7, sp, #0
 800359c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035a4:	b2db      	uxtb	r3, r3
 80035a6:	2b21      	cmp	r3, #33	; 0x21
 80035a8:	d13e      	bne.n	8003628 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	689b      	ldr	r3, [r3, #8]
 80035ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035b2:	d114      	bne.n	80035de <UART_Transmit_IT+0x48>
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	691b      	ldr	r3, [r3, #16]
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d110      	bne.n	80035de <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6a1b      	ldr	r3, [r3, #32]
 80035c0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	881b      	ldrh	r3, [r3, #0]
 80035c6:	461a      	mov	r2, r3
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80035d0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6a1b      	ldr	r3, [r3, #32]
 80035d6:	1c9a      	adds	r2, r3, #2
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	621a      	str	r2, [r3, #32]
 80035dc:	e008      	b.n	80035f0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6a1b      	ldr	r3, [r3, #32]
 80035e2:	1c59      	adds	r1, r3, #1
 80035e4:	687a      	ldr	r2, [r7, #4]
 80035e6:	6211      	str	r1, [r2, #32]
 80035e8:	781a      	ldrb	r2, [r3, #0]
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80035f4:	b29b      	uxth	r3, r3
 80035f6:	3b01      	subs	r3, #1
 80035f8:	b29b      	uxth	r3, r3
 80035fa:	687a      	ldr	r2, [r7, #4]
 80035fc:	4619      	mov	r1, r3
 80035fe:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003600:	2b00      	cmp	r3, #0
 8003602:	d10f      	bne.n	8003624 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	68da      	ldr	r2, [r3, #12]
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003612:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	68da      	ldr	r2, [r3, #12]
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003622:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003624:	2300      	movs	r3, #0
 8003626:	e000      	b.n	800362a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003628:	2302      	movs	r3, #2
  }
}
 800362a:	4618      	mov	r0, r3
 800362c:	3714      	adds	r7, #20
 800362e:	46bd      	mov	sp, r7
 8003630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003634:	4770      	bx	lr

08003636 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003636:	b580      	push	{r7, lr}
 8003638:	b082      	sub	sp, #8
 800363a:	af00      	add	r7, sp, #0
 800363c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	68da      	ldr	r2, [r3, #12]
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800364c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2220      	movs	r2, #32
 8003652:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003656:	6878      	ldr	r0, [r7, #4]
 8003658:	f7ff fe5a 	bl	8003310 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800365c:	2300      	movs	r3, #0
}
 800365e:	4618      	mov	r0, r3
 8003660:	3708      	adds	r7, #8
 8003662:	46bd      	mov	sp, r7
 8003664:	bd80      	pop	{r7, pc}

08003666 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003666:	b580      	push	{r7, lr}
 8003668:	b08c      	sub	sp, #48	; 0x30
 800366a:	af00      	add	r7, sp, #0
 800366c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003674:	b2db      	uxtb	r3, r3
 8003676:	2b22      	cmp	r3, #34	; 0x22
 8003678:	f040 80ab 	bne.w	80037d2 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	689b      	ldr	r3, [r3, #8]
 8003680:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003684:	d117      	bne.n	80036b6 <UART_Receive_IT+0x50>
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	691b      	ldr	r3, [r3, #16]
 800368a:	2b00      	cmp	r3, #0
 800368c:	d113      	bne.n	80036b6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800368e:	2300      	movs	r3, #0
 8003690:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003696:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	685b      	ldr	r3, [r3, #4]
 800369e:	b29b      	uxth	r3, r3
 80036a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80036a4:	b29a      	uxth	r2, r3
 80036a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036a8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036ae:	1c9a      	adds	r2, r3, #2
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	629a      	str	r2, [r3, #40]	; 0x28
 80036b4:	e026      	b.n	8003704 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036ba:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80036bc:	2300      	movs	r3, #0
 80036be:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	689b      	ldr	r3, [r3, #8]
 80036c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80036c8:	d007      	beq.n	80036da <UART_Receive_IT+0x74>
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	689b      	ldr	r3, [r3, #8]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d10a      	bne.n	80036e8 <UART_Receive_IT+0x82>
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	691b      	ldr	r3, [r3, #16]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d106      	bne.n	80036e8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	685b      	ldr	r3, [r3, #4]
 80036e0:	b2da      	uxtb	r2, r3
 80036e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036e4:	701a      	strb	r2, [r3, #0]
 80036e6:	e008      	b.n	80036fa <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	685b      	ldr	r3, [r3, #4]
 80036ee:	b2db      	uxtb	r3, r3
 80036f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80036f4:	b2da      	uxtb	r2, r3
 80036f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036f8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036fe:	1c5a      	adds	r2, r3, #1
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003708:	b29b      	uxth	r3, r3
 800370a:	3b01      	subs	r3, #1
 800370c:	b29b      	uxth	r3, r3
 800370e:	687a      	ldr	r2, [r7, #4]
 8003710:	4619      	mov	r1, r3
 8003712:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003714:	2b00      	cmp	r3, #0
 8003716:	d15a      	bne.n	80037ce <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	68da      	ldr	r2, [r3, #12]
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f022 0220 	bic.w	r2, r2, #32
 8003726:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	68da      	ldr	r2, [r3, #12]
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003736:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	695a      	ldr	r2, [r3, #20]
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f022 0201 	bic.w	r2, r2, #1
 8003746:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2220      	movs	r2, #32
 800374c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003754:	2b01      	cmp	r3, #1
 8003756:	d135      	bne.n	80037c4 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2200      	movs	r2, #0
 800375c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	330c      	adds	r3, #12
 8003764:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003766:	697b      	ldr	r3, [r7, #20]
 8003768:	e853 3f00 	ldrex	r3, [r3]
 800376c:	613b      	str	r3, [r7, #16]
   return(result);
 800376e:	693b      	ldr	r3, [r7, #16]
 8003770:	f023 0310 	bic.w	r3, r3, #16
 8003774:	627b      	str	r3, [r7, #36]	; 0x24
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	330c      	adds	r3, #12
 800377c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800377e:	623a      	str	r2, [r7, #32]
 8003780:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003782:	69f9      	ldr	r1, [r7, #28]
 8003784:	6a3a      	ldr	r2, [r7, #32]
 8003786:	e841 2300 	strex	r3, r2, [r1]
 800378a:	61bb      	str	r3, [r7, #24]
   return(result);
 800378c:	69bb      	ldr	r3, [r7, #24]
 800378e:	2b00      	cmp	r3, #0
 8003790:	d1e5      	bne.n	800375e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f003 0310 	and.w	r3, r3, #16
 800379c:	2b10      	cmp	r3, #16
 800379e:	d10a      	bne.n	80037b6 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80037a0:	2300      	movs	r3, #0
 80037a2:	60fb      	str	r3, [r7, #12]
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	60fb      	str	r3, [r7, #12]
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	685b      	ldr	r3, [r3, #4]
 80037b2:	60fb      	str	r3, [r7, #12]
 80037b4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80037ba:	4619      	mov	r1, r3
 80037bc:	6878      	ldr	r0, [r7, #4]
 80037be:	f7ff fdbb 	bl	8003338 <HAL_UARTEx_RxEventCallback>
 80037c2:	e002      	b.n	80037ca <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80037c4:	6878      	ldr	r0, [r7, #4]
 80037c6:	f7fd f8c9 	bl	800095c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80037ca:	2300      	movs	r3, #0
 80037cc:	e002      	b.n	80037d4 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80037ce:	2300      	movs	r3, #0
 80037d0:	e000      	b.n	80037d4 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80037d2:	2302      	movs	r3, #2
  }
}
 80037d4:	4618      	mov	r0, r3
 80037d6:	3730      	adds	r7, #48	; 0x30
 80037d8:	46bd      	mov	sp, r7
 80037da:	bd80      	pop	{r7, pc}

080037dc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80037dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80037e0:	b0c0      	sub	sp, #256	; 0x100
 80037e2:	af00      	add	r7, sp, #0
 80037e4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80037e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	691b      	ldr	r3, [r3, #16]
 80037f0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80037f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037f8:	68d9      	ldr	r1, [r3, #12]
 80037fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037fe:	681a      	ldr	r2, [r3, #0]
 8003800:	ea40 0301 	orr.w	r3, r0, r1
 8003804:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003806:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800380a:	689a      	ldr	r2, [r3, #8]
 800380c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003810:	691b      	ldr	r3, [r3, #16]
 8003812:	431a      	orrs	r2, r3
 8003814:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003818:	695b      	ldr	r3, [r3, #20]
 800381a:	431a      	orrs	r2, r3
 800381c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003820:	69db      	ldr	r3, [r3, #28]
 8003822:	4313      	orrs	r3, r2
 8003824:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003828:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	68db      	ldr	r3, [r3, #12]
 8003830:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003834:	f021 010c 	bic.w	r1, r1, #12
 8003838:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800383c:	681a      	ldr	r2, [r3, #0]
 800383e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003842:	430b      	orrs	r3, r1
 8003844:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003846:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	695b      	ldr	r3, [r3, #20]
 800384e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003852:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003856:	6999      	ldr	r1, [r3, #24]
 8003858:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800385c:	681a      	ldr	r2, [r3, #0]
 800385e:	ea40 0301 	orr.w	r3, r0, r1
 8003862:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003864:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003868:	681a      	ldr	r2, [r3, #0]
 800386a:	4b8f      	ldr	r3, [pc, #572]	; (8003aa8 <UART_SetConfig+0x2cc>)
 800386c:	429a      	cmp	r2, r3
 800386e:	d005      	beq.n	800387c <UART_SetConfig+0xa0>
 8003870:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003874:	681a      	ldr	r2, [r3, #0]
 8003876:	4b8d      	ldr	r3, [pc, #564]	; (8003aac <UART_SetConfig+0x2d0>)
 8003878:	429a      	cmp	r2, r3
 800387a:	d104      	bne.n	8003886 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800387c:	f7ff f996 	bl	8002bac <HAL_RCC_GetPCLK2Freq>
 8003880:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003884:	e003      	b.n	800388e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003886:	f7ff f97d 	bl	8002b84 <HAL_RCC_GetPCLK1Freq>
 800388a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800388e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003892:	69db      	ldr	r3, [r3, #28]
 8003894:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003898:	f040 810c 	bne.w	8003ab4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800389c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80038a0:	2200      	movs	r2, #0
 80038a2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80038a6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80038aa:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80038ae:	4622      	mov	r2, r4
 80038b0:	462b      	mov	r3, r5
 80038b2:	1891      	adds	r1, r2, r2
 80038b4:	65b9      	str	r1, [r7, #88]	; 0x58
 80038b6:	415b      	adcs	r3, r3
 80038b8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80038ba:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80038be:	4621      	mov	r1, r4
 80038c0:	eb12 0801 	adds.w	r8, r2, r1
 80038c4:	4629      	mov	r1, r5
 80038c6:	eb43 0901 	adc.w	r9, r3, r1
 80038ca:	f04f 0200 	mov.w	r2, #0
 80038ce:	f04f 0300 	mov.w	r3, #0
 80038d2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80038d6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80038da:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80038de:	4690      	mov	r8, r2
 80038e0:	4699      	mov	r9, r3
 80038e2:	4623      	mov	r3, r4
 80038e4:	eb18 0303 	adds.w	r3, r8, r3
 80038e8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80038ec:	462b      	mov	r3, r5
 80038ee:	eb49 0303 	adc.w	r3, r9, r3
 80038f2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80038f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038fa:	685b      	ldr	r3, [r3, #4]
 80038fc:	2200      	movs	r2, #0
 80038fe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003902:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003906:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800390a:	460b      	mov	r3, r1
 800390c:	18db      	adds	r3, r3, r3
 800390e:	653b      	str	r3, [r7, #80]	; 0x50
 8003910:	4613      	mov	r3, r2
 8003912:	eb42 0303 	adc.w	r3, r2, r3
 8003916:	657b      	str	r3, [r7, #84]	; 0x54
 8003918:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800391c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003920:	f7fc fc52 	bl	80001c8 <__aeabi_uldivmod>
 8003924:	4602      	mov	r2, r0
 8003926:	460b      	mov	r3, r1
 8003928:	4b61      	ldr	r3, [pc, #388]	; (8003ab0 <UART_SetConfig+0x2d4>)
 800392a:	fba3 2302 	umull	r2, r3, r3, r2
 800392e:	095b      	lsrs	r3, r3, #5
 8003930:	011c      	lsls	r4, r3, #4
 8003932:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003936:	2200      	movs	r2, #0
 8003938:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800393c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003940:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003944:	4642      	mov	r2, r8
 8003946:	464b      	mov	r3, r9
 8003948:	1891      	adds	r1, r2, r2
 800394a:	64b9      	str	r1, [r7, #72]	; 0x48
 800394c:	415b      	adcs	r3, r3
 800394e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003950:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003954:	4641      	mov	r1, r8
 8003956:	eb12 0a01 	adds.w	sl, r2, r1
 800395a:	4649      	mov	r1, r9
 800395c:	eb43 0b01 	adc.w	fp, r3, r1
 8003960:	f04f 0200 	mov.w	r2, #0
 8003964:	f04f 0300 	mov.w	r3, #0
 8003968:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800396c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003970:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003974:	4692      	mov	sl, r2
 8003976:	469b      	mov	fp, r3
 8003978:	4643      	mov	r3, r8
 800397a:	eb1a 0303 	adds.w	r3, sl, r3
 800397e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003982:	464b      	mov	r3, r9
 8003984:	eb4b 0303 	adc.w	r3, fp, r3
 8003988:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800398c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003990:	685b      	ldr	r3, [r3, #4]
 8003992:	2200      	movs	r2, #0
 8003994:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003998:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800399c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80039a0:	460b      	mov	r3, r1
 80039a2:	18db      	adds	r3, r3, r3
 80039a4:	643b      	str	r3, [r7, #64]	; 0x40
 80039a6:	4613      	mov	r3, r2
 80039a8:	eb42 0303 	adc.w	r3, r2, r3
 80039ac:	647b      	str	r3, [r7, #68]	; 0x44
 80039ae:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80039b2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80039b6:	f7fc fc07 	bl	80001c8 <__aeabi_uldivmod>
 80039ba:	4602      	mov	r2, r0
 80039bc:	460b      	mov	r3, r1
 80039be:	4611      	mov	r1, r2
 80039c0:	4b3b      	ldr	r3, [pc, #236]	; (8003ab0 <UART_SetConfig+0x2d4>)
 80039c2:	fba3 2301 	umull	r2, r3, r3, r1
 80039c6:	095b      	lsrs	r3, r3, #5
 80039c8:	2264      	movs	r2, #100	; 0x64
 80039ca:	fb02 f303 	mul.w	r3, r2, r3
 80039ce:	1acb      	subs	r3, r1, r3
 80039d0:	00db      	lsls	r3, r3, #3
 80039d2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80039d6:	4b36      	ldr	r3, [pc, #216]	; (8003ab0 <UART_SetConfig+0x2d4>)
 80039d8:	fba3 2302 	umull	r2, r3, r3, r2
 80039dc:	095b      	lsrs	r3, r3, #5
 80039de:	005b      	lsls	r3, r3, #1
 80039e0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80039e4:	441c      	add	r4, r3
 80039e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80039ea:	2200      	movs	r2, #0
 80039ec:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80039f0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80039f4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80039f8:	4642      	mov	r2, r8
 80039fa:	464b      	mov	r3, r9
 80039fc:	1891      	adds	r1, r2, r2
 80039fe:	63b9      	str	r1, [r7, #56]	; 0x38
 8003a00:	415b      	adcs	r3, r3
 8003a02:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003a04:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003a08:	4641      	mov	r1, r8
 8003a0a:	1851      	adds	r1, r2, r1
 8003a0c:	6339      	str	r1, [r7, #48]	; 0x30
 8003a0e:	4649      	mov	r1, r9
 8003a10:	414b      	adcs	r3, r1
 8003a12:	637b      	str	r3, [r7, #52]	; 0x34
 8003a14:	f04f 0200 	mov.w	r2, #0
 8003a18:	f04f 0300 	mov.w	r3, #0
 8003a1c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003a20:	4659      	mov	r1, fp
 8003a22:	00cb      	lsls	r3, r1, #3
 8003a24:	4651      	mov	r1, sl
 8003a26:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003a2a:	4651      	mov	r1, sl
 8003a2c:	00ca      	lsls	r2, r1, #3
 8003a2e:	4610      	mov	r0, r2
 8003a30:	4619      	mov	r1, r3
 8003a32:	4603      	mov	r3, r0
 8003a34:	4642      	mov	r2, r8
 8003a36:	189b      	adds	r3, r3, r2
 8003a38:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003a3c:	464b      	mov	r3, r9
 8003a3e:	460a      	mov	r2, r1
 8003a40:	eb42 0303 	adc.w	r3, r2, r3
 8003a44:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003a48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a4c:	685b      	ldr	r3, [r3, #4]
 8003a4e:	2200      	movs	r2, #0
 8003a50:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003a54:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003a58:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003a5c:	460b      	mov	r3, r1
 8003a5e:	18db      	adds	r3, r3, r3
 8003a60:	62bb      	str	r3, [r7, #40]	; 0x28
 8003a62:	4613      	mov	r3, r2
 8003a64:	eb42 0303 	adc.w	r3, r2, r3
 8003a68:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003a6a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003a6e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003a72:	f7fc fba9 	bl	80001c8 <__aeabi_uldivmod>
 8003a76:	4602      	mov	r2, r0
 8003a78:	460b      	mov	r3, r1
 8003a7a:	4b0d      	ldr	r3, [pc, #52]	; (8003ab0 <UART_SetConfig+0x2d4>)
 8003a7c:	fba3 1302 	umull	r1, r3, r3, r2
 8003a80:	095b      	lsrs	r3, r3, #5
 8003a82:	2164      	movs	r1, #100	; 0x64
 8003a84:	fb01 f303 	mul.w	r3, r1, r3
 8003a88:	1ad3      	subs	r3, r2, r3
 8003a8a:	00db      	lsls	r3, r3, #3
 8003a8c:	3332      	adds	r3, #50	; 0x32
 8003a8e:	4a08      	ldr	r2, [pc, #32]	; (8003ab0 <UART_SetConfig+0x2d4>)
 8003a90:	fba2 2303 	umull	r2, r3, r2, r3
 8003a94:	095b      	lsrs	r3, r3, #5
 8003a96:	f003 0207 	and.w	r2, r3, #7
 8003a9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	4422      	add	r2, r4
 8003aa2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003aa4:	e106      	b.n	8003cb4 <UART_SetConfig+0x4d8>
 8003aa6:	bf00      	nop
 8003aa8:	40011000 	.word	0x40011000
 8003aac:	40011400 	.word	0x40011400
 8003ab0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003ab4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003ab8:	2200      	movs	r2, #0
 8003aba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003abe:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003ac2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003ac6:	4642      	mov	r2, r8
 8003ac8:	464b      	mov	r3, r9
 8003aca:	1891      	adds	r1, r2, r2
 8003acc:	6239      	str	r1, [r7, #32]
 8003ace:	415b      	adcs	r3, r3
 8003ad0:	627b      	str	r3, [r7, #36]	; 0x24
 8003ad2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003ad6:	4641      	mov	r1, r8
 8003ad8:	1854      	adds	r4, r2, r1
 8003ada:	4649      	mov	r1, r9
 8003adc:	eb43 0501 	adc.w	r5, r3, r1
 8003ae0:	f04f 0200 	mov.w	r2, #0
 8003ae4:	f04f 0300 	mov.w	r3, #0
 8003ae8:	00eb      	lsls	r3, r5, #3
 8003aea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003aee:	00e2      	lsls	r2, r4, #3
 8003af0:	4614      	mov	r4, r2
 8003af2:	461d      	mov	r5, r3
 8003af4:	4643      	mov	r3, r8
 8003af6:	18e3      	adds	r3, r4, r3
 8003af8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003afc:	464b      	mov	r3, r9
 8003afe:	eb45 0303 	adc.w	r3, r5, r3
 8003b02:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003b06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b0a:	685b      	ldr	r3, [r3, #4]
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003b12:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003b16:	f04f 0200 	mov.w	r2, #0
 8003b1a:	f04f 0300 	mov.w	r3, #0
 8003b1e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003b22:	4629      	mov	r1, r5
 8003b24:	008b      	lsls	r3, r1, #2
 8003b26:	4621      	mov	r1, r4
 8003b28:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003b2c:	4621      	mov	r1, r4
 8003b2e:	008a      	lsls	r2, r1, #2
 8003b30:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003b34:	f7fc fb48 	bl	80001c8 <__aeabi_uldivmod>
 8003b38:	4602      	mov	r2, r0
 8003b3a:	460b      	mov	r3, r1
 8003b3c:	4b60      	ldr	r3, [pc, #384]	; (8003cc0 <UART_SetConfig+0x4e4>)
 8003b3e:	fba3 2302 	umull	r2, r3, r3, r2
 8003b42:	095b      	lsrs	r3, r3, #5
 8003b44:	011c      	lsls	r4, r3, #4
 8003b46:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003b50:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003b54:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003b58:	4642      	mov	r2, r8
 8003b5a:	464b      	mov	r3, r9
 8003b5c:	1891      	adds	r1, r2, r2
 8003b5e:	61b9      	str	r1, [r7, #24]
 8003b60:	415b      	adcs	r3, r3
 8003b62:	61fb      	str	r3, [r7, #28]
 8003b64:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003b68:	4641      	mov	r1, r8
 8003b6a:	1851      	adds	r1, r2, r1
 8003b6c:	6139      	str	r1, [r7, #16]
 8003b6e:	4649      	mov	r1, r9
 8003b70:	414b      	adcs	r3, r1
 8003b72:	617b      	str	r3, [r7, #20]
 8003b74:	f04f 0200 	mov.w	r2, #0
 8003b78:	f04f 0300 	mov.w	r3, #0
 8003b7c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003b80:	4659      	mov	r1, fp
 8003b82:	00cb      	lsls	r3, r1, #3
 8003b84:	4651      	mov	r1, sl
 8003b86:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003b8a:	4651      	mov	r1, sl
 8003b8c:	00ca      	lsls	r2, r1, #3
 8003b8e:	4610      	mov	r0, r2
 8003b90:	4619      	mov	r1, r3
 8003b92:	4603      	mov	r3, r0
 8003b94:	4642      	mov	r2, r8
 8003b96:	189b      	adds	r3, r3, r2
 8003b98:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003b9c:	464b      	mov	r3, r9
 8003b9e:	460a      	mov	r2, r1
 8003ba0:	eb42 0303 	adc.w	r3, r2, r3
 8003ba4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003ba8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bac:	685b      	ldr	r3, [r3, #4]
 8003bae:	2200      	movs	r2, #0
 8003bb0:	67bb      	str	r3, [r7, #120]	; 0x78
 8003bb2:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003bb4:	f04f 0200 	mov.w	r2, #0
 8003bb8:	f04f 0300 	mov.w	r3, #0
 8003bbc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003bc0:	4649      	mov	r1, r9
 8003bc2:	008b      	lsls	r3, r1, #2
 8003bc4:	4641      	mov	r1, r8
 8003bc6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003bca:	4641      	mov	r1, r8
 8003bcc:	008a      	lsls	r2, r1, #2
 8003bce:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003bd2:	f7fc faf9 	bl	80001c8 <__aeabi_uldivmod>
 8003bd6:	4602      	mov	r2, r0
 8003bd8:	460b      	mov	r3, r1
 8003bda:	4611      	mov	r1, r2
 8003bdc:	4b38      	ldr	r3, [pc, #224]	; (8003cc0 <UART_SetConfig+0x4e4>)
 8003bde:	fba3 2301 	umull	r2, r3, r3, r1
 8003be2:	095b      	lsrs	r3, r3, #5
 8003be4:	2264      	movs	r2, #100	; 0x64
 8003be6:	fb02 f303 	mul.w	r3, r2, r3
 8003bea:	1acb      	subs	r3, r1, r3
 8003bec:	011b      	lsls	r3, r3, #4
 8003bee:	3332      	adds	r3, #50	; 0x32
 8003bf0:	4a33      	ldr	r2, [pc, #204]	; (8003cc0 <UART_SetConfig+0x4e4>)
 8003bf2:	fba2 2303 	umull	r2, r3, r2, r3
 8003bf6:	095b      	lsrs	r3, r3, #5
 8003bf8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003bfc:	441c      	add	r4, r3
 8003bfe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003c02:	2200      	movs	r2, #0
 8003c04:	673b      	str	r3, [r7, #112]	; 0x70
 8003c06:	677a      	str	r2, [r7, #116]	; 0x74
 8003c08:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003c0c:	4642      	mov	r2, r8
 8003c0e:	464b      	mov	r3, r9
 8003c10:	1891      	adds	r1, r2, r2
 8003c12:	60b9      	str	r1, [r7, #8]
 8003c14:	415b      	adcs	r3, r3
 8003c16:	60fb      	str	r3, [r7, #12]
 8003c18:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003c1c:	4641      	mov	r1, r8
 8003c1e:	1851      	adds	r1, r2, r1
 8003c20:	6039      	str	r1, [r7, #0]
 8003c22:	4649      	mov	r1, r9
 8003c24:	414b      	adcs	r3, r1
 8003c26:	607b      	str	r3, [r7, #4]
 8003c28:	f04f 0200 	mov.w	r2, #0
 8003c2c:	f04f 0300 	mov.w	r3, #0
 8003c30:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003c34:	4659      	mov	r1, fp
 8003c36:	00cb      	lsls	r3, r1, #3
 8003c38:	4651      	mov	r1, sl
 8003c3a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003c3e:	4651      	mov	r1, sl
 8003c40:	00ca      	lsls	r2, r1, #3
 8003c42:	4610      	mov	r0, r2
 8003c44:	4619      	mov	r1, r3
 8003c46:	4603      	mov	r3, r0
 8003c48:	4642      	mov	r2, r8
 8003c4a:	189b      	adds	r3, r3, r2
 8003c4c:	66bb      	str	r3, [r7, #104]	; 0x68
 8003c4e:	464b      	mov	r3, r9
 8003c50:	460a      	mov	r2, r1
 8003c52:	eb42 0303 	adc.w	r3, r2, r3
 8003c56:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003c58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c5c:	685b      	ldr	r3, [r3, #4]
 8003c5e:	2200      	movs	r2, #0
 8003c60:	663b      	str	r3, [r7, #96]	; 0x60
 8003c62:	667a      	str	r2, [r7, #100]	; 0x64
 8003c64:	f04f 0200 	mov.w	r2, #0
 8003c68:	f04f 0300 	mov.w	r3, #0
 8003c6c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003c70:	4649      	mov	r1, r9
 8003c72:	008b      	lsls	r3, r1, #2
 8003c74:	4641      	mov	r1, r8
 8003c76:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003c7a:	4641      	mov	r1, r8
 8003c7c:	008a      	lsls	r2, r1, #2
 8003c7e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003c82:	f7fc faa1 	bl	80001c8 <__aeabi_uldivmod>
 8003c86:	4602      	mov	r2, r0
 8003c88:	460b      	mov	r3, r1
 8003c8a:	4b0d      	ldr	r3, [pc, #52]	; (8003cc0 <UART_SetConfig+0x4e4>)
 8003c8c:	fba3 1302 	umull	r1, r3, r3, r2
 8003c90:	095b      	lsrs	r3, r3, #5
 8003c92:	2164      	movs	r1, #100	; 0x64
 8003c94:	fb01 f303 	mul.w	r3, r1, r3
 8003c98:	1ad3      	subs	r3, r2, r3
 8003c9a:	011b      	lsls	r3, r3, #4
 8003c9c:	3332      	adds	r3, #50	; 0x32
 8003c9e:	4a08      	ldr	r2, [pc, #32]	; (8003cc0 <UART_SetConfig+0x4e4>)
 8003ca0:	fba2 2303 	umull	r2, r3, r2, r3
 8003ca4:	095b      	lsrs	r3, r3, #5
 8003ca6:	f003 020f 	and.w	r2, r3, #15
 8003caa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	4422      	add	r2, r4
 8003cb2:	609a      	str	r2, [r3, #8]
}
 8003cb4:	bf00      	nop
 8003cb6:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003cc0:	51eb851f 	.word	0x51eb851f

08003cc4 <memset>:
 8003cc4:	4402      	add	r2, r0
 8003cc6:	4603      	mov	r3, r0
 8003cc8:	4293      	cmp	r3, r2
 8003cca:	d100      	bne.n	8003cce <memset+0xa>
 8003ccc:	4770      	bx	lr
 8003cce:	f803 1b01 	strb.w	r1, [r3], #1
 8003cd2:	e7f9      	b.n	8003cc8 <memset+0x4>

08003cd4 <__libc_init_array>:
 8003cd4:	b570      	push	{r4, r5, r6, lr}
 8003cd6:	4d0d      	ldr	r5, [pc, #52]	; (8003d0c <__libc_init_array+0x38>)
 8003cd8:	4c0d      	ldr	r4, [pc, #52]	; (8003d10 <__libc_init_array+0x3c>)
 8003cda:	1b64      	subs	r4, r4, r5
 8003cdc:	10a4      	asrs	r4, r4, #2
 8003cde:	2600      	movs	r6, #0
 8003ce0:	42a6      	cmp	r6, r4
 8003ce2:	d109      	bne.n	8003cf8 <__libc_init_array+0x24>
 8003ce4:	4d0b      	ldr	r5, [pc, #44]	; (8003d14 <__libc_init_array+0x40>)
 8003ce6:	4c0c      	ldr	r4, [pc, #48]	; (8003d18 <__libc_init_array+0x44>)
 8003ce8:	f000 f818 	bl	8003d1c <_init>
 8003cec:	1b64      	subs	r4, r4, r5
 8003cee:	10a4      	asrs	r4, r4, #2
 8003cf0:	2600      	movs	r6, #0
 8003cf2:	42a6      	cmp	r6, r4
 8003cf4:	d105      	bne.n	8003d02 <__libc_init_array+0x2e>
 8003cf6:	bd70      	pop	{r4, r5, r6, pc}
 8003cf8:	f855 3b04 	ldr.w	r3, [r5], #4
 8003cfc:	4798      	blx	r3
 8003cfe:	3601      	adds	r6, #1
 8003d00:	e7ee      	b.n	8003ce0 <__libc_init_array+0xc>
 8003d02:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d06:	4798      	blx	r3
 8003d08:	3601      	adds	r6, #1
 8003d0a:	e7f2      	b.n	8003cf2 <__libc_init_array+0x1e>
 8003d0c:	08003d54 	.word	0x08003d54
 8003d10:	08003d54 	.word	0x08003d54
 8003d14:	08003d54 	.word	0x08003d54
 8003d18:	08003d58 	.word	0x08003d58

08003d1c <_init>:
 8003d1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d1e:	bf00      	nop
 8003d20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d22:	bc08      	pop	{r3}
 8003d24:	469e      	mov	lr, r3
 8003d26:	4770      	bx	lr

08003d28 <_fini>:
 8003d28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d2a:	bf00      	nop
 8003d2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d2e:	bc08      	pop	{r3}
 8003d30:	469e      	mov	lr, r3
 8003d32:	4770      	bx	lr
